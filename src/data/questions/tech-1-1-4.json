{
  "topicId": "tech-1-1-4",
  "title": "論理回路",
  "questions": [
    {
      "id": "q-tech-1-1-4-001",
      "type": "multiple_choice",
      "question": "AND回路の出力が1になるのはどの条件ですか？",
      "options": [
        "入力の少なくとも1つが1",
        "入力が全て1",
        "入力が全て0",
        "入力が異なる値"
      ],
      "correctAnswer": 1,
      "explanation": "AND回路（論理積回路）は、全ての入力が1の場合のみ出力が1になります。\n2入力AND回路の真理値表：\nA=0, B=0 → 出力=0\nA=0, B=1 → 出力=0\nA=1, B=0 → 出力=0\nA=1, B=1 → 出力=1\n1つでも0があれば、出力は0になります。"
    },
    {
      "id": "q-tech-1-1-4-002",
      "type": "multiple_choice",
      "question": "NAND回路は、どの回路の組み合わせと等価ですか？",
      "options": [
        "AND回路の後にOR回路",
        "AND回路の後にNOT回路",
        "OR回路の後にNOT回路",
        "NOT回路の後にAND回路"
      ],
      "correctAnswer": 1,
      "explanation": "NAND（Not AND）回路は、AND回路の出力を反転（NOT）したものです。\nNAND = NOT(AND)\nAND回路の出力にNOT回路を接続することで、NAND回路と同じ動作になります。\nNANDは万能ゲートとも呼ばれ、NAND回路だけで全ての論理回路を構成できます。"
    },
    {
      "id": "q-tech-1-1-4-003",
      "type": "multiple_choice",
      "question": "XOR（排他的論理和）回路の出力が1になる条件はどれですか？",
      "options": [
        "入力が全て同じ値",
        "入力が全て1",
        "入力が異なる値",
        "入力が全て0"
      ],
      "correctAnswer": 2,
      "explanation": "XOR回路は、入力が異なる値のときに出力が1になります。\n2入力XOR回路の真理値表：\nA=0, B=0 → 出力=0（同じ）\nA=0, B=1 → 出力=1（異なる）\nA=1, B=0 → 出力=1（異なる）\nA=1, B=1 → 出力=0（同じ）\nXORは加算の下位ビット計算や、パリティチェックなどに使用されます。"
    },
    {
      "id": "q-tech-1-1-4-004",
      "type": "multiple_choice",
      "question": "半加算器（Half Adder）の出力は何ビットですか？",
      "options": ["1ビット", "2ビット", "3ビット", "4ビット"],
      "correctAnswer": 1,
      "explanation": "半加算器は2つの1ビット入力（A、B）を加算し、2ビットの出力を生成します。\n出力：\n・S（Sum）：和の下位ビット = A XOR B\n・C（Carry）：桁上げビット = A AND B\n例：1 + 1 = 10（2進数）なので、S=0、C=1となります。\n半加算器では前段からの桁上げを考慮しません。"
    },
    {
      "id": "q-tech-1-1-4-005",
      "type": "multiple_choice",
      "question": "全加算器（Full Adder）と半加算器（Half Adder）の違いは何ですか？",
      "options": [
        "全加算器は3入力、半加算器は2入力",
        "全加算器は減算もできる",
        "全加算器は4ビットを扱える",
        "全加算器は並列処理ができる"
      ],
      "correctAnswer": 0,
      "explanation": "全加算器（Full Adder）は3つの入力を持ちます：\n・A：加算する1ビット目\n・B：加算する2ビット目\n・Cin：前段からの桁上げ（Carry in）\n出力：\n・S（Sum）= A XOR B XOR Cin\n・Cout（Carry out）= (A AND B) OR (Cin AND (A XOR B))\n半加算器は2入力（A、B）のみで、前段からの桁上げを考慮しません。"
    },
    {
      "id": "q-tech-1-1-4-006",
      "type": "multiple_choice",
      "question": "OR回路の出力が0になるのはどの条件ですか？",
      "options": [
        "入力の少なくとも1つが1",
        "入力が全て1",
        "入力が全て0",
        "入力が異なる値"
      ],
      "correctAnswer": 2,
      "explanation": "OR回路（論理和回路）は、全ての入力が0の場合のみ出力が0になります。\n2入力OR回路の真理値表：\nA=0, B=0 → 出力=0\nA=0, B=1 → 出力=1\nA=1, B=0 → 出力=1\nA=1, B=1 → 出力=1\n1つでも1があれば、出力は1になります。"
    },
    {
      "id": "q-tech-1-1-4-007",
      "type": "multiple_choice",
      "question": "ビット列10110101に対して、マスクパターン00001111でAND演算を行った結果はどれですか？",
      "options": ["10110000", "00000101", "10111111", "00001111"],
      "correctAnswer": 1,
      "explanation": "AND演算によるマスク処理を計算します：\n  10110101\nAND 00001111\n------------\n  00000101\n\nマスクパターンの0の部分は必ず0になり、1の部分は元のビットがそのまま残ります。\n下位4ビット（0101）だけが抽出され、上位4ビットは0になります。\nこれは特定のビットを取り出す操作（ビットマスク）です。"
    },
    {
      "id": "q-tech-1-1-4-008",
      "type": "multiple_choice",
      "question": "NOR回路だけで構成できない論理回路はどれですか？",
      "options": ["AND回路", "OR回路", "NOT回路", "構成できないものはない"],
      "correctAnswer": 3,
      "explanation": "NOR回路は万能ゲート（Universal Gate）の1つで、NOR回路だけで全ての基本論理回路を構成できます。\n・NOT：A NOR A = NOT A\n・OR：(A NOR B) NOR (A NOR B) = A OR B\n・AND：(A NOR A) NOR (B NOR B) = A AND B\nNAND回路も同様に万能ゲートです。これにより、回路設計が簡素化されます。"
    },
    {
      "id": "q-tech-1-1-4-009",
      "type": "multiple_choice",
      "question": "ビット列11001010に対して、マスクパターン11110000でOR演算を行った結果はどれですか？",
      "options": ["11000000", "11111010", "00001010", "11110000"],
      "correctAnswer": 1,
      "explanation": "OR演算によるマスク処理を計算します：\n  11001010\nOR  11110000\n------------\n  11111010\n\nマスクパターンの1の部分は必ず1になり、0の部分は元のビットがそのまま残ります。\n上位4ビットが全て1に設定され（1111）、下位4ビットは元の値（1010）が保持されます。\nこれは特定のビットを強制的に1にする操作です。"
    },
    {
      "id": "q-tech-1-1-4-010",
      "type": "multiple_choice",
      "question": "4ビットの全加算器を構成するには、半加算器と全加算器がそれぞれ何個必要ですか？",
      "options": [
        "半加算器1個、全加算器3個",
        "半加算器2個、全加算器2個",
        "半加算器4個、全加算器0個",
        "半加算器0個、全加算器4個"
      ],
      "correctAnswer": 0,
      "explanation": "4ビットの全加算器（リップルキャリー加算器）の構成：\n・最下位ビット（LSB）：半加算器1個（前段の桁上げがないため）\n・残りの3ビット：全加算器3個（前段の桁上げを考慮）\n\n最下位ビットは前段からの桁上げがないので半加算器で十分です。\n2ビット目以降は前段の桁上げを入力として受け取るため、全加算器が必要です。\nよって、半加算器1個、全加算器3個の組み合わせです。"
    }
  ]
}
