{
  "topicId": "tech-1-2-1",
  "title": "数値表現",
  "pages": [
    {
      "id": 1,
      "title": "固定小数点数",
      "sections": [
        {
          "type": "text",
          "content": "コンピュータで小数を表現する方法には、固定小数点数と浮動小数点数の2種類があります。まず、固定小数点数から学習しましょう。"
        },
        {
          "type": "highlight",
          "icon": "📝",
          "title": "固定小数点数とは",
          "content": "小数点の位置を固定して数値を表現する方法です。例えば、16ビット中の8ビットを整数部、8ビットを小数部として固定します。"
        },
        {
          "type": "example",
          "title": "固定小数点数の例（8.8形式）",
          "content": "16ビットで表現する場合：\n\n整数部8ビット | 小数部8ビット\n00000101     . 10000000\n↑             ↑\n5             0.5\n\n= 5.5₍₁₀₎"
        },
        {
          "type": "text",
          "content": "小数部の各ビットは、2の負のべき乗の重みを持ちます："
        },
        {
          "type": "table",
          "title": "小数部のビット重み",
          "headers": ["ビット位置", "重み", "10進数"],
          "rows": [
            ["小数第1位", "2⁻¹", "0.5"],
            ["小数第2位", "2⁻²", "0.25"],
            ["小数第3位", "2⁻³", "0.125"],
            ["小数第4位", "2⁻⁴", "0.0625"]
          ]
        },
        {
          "type": "example",
          "title": "固定小数点数の変換例",
          "content": "0.1011₍₂₎を10進数に変換：\n\n= 0×2⁻¹ + 1×2⁻² + 0×2⁻³ + 1×2⁻⁴\n= 0 + 0.25 + 0 + 0.0625\n= 0.3125₍₁₀₎"
        },
        {
          "type": "highlight",
          "icon": "⚠️",
          "title": "固定小数点数の欠点",
          "content": "・表現できる範囲が限られる\n・小数部のビット数が固定なので、精度に限界がある\n・非常に大きな数と非常に小さな数を同時に扱えない"
        }
      ]
    },
    {
      "id": 2,
      "title": "浮動小数点数の基本",
      "sections": [
        {
          "type": "text",
          "content": "浮動小数点数は、小数点の位置を動かすことで、広い範囲の数値を表現できる方法です。科学技術計算などで広く使われています。"
        },
        {
          "type": "highlight",
          "icon": "📝",
          "title": "浮動小数点数の構造",
          "content": "浮動小数点数は以下の3つの部分で構成されます：\n\n符号部（S）：正負を表す（1ビット）\n指数部（E）：桁の大きさを表す\n仮数部（M）：有効数字を表す"
        },
        {
          "type": "formula",
          "content": "数値 = (-1)^S × M × 2^E"
        },
        {
          "type": "example",
          "title": "10進数の浮動小数点表現",
          "content": "3.14 × 10⁵ = 314000\n\n3.14: 仮数部（有効数字）\n10: 基数\n5: 指数部\n\n同様に、2進数でも：\n1.011 × 2³ = 1011₍₂₎ = 11₍₁₀₎"
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "浮動小数点数の利点",
          "content": "・非常に大きな数から非常に小さな数まで表現可能\n・有効桁数が一定に保たれる\n・科学技術計算に適している"
        },
        {
          "type": "table",
          "title": "固定小数点数 vs 浮動小数点数",
          "headers": ["項目", "固定小数点", "浮動小数点"],
          "rows": [
            ["表現範囲", "狭い", "広い"],
            ["精度", "一定", "有効桁数一定"],
            ["計算速度", "速い", "やや遅い"],
            ["用途", "整数・金額計算", "科学技術計算"]
          ]
        }
      ]
    },
    {
      "id": 3,
      "title": "浮動小数点数の正規化",
      "sections": [
        {
          "type": "text",
          "content": "浮動小数点数を効率的に表現するために、正規化という操作を行います。これにより、表現の一意性が保証されます。"
        },
        {
          "type": "highlight",
          "icon": "📝",
          "title": "正規化とは",
          "content": "仮数部の最上位ビットが1になるように、小数点の位置を調整することです。\n\n2進数の場合：1.xxx... × 2^n の形にする\n10進数の場合：1.xxx... × 10^n の形にする"
        },
        {
          "type": "example",
          "title": "正規化の例（2進数）",
          "content": "正規化前： 0.00101 × 2⁴\n            ↓\n小数点を右に3桁移動、指数を-3\n            ↓\n正規化後： 1.01 × 2¹\n\n両方とも同じ値だが、正規化後は仮数部が1.xxxの形"
        },
        {
          "type": "example",
          "title": "正規化の例（10進数）",
          "content": "正規化前： 0.00314 × 10⁵\n            ↓\n小数点を右に3桁移動、指数を-3\n            ↓\n正規化後： 3.14 × 10²\n\n= 314₍₁₀₎"
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "正規化のメリット",
          "content": "・1つの数値に対して1つの表現だけが存在する（一意性）\n・仮数部の最上位ビットが必ず1なので、省略できる（ケチ表現）\n・精度を最大限に活用できる"
        },
        {
          "type": "text",
          "content": "IEEE754形式では、正規化された浮動小数点数の仮数部は必ず1.xxxの形になるため、先頭の1を省略して記録します。これをケチ表現（隠れビット）と呼びます。"
        }
      ]
    },
    {
      "id": 4,
      "title": "IEEE754形式",
      "sections": [
        {
          "type": "text",
          "content": "IEEE754は、浮動小数点数の国際標準規格です。ほとんどのコンピュータで採用されています。単精度（32ビット）と倍精度（64ビット）があります。"
        },
        {
          "type": "highlight",
          "icon": "📝",
          "title": "IEEE754 単精度（32ビット）の構成",
          "content": "符号部（S）：1ビット\n指数部（E）：8ビット（バイアス127）\n仮数部（M）：23ビット（先頭の1は省略）"
        },
        {
          "type": "table",
          "title": "IEEE754 単精度のビット配置",
          "headers": ["符号", "指数部", "仮数部"],
          "rows": [
            ["1ビット", "8ビット", "23ビット"],
            ["S", "EEEEEEEE", "MMMMMMMMMMMMMMMMMMMMMMM"]
          ]
        },
        {
          "type": "text",
          "content": "指数部には「バイアス」という値が加算されています。単精度では127、倍精度では1023がバイアス値です。"
        },
        {
          "type": "formula",
          "content": "実際の指数 = 記録された指数 - バイアス\n\n単精度：実際の指数 = E - 127\n倍精度：実際の指数 = E - 1023"
        },
        {
          "type": "example",
          "title": "IEEE754 単精度での表現例",
          "content": "10進数の5.0を表現する：\n\n5.0 = 101₍₂₎ = 1.01 × 2²（正規化）\n\n符号部：0（正の数）\n指数部：2 + 127 = 129 = 10000001₍₂₎\n仮数部：01000...（先頭の1は省略）\n\n結果：\n0 10000001 01000000000000000000000"
        },
        {
          "type": "highlight",
          "icon": "📝",
          "title": "IEEE754 倍精度（64ビット）",
          "content": "符号部：1ビット\n指数部：11ビット（バイアス1023）\n仮数部：52ビット"
        },
        {
          "type": "table",
          "title": "単精度 vs 倍精度",
          "headers": ["項目", "単精度", "倍精度"],
          "rows": [
            ["ビット数", "32ビット", "64ビット"],
            ["指数部", "8ビット", "11ビット"],
            ["仮数部", "23ビット", "52ビット"],
            ["バイアス", "127", "1023"],
            ["有効桁数", "約7桁", "約16桁"]
          ]
        }
      ]
    },
    {
      "id": 5,
      "title": "特殊な値と注意点",
      "sections": [
        {
          "type": "text",
          "content": "IEEE754形式では、特殊な値を表現するための規則があります。また、浮動小数点演算には注意すべき点がいくつかあります。"
        },
        {
          "type": "table",
          "title": "IEEE754の特殊な値",
          "headers": ["値", "指数部", "仮数部", "意味"],
          "rows": [
            ["±0", "00000000", "00000...00", "ゼロ"],
            ["±∞", "11111111", "00000...00", "無限大"],
            ["NaN", "11111111", "00000...00以外", "非数（Not a Number）"]
          ]
        },
        {
          "type": "highlight",
          "icon": "⚠️",
          "title": "浮動小数点演算の注意点",
          "content": "1. 丸め誤差が発生する可能性がある\n2. 0.1などの10進小数を正確に表現できない\n3. 非常に大きな数と小さな数の加算で情報落ちが起きる\n4. 同じ大きさの数の引き算で桁落ちが起きる"
        },
        {
          "type": "example",
          "title": "0.1が正確に表現できない例",
          "content": "0.1₍₁₀₎ = 0.000110011001100...₍₂₎（無限循環）\n\n2進数では有限桁で表現できないため、\n丸め誤差が発生します。\n\nこのため、0.1 + 0.2 ≠ 0.3 となることがあります。"
        },
        {
          "type": "highlight",
          "icon": "✅",
          "title": "試験対策のポイント",
          "content": "1. 固定小数点数と浮動小数点数の違いを理解する\n2. 正規化の手順を覚える（1.xxx × 2^n の形）\n3. IEEE754のビット構成を覚える（符号1、指数8、仮数23）\n4. バイアス値を覚える（単精度127、倍精度1023）\n5. 浮動小数点演算の誤差について理解する"
        },
        {
          "type": "text",
          "content": "浮動小数点数は、コンピュータで実数を扱うための重要な技術です。正規化とIEEE754形式をしっかり理解しましょう！"
        }
      ]
    }
  ]
}
