{
  "topicId": "tech-1-1-2",
  "title": "2進数の計算",
  "pages": [
    {
      "id": 1,
      "title": "2進数の足し算",
      "sections": [
        {
          "type": "text",
          "content": "2進数の足し算は、10進数と同じように桁ごとに計算します。ただし、2進数では0と1しか使えないため、1+1=10（繰り上がり）となります。"
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "2進数の足し算の基本ルール",
          "content": "0 + 0 = 0\n0 + 1 = 1\n1 + 0 = 1\n1 + 1 = 10（1を繰り上げる）"
        },
        {
          "type": "example",
          "title": "2進数の足し算の例",
          "content": "  1011₍₂₎  (11₍₁₀₎)\n+  110₍₂₎  ( 6₍₁₀₎)\n--------\n 10001₍₂₎  (17₍₁₀₎)\n\n右から計算：\n1+0=1\n1+1=10（0を書いて1を繰り上げ）\n0+1+繰上げ1=10（0を書いて1を繰り上げ）\n1+繰上げ1=10"
        },
        {
          "type": "text",
          "content": "2進数の引き算も同様に、桁ごとに計算します。引けない場合は上の桁から借りてきます（10進数の繰り下がりと同じ）。"
        },
        {
          "type": "example",
          "title": "2進数の引き算の例",
          "content": "  1011₍₂₎  (11₍₁₀₎)\n-  110₍₂₎  ( 6₍₁₀₎)\n--------\n   101₍₂₎  ( 5₍₁₀₎)"
        }
      ]
    },
    {
      "id": 2,
      "title": "負の数の表現（2の補数）",
      "sections": [
        {
          "type": "text",
          "content": "コンピュータ内部では、負の数を「2の補数」という方法で表現します。2の補数を使うことで、引き算を足し算として扱えるようになります。"
        },
        {
          "type": "highlight",
          "icon": "📝",
          "title": "2の補数の求め方",
          "content": "1. 元の数のビットを反転する（1→0、0→1）\n2. 反転した数に1を加える"
        },
        {
          "type": "example",
          "title": "8ビットで -5 を表現する",
          "content": "5₍₁₀₎ = 00000101₍₂₎\n\nステップ1: ビット反転\n11111010\n\nステップ2: 1を加える\n11111010\n+       1\n--------\n11111011₍₂₎ ← これが -5 の2の補数表現"
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "最上位ビット（符号ビット）",
          "content": "2の補数表現では、最上位ビット（左端のビット）が符号を表します：\n・0なら正の数\n・1なら負の数"
        },
        {
          "type": "table",
          "title": "4ビットでの表現範囲",
          "headers": ["2進数", "10進数（符号なし）", "10進数（2の補数）"],
          "rows": [
            ["0000", "0", "0"],
            ["0001", "1", "1"],
            ["0111", "7", "7"],
            ["1000", "8", "-8"],
            ["1111", "15", "-1"]
          ]
        }
      ]
    },
    {
      "id": 3,
      "title": "シフト演算",
      "sections": [
        {
          "type": "text",
          "content": "シフト演算とは、2進数のビット列を左または右にずらす操作です。論理シフトと算術シフトの2種類があります。"
        },
        {
          "type": "highlight",
          "icon": "📝",
          "title": "論理シフト",
          "content": "・論理左シフト：右端に0を補う（2倍になる）\n・論理右シフト：左端に0を補う（2で割る）"
        },
        {
          "type": "example",
          "title": "論理左シフトの例",
          "content": "元の値：  00001011₍₂₎ (11₍₁₀₎)\n1ビット左シフト\n結果：    00010110₍₂₎ (22₍₁₀₎)\n\n→ 2倍になった！"
        },
        {
          "type": "highlight",
          "icon": "📝",
          "title": "算術シフト",
          "content": "符号付き数値に使用します：\n・算術左シフト：論理左シフトと同じ\n・算術右シフト：符号ビット（最上位ビット）を保持"
        },
        {
          "type": "example",
          "title": "算術右シフトの例（負の数）",
          "content": "元の値：  11110100₍₂₎ (-12₍₁₀₎)\n1ビット右シフト\n結果：    11111010₍₂₎ (-6₍₁₀₎)\n\n→ 符号ビット1を保持して右シフト"
        },
        {
          "type": "table",
          "title": "シフト演算の効果",
          "headers": ["シフト", "効果"],
          "rows": [
            ["左シフト 1ビット", "×2"],
            ["左シフト nビット", "×2ⁿ"],
            ["右シフト 1ビット", "÷2"],
            ["右シフト nビット", "÷2ⁿ"]
          ]
        }
      ]
    },
    {
      "id": 4,
      "title": "2進数のかけ算とわり算",
      "sections": [
        {
          "type": "text",
          "content": "2進数のかけ算も、10進数と同じ筆算の方法で計算できます。また、2のべき乗のかけ算・わり算はシフト演算で簡単に実現できます。"
        },
        {
          "type": "example",
          "title": "2進数のかけ算",
          "content": "    101₍₂₎  (5₍₁₀₎)\n×    11₍₂₎  (3₍₁₀₎)\n--------\n    101\n   101\n--------\n  1111₍₂₎  (15₍₁₀₎)"
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "シフトでかけ算・わり算",
          "content": "2のべき乗でかけ算・わり算する場合：\n・×2ⁿ → 左にnビットシフト\n・÷2ⁿ → 右にnビットシフト"
        },
        {
          "type": "example",
          "title": "シフト演算を使ったかけ算",
          "content": "5₍₁₀₎ × 8₍₁₀₎ を計算\n\n5 = 101₍₂₎\n8 = 2³ なので、3ビット左シフト\n\n  00000101₍₂₎\n→ 00101000₍₂₎ = 40₍₁₀₎"
        },
        {
          "type": "text",
          "content": "シフト演算はコンピュータ内部で高速に実行できるため、2のべき乗での計算によく使われます。"
        }
      ]
    },
    {
      "id": 5,
      "title": "2進数計算の応用",
      "sections": [
        {
          "type": "text",
          "content": "2進数の計算は、プログラミングや低レベルな処理で頻繁に使用されます。試験では、2の補数を使った減算やシフト演算の問題がよく出題されます。"
        },
        {
          "type": "highlight",
          "icon": "✅",
          "title": "試験対策のポイント",
          "content": "1. 2の補数の求め方を確実に理解する\n2. シフト演算の種類（論理/算術）を区別する\n3. シフト演算がかけ算・わり算に相当することを覚える\n4. オーバーフロー（桁あふれ）に注意する"
        },
        {
          "type": "example",
          "title": "オーバーフローの例",
          "content": "4ビットで計算する場合：\n\n  1111₍₂₎  (15₍₁₀₎)\n+    1₍₂₎  ( 1₍₁₀₎)\n--------\n 10000₍₂₎\n\n4ビットでは表現できず、桁あふれ（オーバーフロー）が発生"
        },
        {
          "type": "highlight",
          "icon": "📝",
          "title": "覚えておこう",
          "content": "nビットで表現できる範囲：\n・符号なし：0 ～ 2ⁿ-1\n・符号あり（2の補数）：-2ⁿ⁻¹ ～ 2ⁿ⁻¹-1"
        }
      ]
    }
  ]
}