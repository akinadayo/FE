{
  "topicId": "tech-1-1-4",
  "title": "論理回路",
  "pages": [
    {
      "id": 1,
      "title": "論理回路とは",
      "sections": [
        {
          "type": "text",
          "content": "論理回路とは、論理演算（AND、OR、NOTなど）を電子回路で実現したものです。コンピュータの基本構成要素であり、すべての計算処理は論理回路の組み合わせで行われています。"
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "論理回路の基本",
          "content": "論理回路は、入力信号（0または1）を受け取り、論理演算を行って出力信号（0または1）を生成します。0は「偽」または「Low」、1は「真」または「High」を表します。"
        },
        {
          "type": "text",
          "content": "基本情報技術者試験では、以下の論理回路を理解する必要があります："
        },
        {
          "type": "list",
          "items": [
            "AND回路（論理積回路）",
            "OR回路（論理和回路）",
            "NOT回路（否定回路、インバータ）",
            "NAND回路（否定論理積回路）",
            "NOR回路（否定論理和回路）",
            "XOR回路（排他的論理和回路）"
          ]
        }
      ]
    },
    {
      "id": 2,
      "title": "基本論理回路",
      "sections": [
        {
          "type": "text",
          "content": "まず、基本となる3つの論理回路（AND、OR、NOT）を学習しましょう。これらを組み合わせることで、あらゆる論理回路を作ることができます。"
        },
        {
          "type": "highlight",
          "icon": "📝",
          "title": "AND回路（論理積）",
          "content": "すべての入力が1のときだけ、出力が1になる回路です。記号：A・B または A∧B"
        },
        {
          "type": "table",
          "title": "AND回路の真理値表",
          "headers": ["入力A", "入力B", "出力Y"],
          "rows": [
            ["0", "0", "0"],
            ["0", "1", "0"],
            ["1", "0", "0"],
            ["1", "1", "1"]
          ]
        },
        {
          "type": "highlight",
          "icon": "📝",
          "title": "OR回路（論理和）",
          "content": "少なくとも1つの入力が1ならば、出力が1になる回路です。記号：A+B または A∨B"
        },
        {
          "type": "table",
          "title": "OR回路の真理値表",
          "headers": ["入力A", "入力B", "出力Y"],
          "rows": [
            ["0", "0", "0"],
            ["0", "1", "1"],
            ["1", "0", "1"],
            ["1", "1", "1"]
          ]
        },
        {
          "type": "highlight",
          "icon": "📝",
          "title": "NOT回路（否定、インバータ）",
          "content": "入力を反転させる回路です。入力が0なら1、入力が1なら0を出力します。記号：Ā または ¬A"
        },
        {
          "type": "table",
          "title": "NOT回路の真理値表",
          "headers": ["入力A", "出力Y"],
          "rows": [
            ["0", "1"],
            ["1", "0"]
          ]
        }
      ]
    },
    {
      "id": 3,
      "title": "組み合わせ論理回路",
      "sections": [
        {
          "type": "text",
          "content": "基本論理回路を組み合わせた、より複雑な論理回路を見ていきましょう。NAND、NOR、XORは試験でよく出題されます。"
        },
        {
          "type": "highlight",
          "icon": "📝",
          "title": "NAND回路（否定論理積）",
          "content": "AND回路の出力を反転させた回路です。ANDの結果をNOTで反転します。記号：A↑B"
        },
        {
          "type": "table",
          "title": "NAND回路の真理値表",
          "headers": ["入力A", "入力B", "出力Y"],
          "rows": [
            ["0", "0", "1"],
            ["0", "1", "1"],
            ["1", "0", "1"],
            ["1", "1", "0"]
          ]
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "NANDの重要性",
          "content": "NAND回路だけで、すべての論理回路を構成できます。これを「NAND論理の完全性」と呼びます。コスト削減や回路設計の簡素化に役立ちます。"
        },
        {
          "type": "highlight",
          "icon": "📝",
          "title": "NOR回路（否定論理和）",
          "content": "OR回路の出力を反転させた回路です。ORの結果をNOTで反転します。記号：A↓B"
        },
        {
          "type": "table",
          "title": "NOR回路の真理値表",
          "headers": ["入力A", "入力B", "出力Y"],
          "rows": [
            ["0", "0", "1"],
            ["0", "1", "0"],
            ["1", "0", "0"],
            ["1", "1", "0"]
          ]
        },
        {
          "type": "highlight",
          "icon": "📝",
          "title": "XOR回路（排他的論理和）",
          "content": "2つの入力が異なるときに1を出力する回路です。記号：A⊕B"
        },
        {
          "type": "table",
          "title": "XOR回路の真理値表",
          "headers": ["入力A", "入力B", "出力Y"],
          "rows": [
            ["0", "0", "0"],
            ["0", "1", "1"],
            ["1", "0", "1"],
            ["1", "1", "0"]
          ]
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "XORの用途",
          "content": "XOR回路は加算回路やパリティチェック、暗号化などで広く使われています。2つの値が同じか異なるかを判定するのに便利です。"
        }
      ]
    },
    {
      "id": 4,
      "title": "半加算器と全加算器",
      "sections": [
        {
          "type": "text",
          "content": "論理回路を組み合わせて、2進数の加算を行う回路を作ることができます。これが半加算器と全加算器です。"
        },
        {
          "type": "highlight",
          "icon": "📝",
          "title": "半加算器（Half Adder）",
          "content": "1ビットの2進数2つを加算する回路です。下位桁からの繰り上がりは考慮しません。\n\n入力：A, B\n出力：S（和）、C（繰り上がり）\n\nS = A XOR B\nC = A AND B"
        },
        {
          "type": "table",
          "title": "半加算器の真理値表",
          "headers": ["A", "B", "S（和）", "C（繰り上がり）"],
          "rows": [
            ["0", "0", "0", "0"],
            ["0", "1", "1", "0"],
            ["1", "0", "1", "0"],
            ["1", "1", "0", "1"]
          ]
        },
        {
          "type": "example",
          "title": "半加算器の例",
          "content": "A=1, B=1 を加算\n\nS = 1 XOR 1 = 0\nC = 1 AND 1 = 1\n\n結果：1 + 1 = 10₍₂₎（和=0、繰り上がり=1）"
        },
        {
          "type": "highlight",
          "icon": "📝",
          "title": "全加算器（Full Adder）",
          "content": "下位桁からの繰り上がり入力も含めて、3つの入力を加算する回路です。\n\n入力：A, B, Cin（下位桁からの繰り上がり）\n出力：S（和）、Cout（上位桁への繰り上がり）"
        },
        {
          "type": "table",
          "title": "全加算器の真理値表（一部）",
          "headers": ["A", "B", "Cin", "S", "Cout"],
          "rows": [
            ["0", "0", "0", "0", "0"],
            ["0", "0", "1", "1", "0"],
            ["0", "1", "0", "1", "0"],
            ["0", "1", "1", "0", "1"],
            ["1", "1", "1", "1", "1"]
          ]
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "複数ビットの加算",
          "content": "全加算器を複数個連結することで、複数ビットの2進数加算回路を作ることができます。これがCPU内の加算器の基本原理です。"
        }
      ]
    },
    {
      "id": 5,
      "title": "ビット操作とマスクパターン",
      "sections": [
        {
          "type": "text",
          "content": "論理回路は、ビット操作にも利用されます。特定のビットを取り出したり、変更したりする際にマスクパターンを使います。"
        },
        {
          "type": "highlight",
          "icon": "📝",
          "title": "マスクパターンとは",
          "content": "特定のビットを操作するために使う、0と1のパターンです。論理演算と組み合わせて使用します。"
        },
        {
          "type": "example",
          "title": "ANDマスク（特定ビットの取り出し）",
          "content": "データ：  11010110\nマスク：  00001111（下位4ビットを取り出す）\n         --------\nAND結果： 00000110\n\n→ 下位4ビットだけが残り、上位4ビットは0になる"
        },
        {
          "type": "example",
          "title": "ORマスク（特定ビットを1にする）",
          "content": "データ：  10010010\nマスク：  00001000（下から4ビット目を1にする）\n         --------\nOR結果：  10011010\n\n→ マスクで1のビットは必ず1になる"
        },
        {
          "type": "example",
          "title": "XORマスク（特定ビットの反転）",
          "content": "データ：  11010110\nマスク：  11111111（全ビット反転）\n         --------\nXOR結果： 00101001\n\n→ XORで全ビット反転（NOT演算と同じ）"
        },
        {
          "type": "table",
          "title": "マスクパターンの用途",
          "headers": ["演算", "用途", "特徴"],
          "rows": [
            ["AND", "ビット抽出", "マスク0の部分が0になる"],
            ["OR", "ビット設定", "マスク1の部分が1になる"],
            ["XOR", "ビット反転", "マスク1の部分が反転する"]
          ]
        },
        {
          "type": "highlight",
          "icon": "✅",
          "title": "試験対策のポイント",
          "content": "1. 各論理回路の真理値表を暗記する\n2. 半加算器と全加算器の違いを理解する\n3. NANDとNORが万能素子であることを覚える\n4. マスクパターンの使い方を練習する\n5. XORの特性（反転、パリティ）を理解する"
        }
      ]
    }
  ]
}
