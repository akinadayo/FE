{
  "topicId": "strat-1-2-2",
  "title": "要件定義",
  "questions": [
    {
      "id": "strat-1-2-2-q-001",
      "question": "要件定義段階での誤りを修正するコストと、実装後に発見された誤りを修正するコストの関係について、最も適切なものはどれか。",
      "options": [
        "要件定義段階も実装後も修正コストは同じである",
        "実装後の修正コストは要件定義段階の数倍から数十倍になる",
        "要件定義段階の修正コストの方が実装後より高い",
        "修正コストは誤りの種類によって異なり、一概に比較できない"
      ],
      "correctAnswer": 1,
      "explanation": "要件定義段階での誤りを修正するコストは低く抑えられますが、実装後やリリース後に発見された場合、修正コストは数十倍から数百倍に膨らむことが知られています。これは、実装後の修正では設計の見直し、実装のやり直し、テストの再実施など、多くの工程に影響が及ぶためです。例えば、ECサイトで「在庫が0の商品は表示しない」という要件を見落とすと、データベース設計、画面設計、ロジックすべてに影響します。そのため、要件定義段階で十分な時間をかけて誤りを発見・修正することが、プロジェクト全体のコスト削減につながります。早期の品質確保が重要です。",
      "difficulty": "basic",
      "tags": ["要件定義", "コスト管理", "品質管理"]
    },
    {
      "id": "strat-1-2-2-q-002",
      "question": "業務要件の定義において、業務目標を設定する際に最も重要なことはどれか。",
      "options": [
        "できるだけ多くの目標を設定する",
        "抽象的な表現で柔軟性を持たせる",
        "数値で測定可能な目標を設定する",
        "技術的な実現可能性を優先する"
      ],
      "correctAnswer": 2,
      "explanation": "業務目標を設定する際は、数値で測定可能な目標を設定することが最も重要です。「在庫確認時間を1日2時間から30分に短縮」「在庫誤差率を5%から1%以下に削減」のように具体的な数値目標があることで、システム導入の効果を客観的に評価できます。抽象的な表現（「効率化する」「改善する」など）では、後で効果測定ができず、システム導入の成否を判断できません。また、目標は多ければ良いわけではなく、本質的な課題解決につながる重要な目標に絞るべきです。技術的実現可能性は重要ですが、まず業務上の目標を明確にし、その後に実現方法を検討する順序が正しいアプローチです。",
      "difficulty": "basic",
      "tags": ["業務要件", "目標設定", "測定可能性"]
    },
    {
      "id": "strat-1-2-2-q-003",
      "question": "機能要件を詳細化する際、入力・処理・出力の3要素で記述することの利点として、最も適切でないものはどれか。",
      "options": [
        "実装者が具体的にコーディングできるレベルまで明確になる",
        "テストケースを作成しやすくなる",
        "システムの将来の拡張性が保証される",
        "曖昧さが排除され、認識の齟齬が減る"
      ],
      "correctAnswer": 2,
      "explanation": "入力・処理・出力の3要素で機能要件を記述することは、実装の明確化、テストケース作成の容易化、認識の統一には非常に有効ですが、将来の拡張性を保証するものではありません。拡張性は非機能要件の一部であり、システムアーキテクチャの設計やモジュール化の方針など、別の観点で検討する必要があります。入力・処理・出力の記述は「現時点で何をするか」を明確にするもので、「将来どう変わるか」には直接対応しません。例えば、商品検索機能を入力・処理・出力で詳細化しても、それだけでは新しい検索条件の追加やAI検索への対応といった拡張性は保証されません。拡張性は別途、非機能要件として定義する必要があります。",
      "difficulty": "intermediate",
      "tags": ["機能要件", "詳細化", "拡張性"]
    },
    {
      "id": "strat-1-2-2-q-004",
      "question": "MoSCoW法で機能の優先順位を付ける際、ECサイトの以下の機能のうち、「Could have（あれば良い）」に分類されるものはどれか。",
      "options": [
        "商品検索機能",
        "決済機能",
        "SNS連携によるソーシャルログイン機能",
        "カート機能"
      ],
      "correctAnswer": 2,
      "explanation": "MoSCoW法において、ECサイトの商品検索、決済、カートは「Must have（必須）」に分類される基本機能です。これらがなければECサイトとして成立しません。一方、SNS連携によるソーシャルログイン機能は「Could have（あれば良い）」に分類されます。この機能があればユーザーの利便性は向上しますが、通常のメールアドレスとパスワードによるログインがあれば、サイトの基本的な運用は可能です。優先度の低い付加価値機能として位置づけられます。MoSCoW法を使う目的は、限られた予算と時間の中で、本当に必要な機能に集中し、段階的にシステムを構築することです。最初のリリースではMust haveとShould haveに絞り、Could haveは次期バージョンで検討するのが一般的なアプローチです。",
      "difficulty": "intermediate",
      "tags": ["MoSCoW法", "優先順位", "機能要件"]
    },
    {
      "id": "strat-1-2-2-q-005",
      "question": "非機能要件において、「ページ表示は高速であること」という記述の問題点を改善した記述として、最も適切なものはどれか。",
      "options": [
        "ページ表示は可能な限り高速であること",
        "ページ表示は平均2秒以内、95%タイル値で3秒以内であること",
        "ページ表示はユーザーがストレスを感じない速度であること",
        "ページ表示は競合他社のサイトと同等以上の速度であること"
      ],
      "correctAnswer": 1,
      "explanation": "非機能要件は必ず測定可能な数値で表現する必要があります。「高速」「可能な限り」「ストレスを感じない」「競合と同等」といった表現は曖昧で、人によって解釈が異なり、客観的な測定ができません。「平均2秒以内、95%タイル値で3秒以内」という記述は、具体的な数値目標が明確で、実装後に性能測定ツールを使って客観的に検証できます。95%タイル値とは、全アクセスの95%がその時間内に完了することを意味し、外れ値を除いたより現実的な指標です。このように測定可能な形で非機能要件を定義することで、開発チームは明確な目標を持って実装でき、テスト時には合否を客観的に判定できます。また、運用開始後も継続的に性能をモニタリングして要件を満たしているか確認できます。",
      "difficulty": "basic",
      "tags": ["非機能要件", "性能要件", "測定可能性"]
    },
    {
      "id": "strat-1-2-2-q-006",
      "question": "システムの可用性が99.9%（スリーナイン）の場合、1年間（365日）で許容される最大停止時間はおよそどのくらいか。",
      "options": [
        "約3時間",
        "約9時間",
        "約24時間",
        "約36時間"
      ],
      "correctAnswer": 1,
      "explanation": "可用性99.9%の場合の年間停止時間は以下のように計算します。1年間の総時間は365日×24時間=8,760時間です。可用性99.9%ということは、0.1%の時間は停止が許容されるということです。したがって、8,760時間×0.1%=8.76時間、つまり約9時間が許容される最大停止時間となります。この「スリーナイン」という可用性レベルは、一般的な業務システムで要求される標準的なレベルです。より高い可用性が必要な場合は、99.99%（フォーナイン、年間約52分の停止）や99.999%（ファイブナイン、年間約5分の停止）といったレベルを要求することもありますが、可用性を高めるほどコストも増大します。要件定義では、ビジネスへの影響を考慮して適切な可用性レベルを設定することが重要です。",
      "difficulty": "intermediate",
      "tags": ["可用性", "非機能要件", "計算問題"]
    },
    {
      "id": "strat-1-2-2-q-007",
      "question": "RTO（目標復旧時間）とRPO（目標復旧時点）について、最も適切な説明はどれか。",
      "options": [
        "RTOは「いつの時点まで戻すか」、RPOは「何時間で復旧するか」を表す",
        "RTOは「何時間で復旧するか」、RPOは「いつの時点まで戻すか」を表す",
        "RTOとRPOは同じ意味で、どちらも復旧時間を表す",
        "RTOはハードウェア障害、RPOはソフトウェア障害に適用される"
      ],
      "correctAnswer": 1,
      "explanation": "RTO（Recovery Time Objective）は「目標復旧時間」で、障害発生からシステムを復旧させるまでの目標時間を表します。例えば「RTO：1時間」は、障害発生から1時間以内にシステムを復旧させることを意味します。一方、RPO（Recovery Point Objective）は「目標復旧時点」で、どの時点の状態まで復旧させるかを表します。例えば「RPO：5分」は、障害発生の5分前の状態まで復旧させること、つまり最大5分間のデータ損失は許容することを意味します。RTOは「復旧にかかる時間」、RPOは「データ損失の許容範囲」という異なる概念です。要件定義では、ビジネスへの影響を考慮して両方を適切に設定する必要があります。例えば金融システムではRPOをほぼゼロに設定する必要がありますが、それにはリアルタイムバックアップなどコストがかかります。",
      "difficulty": "intermediate",
      "tags": ["RTO", "RPO", "障害復旧", "非機能要件"]
    },
    {
      "id": "strat-1-2-2-q-008",
      "question": "要件定義書のレビューで、各関係者が確認すべき主な観点として、最も適切でないものはどれか。",
      "options": [
        "業務部門：業務フローが現場の実態に即しているか",
        "開発チーム：技術的な実現可能性とコスト",
        "運用チーム：運用の実現性とメンテナンス性",
        "経営層：プログラミング言語の選定が適切か"
      ],
      "correctAnswer": 3,
      "explanation": "要件定義書のレビューでは、各関係者がそれぞれの専門性と責任範囲に基づいて確認します。業務部門は業務フローの正確性、開発チームは実現可能性とコスト、運用チームは運用性を確認するのは適切です。しかし、経営層がプログラミング言語の選定の適切性を確認するのは不適切です。プログラミング言語などの技術的詳細は、開発チームや技術アーキテクトが判断すべき事項であり、経営層は投資対効果、戦略との整合性、リスクといったビジネス観点から確認すべきです。例えば「このシステムに300万円投資して、年間500万円のコスト削減が見込めるか」「3ヶ月後のキャンペーンに間に合うか」といった判断が経営層の役割です。各関係者が適切な観点でレビューすることで、多角的に要件の妥当性を検証できます。",
      "difficulty": "intermediate",
      "tags": ["要件定義書", "レビュー", "関係者管理"]
    },
    {
      "id": "strat-1-2-2-q-009",
      "question": "要件変更管理プロセスにおいて、変更管理委員会（CCB）が行う主な役割はどれか。",
      "options": [
        "変更要求を受け付けて文書化する",
        "変更による影響を分析して承認可否を判断する",
        "承認された変更を実装する",
        "変更内容をテストする"
      ],
      "correctAnswer": 1,
      "explanation": "変更管理委員会（CCB: Change Control Board）の主な役割は、変更による影響を分析した上で、その変更を承認するか却下するかを判断することです。変更要求の受付・文書化は変更要求者や事務局が行い、実装は開発チーム、テストはテストチームが行います。CCBは、提案された変更がコスト、納期、品質にどのような影響を与えるかを評価し、その変更が本当に必要か、投資に見合う価値があるかを判断します。CCBには通常、プロジェクトマネージャー、技術リーダー、業務部門代表、場合によっては経営層が参加し、多角的な視点で判断します。適切な変更管理により、無秩序な変更によるプロジェクトの混乱を防ぎ、重要な変更を適切に取り込むことができます。すべての変更を受け入れるのではなく、優先順位を付けて判断することが重要です。",
      "difficulty": "intermediate",
      "tags": ["変更管理", "CCB", "プロジェクト管理"]
    },
    {
      "id": "strat-1-2-2-q-010",
      "question": "トレーサビリティマトリクスを作成する主な目的として、最も適切でないものはどれか。",
      "options": [
        "要件変更時の影響範囲を把握する",
        "すべての要件が実装・テストされているか確認する",
        "プログラミング言語を決定する",
        "監査時に要件から実装までの追跡可能性を証明する"
      ],
      "correctAnswer": 2,
      "explanation": "トレーサビリティマトリクスは、要件から設計、実装、テストまでの紐付けを管理するツールです。その主な目的は、要件変更時の影響範囲の把握、要件の実装・テスト漏れの防止、監査時の追跡可能性の証明などです。しかし、プログラミング言語の決定には直接関係しません。プログラミング言語の選定は、非機能要件（性能、保守性など）、開発チームのスキル、既存システムとの整合性、ライセンスコストなどを総合的に考慮して行われる技術的な判断であり、トレーサビリティマトリクスとは別の検討事項です。トレーサビリティマトリクスは、例えば「要件REQ-001（商品検索機能）が設計書DD-010、ソースコードsrc/search.ts、テストケースTC-050に対応している」といった対応関係を記録し、要件が確実に実現されているかを管理するためのものです。",
      "difficulty": "basic",
      "tags": ["トレーサビリティ", "要件管理", "品質管理"]
    }
  ]
}
