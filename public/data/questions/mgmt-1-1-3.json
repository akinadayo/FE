{
  "topicId": "mgmt-1-1-3",
  "title": "スケジュール管理",
  "questions": [
    {
      "id": "mgmt-1-1-3-q1",
      "type": "multiple_choice",
      "question": "次のプロジェクトで、クリティカルパスとプロジェクト全体の所要時間として正しいものはどれですか？\n\n作業リスト：\nA: 要件定義（4日）\nB: データベース設計（3日）- Aの後に実施\nC: 画面設計（5日）- Aの後に実施\nD: データベース構築（2日）- Bの後に実施\nE: 画面実装（4日）- Cの後に実施\nF: 結合テスト（3日）- DとEの後に実施\nG: 本番移行（2日）- Fの後に実施",
      "options": [
        "クリティカルパス: A→B→D→F→G、所要時間: 14日",
        "クリティカルパス: A→C→E→F→G、所要時間: 18日",
        "クリティカルパス: A→B→D→F→G、所要時間: 18日",
        "クリティカルパス: A→C→E→F→G、所要時間: 14日"
      ],
      "correctAnswer": 1,
      "explanation": "「クリティカルパス: A→C→E→F→G、所要時間: 18日」が正しいです。クリティカルパスは、開始から終了までの経路のうち、所要時間が最も長い経路です。各パスの所要時間を計算すると、\n①パス1（A→B→D→F→G）: 4 + 3 + 2 + 3 + 2 = 14日\n②パス2（A→C→E→F→G）: 4 + 5 + 4 + 3 + 2 = 18日\nパス2の方が長い（18日）ため、パス2（A→C→E→F→G）がクリティカルパスです。プロジェクト全体の所要時間は、クリティカルパスの所要時間（18日）になります。クリティカルパス上の作業（A、C、E、F、G）は、1日でも遅延すると、プロジェクト全体が遅延します。選択肢①③は、パス1をクリティカルパスとしていますが、パス1の所要時間は14日なので、クリティカルパスではありません。選択肢④は、クリティカルパスは正しいですが、所要時間が14日で間違っています。"
    },
    {
      "id": "mgmt-1-1-3-q2",
      "type": "multiple_choice",
      "question": "前問のプロジェクトで、作業B（データベース設計）の余裕時間（フロート）として正しいものはどれですか？（ヒント: 作業Bの始点=結合点1、終点=結合点2とします）\n\n結合点1（Aの終了）: 最早結合点時刻=4日、最遅結合点時刻=4日\n結合点2（Bの終了）: 最早結合点時刻=7日、最遅結合点時刻=11日\n作業Bの所要時間: 3日",
      "options": [
        "0日（クリティカルパス上の作業）",
        "2日",
        "4日",
        "5日"
      ],
      "correctAnswer": 2,
      "explanation": "「4日」が正しいです。余裕時間（フロート）の計算式は、「余裕時間 = 最遅結合点時刻（終点） - 最早結合点時刻（始点） - 作業の所要時間」です。作業Bの余裕時間を計算すると、\n余裕時間 = 11（結合点2の最遅） - 4（結合点1の最早） - 3（作業Bの所要時間） = 4日\nこれは、作業Bを最大4日遅らせても、プロジェクト全体（18日）に影響を与えないことを意味します。例えば、作業Bを4日遅らせて7日かかっても、結合点2の最早結合点時刻は4+7=11日になり、最遅結合点時刻（11日）と等しくなります。この場合、作業B→Dもクリティカルパスになります。クリティカルパス上の作業（A、C、E、F、G）の余裕時間は0日ですが、作業Bはクリティカルパス上にないため、余裕時間が4日あります。選択肢①は、クリティカルパス上の作業の余裕時間（0日）です。選択肢②④は計算が間違っています。"
    },
    {
      "id": "mgmt-1-1-3-q3",
      "type": "multiple_choice",
      "question": "前問のプロジェクトで、顧客から「納期を2日短縮してほしい」という要求がありました。最もコスト効率の良いスケジュール短縮方法はどれですか？\n\n各作業のクラッシング見積もり：\n作業A: 短縮可能1日、コスト5万円/日\n作業B: 短縮可能2日、コスト3万円/日\n作業C: 短縮可能1日、コスト4万円/日\n作業D: 短縮可能1日、コスト2万円/日\n作業E: 短縮可能2日、コスト5万円/日\n作業F: 短縮可能1日、コスト3万円/日\n作業G: 短縮不可",
      "options": [
        "作業B（データベース設計）を2日短縮 → コスト6万円、合計2日短縮",
        "作業D（データベース構築）を1日短縮 + 作業F（結合テスト）を1日短縮 → コスト5万円、合計2日短縮",
        "作業C（画面設計）を1日短縮 + 作業F（結合テスト）を1日短縮 → コスト7万円、合計2日短縮",
        "作業E（画面実装）を2日短縮 → コスト10万円、合計2日短縮"
      ],
      "correctAnswer": 2,
      "explanation": "「作業C（画面設計）を1日短縮 + 作業F（結合テスト）を1日短縮 → コスト7万円、合計2日短縮」が正しいです。スケジュール短縮（クラッシング）では、①クリティカルパス上の作業を短縮する必要がある（クリティカルパス以外の作業を短縮しても、プロジェクト全体の所要時間は変わらない）、②コスト効率の良い作業から短縮する、という原則があります。前問より、クリティカルパスはA→C→E→F→Gです。クリティカルパス上の作業のうち、コスト効率の良い順に短縮します。\n①作業F（結合テスト）を1日短縮 → コスト3万円、合計1日短縮\n②作業C（画面設計）を1日短縮 → コスト4万円、合計2日短縮\n合計コスト: 3万円 + 4万円 = 7万円\n\n選択肢①は、作業B（クリティカルパス外）を短縮していますが、クリティカルパス外の作業を短縮してもプロジェクト全体の所要時間は変わりません。選択肢②も同様に、作業D（クリティカルパス外）を短縮しています。選択肢④は、作業E（クリティカルパス上）を2日短縮していますが、コストが10万円と高いです（選択肢③は7万円）。"
    },
    {
      "id": "mgmt-1-1-3-q4",
      "type": "multiple_choice",
      "question": "アローダイアグラムにおいて、ダミー作業が必要になるのはどのような場合ですか？",
      "options": [
        "作業の所要時間が0日の場合",
        "複数の作業が同じ結合点から開始する場合",
        "複数の作業が同じ結合点で終了し、次の作業が一部の作業のみに依存する場合",
        "クリティカルパスを表現する場合"
      ],
      "correctAnswer": 2,
      "explanation": "「複数の作業が同じ結合点で終了し、次の作業が一部の作業のみに依存する場合」が正しいです。ダミー作業（点線矢印、所要時間0）は、作業の順序関係を正しく表現するために使用します。例えば、「作業DとEが両方完了してから作業Fを開始する」が、作業DとEの終了点が異なる結合点にある場合、一方の終了点からダミー作業を引いて結合点に集約し、結合点からFを開始します。具体例：\n作業A→B→D（結合点2で終了）\n作業A→C→E（結合点3で終了）\n作業F（DとEが両方完了してから開始）\nこの場合、結合点2から結合点4へダミー作業、結合点3から結合点4へダミー作業を引き、結合点4から作業Fを開始します。ダミー作業を使わないと、「Dが完了したらFを開始」または「Eが完了したらFを開始」という間違った順序関係になってしまいます。選択肢①は、ダミー作業の所要時間が0日という説明ですが、使用目的ではありません。選択肢②④は、ダミー作業が不要な場合です。"
    },
    {
      "id": "mgmt-1-1-3-q5",
      "type": "multiple_choice",
      "question": "PDM（プレシデンスダイアグラム法）において、「作業Cの画面設計が開始したら、作業Eの画面実装を開始できる（画面設計が完了するのを待たずに、一部の画面から実装を開始）」という関係を表現する記法はどれですか？",
      "options": [
        "FS（Finish to Start）: [C] →FS [E]",
        "SS（Start to Start）: [C] →SS [E]",
        "FF（Finish to Finish）: [C] →FF [E]",
        "SF（Start to Finish）: [C] →SF [E]"
      ],
      "correctAnswer": 1,
      "explanation": "「SS（Start to Start）: [C] →SS [E]」が正しいです。PDMでは、作業間の関係を4種類で表現できます。\n①FS（Finish to Start）: 前の作業が終了してから、次の作業を開始（最も一般的）\n②SS（Start to Start）: 前の作業が開始したら、次の作業を開始\n③FF（Finish to Finish）: 前の作業が終了したら、次の作業を終了\n④SF（Start to Finish）: 前の作業が開始したら、次の作業を終了（まれ）\n\n問題文の「作業Cが開始したら、作業Eを開始できる」という関係は、SS（Start to Start）です。具体例として、画面設計（作業C）の1～2日目でトップページと商品一覧ページの設計が完了したら、作業Cの3日目から作業E（画面実装）を開始し、トップページの実装を始めます。作業Cと作業Eが一部重なることで、スケジュールを短縮できます（ファストトラッキング）。選択肢①FSは、「作業Cが終了してから作業Eを開始」という関係で、問題文の条件と異なります。選択肢③FFは、「作業Cが終了したら作業Eを終了」、④SFは、「作業Cが開始したら作業Eを終了」という関係で、問題文の条件と異なります。"
    },
    {
      "id": "mgmt-1-1-3-q6",
      "type": "multiple_choice",
      "question": "ガントチャートの利点として正しいものはどれですか？",
      "options": [
        "作業の順序関係（依存関係）が明確で、クリティカルパスを特定しやすい",
        "作業の開始日、終了日、所要時間が視覚的に分かりやすく、並行作業も一目で分かる",
        "ダミー作業が不要で、作業間の関係を柔軟に表現できる（FS、SS、FF、SF）",
        "余裕時間（フロート）を計算でき、遅延の影響範囲を分析しやすい"
      ],
      "correctAnswer": 1,
      "explanation": "「作業の開始日、終了日、所要時間が視覚的に分かりやすく、並行作業も一目で分かる」が正しいです。ガントチャート（Gantt Chart）は、プロジェクトの作業を横棒グラフで表現し、①縦軸に作業名、②横軸に日付、③各作業を横棒で表現（左端=開始日、右端=終了日、長さ=所要時間）、④現在日を縦線で表示、⑤進捗状況を色で表示、という構成です。ガントチャートの利点は、①視覚的に分かりやすい、②並行作業が分かる（例: 作業BとCが同時に実行されることが一目で分かる）、③進捗管理がしやすい、④ステークホルダへの報告に適している、です。\n\n選択肢①は、アローダイアグラム・PDMの利点です（ガントチャートは、作業の順序関係が分かりにくく、クリティカルパスも分かりません）。選択肢③は、PDMの利点です（ガントチャートは、FS、SS、FF、SFの関係を表現できません）。選択肢④は、アローダイアグラム・PDMの利点です（ガントチャートでは、余裕時間を計算できません）。実務では、アローダイアグラム・PDMとガントチャートを併用します（計画時にアローダイアグラムでクリティカルパスを特定、進捗管理時にガントチャートで日々の進捗を確認）。"
    },
    {
      "id": "mgmt-1-1-3-q7",
      "type": "multiple_choice",
      "question": "クラッシング（Crashing）に関する説明として正しいものはどれですか？",
      "options": [
        "本来は順次実行する作業を並行実行して、スケジュールを短縮する手法。コストは増加しないが、リスクが増加する",
        "クリティカルパス上の作業にリソース（人員、予算）を追加投入して、作業時間を短縮する手法。コストは増加するが、確実に短縮できる",
        "クリティカルパス外の作業を短縮して、プロジェクト全体の所要時間を短縮する手法",
        "作業の優先度を変更して、重要な作業を先に実施する手法"
      ],
      "correctAnswer": 1,
      "explanation": "「クリティカルパス上の作業にリソース（人員、予算）を追加投入して、作業時間を短縮する手法。コストは増加するが、確実に短縮できる」が正しいです。クラッシング（Crashing）は、スケジュール短縮手法の1つで、クリティカルパス上の作業にリソースを追加投入（例: プログラマを2人から4人に増員、残業や休日出勤を実施、外部委託を追加）して、作業時間を短縮します。クラッシングのメリットは、①確実にスケジュールを短縮できる、②リスクが比較的低い、です。デメリットは、①コストが増加（人件費、残業代、外部委託費）、②効果が逓減（人員を2倍にしても、作業時間が半分にならない場合がある）、③品質が低下するリスク（急いで作業するとバグが増える）、です。クラッシングを適用する際は、コスト効率の良い作業から短縮します（例: 1日短縮するのに3万円かかる作業Aと、5万円かかる作業Bがある場合、作業Aから短縮）。\n\n選択肢①は、ファストトラッキング（Fast Tracking）の説明です。選択肢③は間違いです（クリティカルパス外の作業を短縮しても、プロジェクト全体の所要時間は変わりません）。選択肢④は、優先度管理の説明で、スケジュール短縮手法ではありません。"
    },
    {
      "id": "mgmt-1-1-3-q8",
      "type": "multiple_choice",
      "question": "ファストトラッキング（Fast Tracking）が適している状況はどれですか？",
      "options": [
        "予算に余裕があり、確実にスケジュールを短縮したい場合",
        "設計が安定しており、変更が少ない場合。大幅なスケジュール短縮が必要な場合",
        "設計が不安定で、要求が頻繁に変わる場合",
        "クリティカルパス上の作業の所要時間を1～2日短縮したい場合"
      ],
      "correctAnswer": 1,
      "explanation": "「設計が安定しており、変更が少ない場合。大幅なスケジュール短縮が必要な場合」が正しいです。ファストトラッキング（Fast Tracking）は、本来は順次実行する作業（FS: Finish to Start）を、並行実行（SS: Start to Start、または一部重複）してスケジュールを短縮する手法です。例えば、「設計が完了してからプログラミングを開始」を「設計の一部が完了したらプログラミングを開始」に変更します。\n\nファストトラッキングが適している状況：\n①設計が安定している（変更が少ない）場合 → 手戻り（やり直し）リスクが低い\n②大幅なスケジュール短縮が必要な場合（1週間以上）→ 並行実行で大幅な短縮が可能\n③予算が限られている場合 → コストが増加しない（人員追加なし）\n\nファストトラッキングが不適切な状況：\n①設計が不安定（要求が頻繁に変わる）場合 → 手戻りコストが大きい（選択肢③）\n②短縮幅が小さい（1～2日）場合 → クラッシングの方がリスクが低い（選択肢④）\n\n選択肢①は、クラッシングが適している状況です（予算に余裕があり、確実に短縮したい）。"
    },
    {
      "id": "mgmt-1-1-3-q9",
      "type": "multiple_choice",
      "question": "プロジェクトの進捗管理において、SPI（スケジュール効率指数）が0.8の場合、どのような状況を示していますか？",
      "options": [
        "スケジュール通りに進んでいる（計画値と実績値が一致）",
        "スケジュールが20%前倒しされている（計画より早く進んでいる）",
        "スケジュールが20%遅延している（計画の80%のスピードで進んでいる）",
        "コストが20%超過している"
      ],
      "correctAnswer": 2,
      "explanation": "「スケジュールが20%遅延している（計画の80%のスピードで進んでいる）」が正しいです。SPI（Schedule Performance Index、スケジュール効率指数）は、EVM（Earned Value Management）の指標の1つで、計画に対する進捗状況を評価します。\n\nSPIの計算式: SPI = EV / PV\n  - EV（Earned Value、実績値）: 実際に完了した作業量\n  - PV（Planned Value、計画値）: 計画時点で完了しているはずの作業量\n\nSPIの意味:\n  - SPI = 1.0: スケジュール通り\n  - SPI < 1.0: スケジュール遅延（例: SPI=0.8 → 計画の80%のスピード、20%遅れ）\n  - SPI > 1.0: スケジュール前倒し（例: SPI=1.2 → 計画の120%のスピード、20%前倒し）\n\n具体例: 計画では10日目に50人日（50%）の作業が完了しているはず（PV=50）ですが、実際には40人日（40%）しか完了していない（EV=40）場合、\nSPI = 40 / 50 = 0.8\nこれは、「計画の80%のスピードで進んでいる」つまり「20%遅延している」ことを意味します。\n\n選択肢①はSPI=1.0の場合、②はSPI=1.2の場合（20%前倒し）、④はCPI（コスト効率指数）が0.8の場合の説明です。"
    },
    {
      "id": "mgmt-1-1-3-q10",
      "type": "multiple_choice",
      "question": "プロジェクトスケジュール管理の週次サイクルにおいて、毎週月曜日に実施する作業として最も適切なものはどれですか？",
      "options": [
        "WBSで作業を洗い出し、アローダイアグラムを描いてクリティカルパスを特定する",
        "先週の実績を確認し、ガントチャートを更新。遅延の影響範囲を確認し、EVMで進捗率・SPI・CPIを計算。週次報告書を作成",
        "翌週の作業を確認し、リソースの配分を調整。リスクを洗い出し、対策を準備",
        "朝会（10分）で昨日やったこと、今日やること、困っていることを共有"
      ],
      "correctAnswer": 1,
      "explanation": "「先週の実績を確認し、ガントチャートを更新。遅延の影響範囲を確認し、EVMで進捗率・SPI・CPIを計算。週次報告書を作成」が正しいです。プロジェクトスケジュール管理の実践的な流れは、計画フェーズと管理フェーズに分かれます。管理フェーズでは、週次サイクルで以下の作業を実施します。\n\n【毎週月曜日（進捗確認）】\n①先週の実績を確認（例: 作業Aは計画5日のところ、実際には6日かかった → 1日遅延）\n②ガントチャートを更新（例: 作業Aの終了日を4/5から4/6に変更）\n③遅延の影響範囲を確認（例: 作業Aが1日遅延 → クリティカルパス上なので、プロジェクト全体が1日遅延）\n④対策を検討（例: 作業Cにリソースを追加投入し、1日短縮）\n⑤EVMで進捗率・SPI・CPIを計算（例: SPI=0.9 → 10%遅れている）\n⑥週次報告書を作成し、ステークホルダ（顧客、経営層）に報告\n\n選択肢①は、プロジェクト開始時（計画フェーズ）の作業です。選択肢③は、毎週金曜日（翌週の計画）の作業です。選択肢④は、毎日（デイリー進捗確認）の作業です。週次サイクルでは、月曜日に進捗確認、金曜日に翌週の計画を実施し、毎日の朝会で問題を共有します。"
    }
  ]
}
