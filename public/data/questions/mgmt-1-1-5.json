{
  "topicId": "mgmt-1-1-5",
  "title": "品質管理",
  "questions": [
    {
      "id": "mgmt-1-1-5-q1",
      "type": "multiple_choice",
      "question": "プロジェクト品質管理において、「プロセスが適切に実施されているかを監視し、改善する活動」を表すのはどれですか?",
      "options": [
        "品質計画(Quality Planning)",
        "品質保証(Quality Assurance)",
        "品質管理(Quality Control)",
        "品質改善(Quality Improvement)"
      ],
      "correctAnswer": 1,
      "explanation": "「品質保証(Quality Assurance、QA)」が正しいです。品質保証は、プロセスの品質を対象とし、開発プロセス、レビュープロセス、テストプロセスが適切に実施されているかを監視し、改善する活動です。主な活動として、プロセス監査、標準遵守の確認、改善提案があります。選択肢①「品質計画」は、品質目標と品質基準を定義する活動です。選択肢③「品質管理(QC)」は、成果物(設計書、コード)が品質基準を満たしているかを検証し、不具合を修正する活動で、「成果物の品質」を対象とします。品質保証(QA)は「プロセスの品質」、品質管理(QC)は「成果物の品質」を対象とする点が重要な違いです。選択肢④「品質改善」は、一般的な用語ですが、PMBOKではQAとQCの2つに分類されます。"
    },
    {
      "id": "mgmt-1-1-5-q2",
      "type": "multiple_choice",
      "question": "品質コストの法則に関する説明として、最も適切なものはどれですか?",
      "options": [
        "バグの修正コストは、発見時期に関わらず一定である",
        "設計段階で発見したバグの修正コストを1とすると、テスト段階では約10倍、本番稼働後では約100倍になる",
        "テスト段階で発見したバグの修正コストが最も高い",
        "本番稼働後のバグは、設計段階のバグより修正が容易である"
      ],
      "correctAnswer": 1,
      "explanation": "「設計段階で発見したバグの修正コストを1とすると、テスト段階では約10倍、本番稼働後では約100倍になる」が正しいです。これを品質コストの法則と呼びます。バグの修正コストは、発見が遅れるほど指数関数的に増大します。理由は、①影響範囲が広がる(設計のバグは全コードに影響)、②修正の複雑さ(既存機能への影響を確認する必要)、③顧客への影響(本番稼働後は業務停止、信頼失墜)、などです。そのため、早期の品質確保(要件定義レビュー、設計レビュー)が重要で、レビューによって開発フェーズでバグを発見することで、長期的にはコスト削減につながります。選択肢①は誤りで、発見時期により修正コストは大きく異なります。選択肢③④も誤りです。"
    },
    {
      "id": "mgmt-1-1-5-q3",
      "type": "multiple_choice",
      "question": "インスペクション(Inspection)とウォークスルー(Walkthrough)に関する説明として、正しいものはどれですか?",
      "options": [
        "インスペクションは非公式なレビューで、ウォークスルーは正式なレビューである",
        "インスペクションでは作成者が説明役を務め、ウォークスルーではモデレータが進行する",
        "インスペクションは役割分担があり体系的、ウォークスルーは作成者が説明する非公式なレビューである",
        "インスペクションもウォークスルーも、事前準備は不要である"
      ],
      "correctAnswer": 2,
      "explanation": "「インスペクションは役割分担があり体系的、ウォークスルーは作成者が説明する非公式なレビューである」が正しいです。インスペクション(Inspection)は、正式なレビュー手法で、役割分担(モデレータ、レビューア、記録者)を明確にし、各レビューアが事前に個別準備(問題点リストアップ)を行い、体系的に成果物を検証します。代表例はFagan Inspectionです。利点は精度が高いことですが、準備に時間がかかります。一方、ウォークスルー(Walkthrough)は、非公式なレビュー手法で、作成者が成果物を説明し、レビューアが質問や指摘をします。利点は軽量で柔軟なこと、知識の共有ですが、インスペクションより体系的でなく、問題を見逃す可能性があります。選択肢①②④は全て誤りです。"
    },
    {
      "id": "mgmt-1-1-5-q4",
      "type": "multiple_choice",
      "question": "レビューの利点として、正しくないものはどれですか?",
      "options": [
        "コーディング前の設計段階でバグを発見でき、レビューで30～70%のバグを発見可能",
        "1時間のレビューで10時間のデバッグ時間を削減できることがあり、コスト対効果が高い",
        "アルゴリズムの選択や設計の妥当性など、人間の判断が必要な問題を発見できる",
        "レビューはテストの代替となるため、テスト工程を省略できる"
      ],
      "correctAnswer": 3,
      "explanation": "「レビューはテストの代替となるため、テスト工程を省略できる」が誤りです。レビューとテストは、それぞれ異なる目的と対象を持つ品質管理手法であり、相互に補完する関係にあります。レビューは、設計書やコードなどの成果物を人間が確認し、論理的な問題や設計の妥当性を確認します。一方、テストは、プログラムを実際に実行して動作を確認します。レビューでは発見できない問題(例:性能問題、実行時エラー、環境依存の問題)をテストで発見できます。そのため、レビューとテストの両方を実施することが重要で、テスト工程を省略することはできません。選択肢①②③は全て正しいレビューの利点です。レビューは早期のバグ発見に非常に効果的で、コスト対効果が高い品質管理手法です。"
    },
    {
      "id": "mgmt-1-1-5-q5",
      "type": "multiple_choice",
      "question": "PDCAサイクルの4つのステップを正しい順序で並べたものはどれですか?",
      "options": [
        "Do(実行) → Plan(計画) → Check(確認) → Act(改善)",
        "Plan(計画) → Do(実行) → Check(確認) → Act(改善)",
        "Plan(計画) → Check(確認) → Do(実行) → Act(改善)",
        "Check(確認) → Plan(計画) → Do(実行) → Act(改善)"
      ],
      "correctAnswer": 1,
      "explanation": "「Plan(計画) → Do(実行) → Check(確認) → Act(改善)」が正しいです。PDCAサイクルは、継続的にプロセスを改善する手法で、①Plan(計画):品質目標と実施計画を立てる、②Do(実行):計画に従ってプロセスを実施、③Check(確認):実施結果を測定し、計画と比較、④Act(改善):差異があれば原因を分析し、改善策を実施、の4ステップを繰り返します。品質保証では、PDCAサイクルを用いてプロセス(レビュー、テスト、コーディング)を継続的に改善します。例えば、コードレビューの品質向上のPDCAサイクル:①Plan:合格率90%を目標、②Do:レビューガイドライン作成・教育、③Check:1か月後測定→82%(目標未達)、④Act:原因分析→レビューア追加、⑤再度Plan... と繰り返します。選択肢①③④は順序が間違っています。"
    },
    {
      "id": "mgmt-1-1-5-q6",
      "type": "multiple_choice",
      "question": "バグ密度(Defect Density)の計算式として正しいものはどれですか? (ソースコード行数が10,000行、発見したバグ数が30個の場合)",
      "options": [
        "バグ密度 = 10,000 ÷ 30 = 333.3",
        "バグ密度 = 30 ÷ 10,000 = 0.003",
        "バグ密度 = 30 ÷ 10,000 × 100 = 0.3",
        "バグ密度 = 30 ÷ 10,000 × 1,000 = 3.0"
      ],
      "correctAnswer": 3,
      "explanation": "「バグ密度 = 30 ÷ 10,000 × 1,000 = 3.0」が正しいです。バグ密度(Defect Density)は、コードの品質を測る指標で、「1,000行あたりのバグ数」を計算します。計算式は、バグ密度 = バグ数 ÷ ソースコード行数 × 1,000 です。この例では、バグ数30個、ソースコード行数10,000行なので、バグ密度 = 30 ÷ 10,000 × 1,000 = 3.0(1,000行あたり3個のバグ)となります。一般的な業界標準のバグ密度は3～5程度で、目標値は1.0以下が望ましいとされています。バグ密度が低いほど、コードの品質が高いことを示します。選択肢①②③は計算式が間違っています。バグ密度は、プロジェクトの品質を定量的に測定し、品質目標と比較するために重要な指標です。"
    },
    {
      "id": "mgmt-1-1-5-q7",
      "type": "multiple_choice",
      "question": "コードカバレッジ(Code Coverage)が80%という場合、何を意味しますか?",
      "options": [
        "全バグの80%を発見できた",
        "全コードの80%がテストで実行された",
        "全機能の80%が実装された",
        "コードの品質が80点である"
      ],
      "correctAnswer": 1,
      "explanation": "「全コードの80%がテストで実行された」が正しいです。コードカバレッジ(Code Coverage)は、テストの網羅性を測る指標で、「テストで実行されたコードの割合」を示します。計算式は、コードカバレッジ = 実行されたコード行数 ÷ 総コード行数 × 100(%) です。例えば、総コード行数が10,000行で、テストで実行された行数が8,000行の場合、コードカバレッジ = 8,000 ÷ 10,000 × 100 = 80% となります。コードカバレッジが高いほど、多くのコードをテストできており、テストの網羅性が高いことを示します。一般的な目標値は80%以上です。ただし、コードカバレッジ100%でも、全てのバグを発見できるわけではありません(論理的なバグや設計の問題は発見できない場合がある)。選択肢①③④は誤りです。"
    },
    {
      "id": "mgmt-1-1-5-q8",
      "type": "multiple_choice",
      "question": "テストケースの構成要素として、含まれないものはどれですか?",
      "options": [
        "テストケースID",
        "テスト項目(何をテストするか)",
        "テスト手順(操作手順)",
        "バグ修正の担当者"
      ],
      "correctAnswer": 3,
      "explanation": "「バグ修正の担当者」が含まれません。バグ修正の担当者は、テスト実行後に発見されたバグを記録する際に、バグトラッキングシステム(Jira、Redmine)で管理する情報であり、テストケースの構成要素ではありません。テストケースは、テストを実行する前に作成するもので、「どのようにテストするか」を定義します。テストケースの5つの構成要素は、①テストケースID(例:TC-001)、②テスト項目(何をテストするか、例:正常ログイン)、③テスト手順(操作手順、例:①ユーザーID入力 ②パスワード入力 ③ログインボタンクリック)、④テストデータ(入力データ、例:ユーザーID=test001、パスワード=Pass1234)、⑤期待結果(期待される出力、例:ログイン成功、ホーム画面表示)、です。テストケースは、要件定義書や設計書を基に作成します。"
    },
    {
      "id": "mgmt-1-1-5-q9",
      "type": "multiple_choice",
      "question": "バグの優先度(Priority)と重要度(Severity)に関する説明として、正しいものはどれですか?",
      "options": [
        "優先度は「システムへの影響の大きさ」、重要度は「どれだけ早く修正すべきか」を表す",
        "優先度は「どれだけ早く修正すべきか」、重要度は「システムへの影響の大きさ」を表す",
        "優先度と重要度は同じ意味である",
        "バグの修正順序は、優先度のみで決定し、重要度は考慮しない"
      ],
      "correctAnswer": 1,
      "explanation": "「優先度は『どれだけ早く修正すべきか』、重要度は『システムへの影響の大きさ』を表す」が正しいです。バグ管理では、優先度(Priority)と重要度(Severity)の2つの軸でバグを評価します。優先度は、スケジュールへの影響を示し、「どれだけ早く修正すべきか」を表します(評価:高・中・低)。重要度は、機能への影響を示し、「システムへの影響の大きさ」を表します(評価:致命的・重大・軽微)。修正順序は、優先度と重要度の組み合わせで決定します。例えば、①優先度:高、重要度:高 → すぐに修正(例:決済機能が動かない)、②優先度:高、重要度:低 → リリース前に修正(例:ロゴ画像の位置がずれている)、③優先度:低、重要度:高 → 次のリリースで修正(例:レアケースで発生する重大バグ)、④優先度:低、重要度:低 → 修正しない可能性もある(例:マイナーな表示崩れ)、となります。選択肢①③④は誤りです。"
    },
    {
      "id": "mgmt-1-1-5-q10",
      "type": "multiple_choice",
      "question": "なぜなぜ分析(5 Whys)に関する説明として、正しいものはどれですか?",
      "options": [
        "問題に対して「なぜ?」を必ず5回繰り返さなければならない",
        "問題に対して「なぜ?」を繰り返すことで、表面的な原因ではなく根本的な原因を特定する手法",
        "バグの数を5つに限定して分析する手法",
        "5人のメンバーで問題を分析する手法"
      ],
      "correctAnswer": 1,
      "explanation": "「問題に対して『なぜ?』を繰り返すことで、表面的な原因ではなく根本的な原因を特定する手法」が正しいです。なぜなぜ分析(5 Whys)は、根本原因分析(Root Cause Analysis, RCA)の代表的な手法で、問題に対して「なぜ?」を繰り返し(通常5回程度)、表面的な原因から根本的な原因にたどり着きます。例えば、「バグが多い」という問題に対して、①なぜバグが多い? → テストが不足、②なぜテストが不足? → テスト時間が確保されていない、③なぜテスト時間が確保されていない? → スケジュールが厳しい、④なぜスケジュールが厳しい? → 見積もりが甘かった、⑤なぜ見積もりが甘かった? → 過去の実績データを活用していなかった、と分析し、根本原因を「過去の実績データを活用していない見積もりプロセス」と特定します。根本原因に対策を実施することで、同じ問題の再発を防げます。選択肢①は誤りで、5回は目安であり、必ず5回繰り返す必要はありません。選択肢③④も誤りです。"
    }
  ]
}
