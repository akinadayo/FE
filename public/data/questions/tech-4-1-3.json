{
  "topicId": "tech-4-1-3",
  "title": "モデリング",
  "questions": [
    {
      "id": "tech-4-1-3-q1",
      "type": "multiple_choice",
      "question": "DFD（データフロー図）において、「システムの外部にあるデータの発生源や送信先」を表す構成要素はどれですか？",
      "options": [
        "データフロー（矢印）",
        "プロセス（丸）",
        "データストア（平行線）",
        "外部エンティティ（四角）"
      ],
      "correctAnswer": 3,
      "explanation": "「外部エンティティ（四角）」が正しいです。DFD（Data Flow Diagram、データフロー図）は、システム内のデータの流れを図で表現する手法で、①データフロー（矢印）：データの流れ、②プロセス（丸）：データの処理（例: 注文処理、在庫確認）、③データストア（平行線）：データの保存場所（例: 注文DB、商品DB）、④外部エンティティ（四角）：システムの外部にあるデータの発生源や送信先（例: 顧客、管理者）、の4つの構成要素があります。外部エンティティは、システムとデータのやり取りをする外部の人や組織、システムを表します。選択肢①データフローはデータの流れ、②プロセスはデータの処理、③データストアはデータの保存場所を表します。"
    },
    {
      "id": "tech-4-1-3-q2",
      "type": "multiple_choice",
      "question": "E-R図において、「1人の顧客が複数の注文を行う」というリレーションシップのカーディナリティとして正しいものはどれですか？",
      "options": [
        "1対1（1:1）",
        "1対多（1:N）",
        "多対1（N:1）",
        "多対多（M:N）"
      ],
      "correctAnswer": 1,
      "explanation": "「1対多（1:N）」が正しいです。E-R図（Entity-Relationship Diagram、実体関連図）では、エンティティ間の関係をリレーションシップで表現し、カーディナリティで関係の多重度を示します。「1人の顧客が複数の注文を行う」という関係は、顧客側が「1」、注文側が「多（N）」なので、1対多（1:N）のカーディナリティになります。選択肢①1対1は「1人の社員に1つの社員証」のような関係、④多対多は「1人の学生が複数の講義を受講し、1つの講義に複数の学生が参加する」のような関係です。E-R図では、1対多の場合、1側に「1」、多側に「∞」または「*」を記述します。"
    },
    {
      "id": "tech-4-1-3-q3",
      "type": "multiple_choice",
      "question": "次のシステムのうち、E-R図を使用するのに最も適しているものはどれですか？",
      "options": [
        "システム内のデータの流れを明確にしたい（顧客が注文し、注文データがDBに保存される流れを可視化）",
        "データベースのテーブル構造を設計したい（顧客テーブル、商品テーブル、注文テーブルの関係を設計）",
        "システムの機能を洗い出したい（商品検索、注文、商品管理などの機能を一覧）",
        "処理の流れを時系列で理解したい（注文処理でオブジェクト間のメッセージのやり取りを確認）"
      ],
      "correctAnswer": 1,
      "explanation": "「データベースのテーブル構造を設計したい（顧客テーブル、商品テーブル、注文テーブルの関係を設計）」が正しいです。E-R図（Entity-Relationship Diagram、実体関連図）は、データベース設計で使用される図で、エンティティ（データベースに保存する対象）、属性（エンティティの特性）、リレーションシップ（エンティティ間の関係）を表現します。E-R図により、データベースのテーブル構造を設計でき、エンティティ間の関係が明確になります。選択肢①「データの流れを明確にしたい」はDFD（データフロー図）、③「システムの機能を洗い出したい」はユースケース図、④「処理の流れを時系列で理解したい」はシーケンス図が適しています。"
    },
    {
      "id": "tech-4-1-3-q4",
      "type": "multiple_choice",
      "question": "UML（統一モデリング言語）において、「システムの機能とそれを利用するユーザーの関係を表現する図」はどれですか？",
      "options": [
        "ユースケース図",
        "クラス図",
        "シーケンス図",
        "アクティビティ図"
      ],
      "correctAnswer": 0,
      "explanation": "「ユースケース図」が正しいです。ユースケース図（Use Case Diagram）は、システムの機能（ユースケース）と、それを利用するユーザー（アクター）の関係を表現する図です。ユースケース図により、システムが「誰に」「何を」提供するかを明確にでき、要件定義の段階で必要な機能を洗い出せます。ユースケース図の構成要素は、①アクター（Actor）：システムを利用するユーザーや外部システム（棒人間で表現）、②ユースケース（Use Case）：システムの機能（楕円で表現、例: 商品検索、注文）、③関連（Association）：アクターとユースケースの関係（実線で表現）、の3つです。選択肢②クラス図はクラスの構造と関係、③シーケンス図はオブジェクト間のメッセージのやり取り、④アクティビティ図は処理の流れを表現します。"
    },
    {
      "id": "tech-4-1-3-q5",
      "type": "multiple_choice",
      "question": "クラス図において、「注文が削除されると、注文明細も削除される」という強い依存関係を表す記法はどれですか？",
      "options": [
        "継承（実線の三角形）",
        "関連（実線の矢印）",
        "集約（白抜きのひし形）",
        "コンポジション（黒塗りのひし形）"
      ],
      "correctAnswer": 3,
      "explanation": "「コンポジション（黒塗りのひし形）」が正しいです。クラス図（Class Diagram）では、クラス間の関係を4種類の記法で表現します。コンポジション（Composition）は、部品が全体に強く依存する関係を表し、黒塗りのひし形で接続します（例: 注文クラス ◆→ 注文明細クラス）。全体（注文）が削除されると部品（注文明細）も削除されます。選択肢①継承は、子クラスが親クラスの属性・メソッドを継承する関係（実線の三角形）、②関連は、クラス間の一般的な関係（実線の矢印、例: 顧客→注文）、③集約は、部品が全体に弱く依存する関係（白抜きのひし形、例: 部署◇→社員、部署が削除されても社員は残る）、を表します。"
    },
    {
      "id": "tech-4-1-3-q6",
      "type": "multiple_choice",
      "question": "クラス図において、クラスを表す長方形は3つに分割されますが、上から順に記述する内容として正しいものはどれですか？",
      "options": [
        "クラス名 → メソッド → 属性",
        "クラス名 → 属性 → メソッド",
        "属性 → クラス名 → メソッド",
        "メソッド → 属性 → クラス名"
      ],
      "correctAnswer": 1,
      "explanation": "「クラス名 → 属性 → メソッド」が正しいです。クラス図では、クラスを長方形で表現し、上から順に、①クラス名（例: Customer）、②属性（例: - 顧客ID、- 氏名、- メールアドレス）、③メソッド（例: + 注文する()、+ カートに追加する()）、を記述します。属性とメソッドの前に、アクセス修飾子を記述します（-はprivate、+はpublic）。例えば、Customerクラスの場合、一番上に「Customer」というクラス名を書き、その下に「- 顧客ID」「- 氏名」などの属性を書き、一番下に「+ 注文する()」「+ カートに追加する()」などのメソッドを書きます。クラス図により、プログラムの設計を視覚的に理解できます。選択肢①③④は順序が間違っています。"
    },
    {
      "id": "tech-4-1-3-q7",
      "type": "multiple_choice",
      "question": "シーケンス図における「オブジェクトが処理を実行している期間」を表す構成要素はどれですか？",
      "options": [
        "オブジェクト（四角）",
        "ライフライン（縦の点線）",
        "メッセージ（矢印）",
        "活性区間（細い長方形）"
      ],
      "correctAnswer": 3,
      "explanation": "「活性区間（細い長方形）」が正しいです。シーケンス図（Sequence Diagram）は、オブジェクト間のメッセージのやり取りを時系列で表現する図で、システムの動的な振る舞い（処理の流れ）を理解できます。シーケンス図の構成要素は、①オブジェクト（四角）：処理に参加するオブジェクト（例: 顧客、注文画面、注文コントローラ）、②ライフライン（縦の点線）：オブジェクトの生存期間、③メッセージ（矢印）：オブジェクト間のメソッド呼び出し（例: createOrder()、checkStock()）、④活性区間（細い長方形）：オブジェクトが処理を実行している期間、の4つです。活性区間は、ライフライン上に描かれ、オブジェクトがアクティブな期間（処理を実行中）を示します。シーケンス図は、時系列で上から下へ、メッセージのやり取りを記述します。"
    },
    {
      "id": "tech-4-1-3-q8",
      "type": "multiple_choice",
      "question": "シーケンス図の流れとして正しいものはどれですか？（ECサイトの注文処理の例）",
      "options": [
        "①顧客→注文画面: 注文ボタンをクリック → ②注文画面→商品: checkStock() → ③商品→注文画面: 在庫OK → ④注文画面→顧客: 注文完了画面を表示",
        "①顧客→注文画面: 注文ボタンをクリック → ②注文画面→注文コントローラ: createOrder() → ③注文コントローラ→商品: checkStock() → ④商品→注文コントローラ: 在庫OK → ⑤注文コントローラ→注文画面: 注文ID → ⑥注文画面→顧客: 注文完了画面を表示",
        "①顧客→商品: 在庫を確認 → ②商品→顧客: 在庫OK → ③顧客→注文画面: 注文ボタンをクリック → ④注文画面→顧客: 注文完了画面を表示",
        "①注文画面→注文コントローラ: createOrder() → ②注文コントローラ→商品: checkStock() → ③顧客→注文画面: 注文ボタンをクリック → ④注文画面→顧客: 注文完了画面を表示"
      ],
      "correctAnswer": 1,
      "explanation": "「①顧客→注文画面: 注文ボタンをクリック → ②注文画面→注文コントローラ: createOrder() → ③注文コントローラ→商品: checkStock() → ④商品→注文コントローラ: 在庫OK → ⑤注文コントローラ→注文画面: 注文ID → ⑥注文画面→顧客: 注文完了画面を表示」が正しいです。シーケンス図は、時系列で上から下へ、オブジェクト間のメッセージのやり取りを記述します。ECサイトの注文処理では、①顧客が注文画面で注文ボタンをクリック、②注文画面が注文コントローラにcreateOrder()を呼び出し、③注文コントローラが商品にcheckStock()を呼び出し、④商品が注文コントローラに在庫OKを返し、⑤注文コントローラが注文画面に注文IDを返し、⑥注文画面が顧客に注文完了画面を表示する、という流れになります。選択肢①③④は、オブジェクト間のメッセージの流れが間違っています。"
    },
    {
      "id": "tech-4-1-3-q9",
      "type": "multiple_choice",
      "question": "アクティビティ図において、「並行処理の開始」を表すノードはどれですか？",
      "options": [
        "開始ノード（黒丸）",
        "判断ノード（ひし形）",
        "フォークノード（太い横線）",
        "終了ノード（黒丸の周りに円）"
      ],
      "correctAnswer": 2,
      "explanation": "「フォークノード（太い横線）」が正しいです。アクティビティ図（Activity Diagram）は、処理の流れ（フローチャート）を表現する図で、①開始ノード（黒丸）：処理の開始地点、②アクティビティ（角丸四角）：処理、③判断ノード（ひし形）：条件分岐、④フォークノード（太い横線）：並行処理の開始、⑤ジョインノード（太い横線）：並行処理の終了・合流、⑥終了ノード（黒丸の周りに円）：処理の終了地点、の6つの構成要素があります。例えば、ECサイトの注文処理で、注文を確定した後、「注文確認メールを送信」と「在庫を更新」を同時に実行する場合、フォークノード（太い横線）で並行処理が開始され、両方の処理が完了するとジョインノード（太い横線）で合流します。並行処理により、処理時間を短縮できます。選択肢①は処理の開始地点、②は条件分岐、④は処理の終了地点を表します。"
    },
    {
      "id": "tech-4-1-3-q10",
      "type": "multiple_choice",
      "question": "次のプロジェクトのうち、使用するモデリング手法の組み合わせとして最も適切なものはどれですか？（要件定義フェーズと設計フェーズで使用する図）",
      "options": [
        "要件定義: クラス図とシーケンス図 / 設計: ユースケース図とDFD",
        "要件定義: ユースケース図とDFD / 設計: E-R図、クラス図、シーケンス図",
        "要件定義: E-R図とクラス図 / 設計: ユースケース図とアクティビティ図",
        "要件定義: シーケンス図とアクティビティ図 / 設計: DFDとユースケース図"
      ],
      "correctAnswer": 1,
      "explanation": "「要件定義: ユースケース図とDFD / 設計: E-R図、クラス図、シーケンス図」が正しいです。プロジェクトの段階に応じて、適切なモデリング手法を選択します。要件定義フェーズでは、①ユースケース図でシステムの機能を洗い出し（例: 商品検索、注文、商品管理）、②DFDでデータの流れを確認します（例: 顧客が注文し、注文データがDBに保存される流れ）。設計フェーズでは、①E-R図でデータベース設計（例: 顧客テーブル、商品テーブル、注文テーブルの関係）、②クラス図でプログラムの構造設計（例: 顧客クラス、商品クラス、注文クラスの関係）、③シーケンス図で処理の流れ設計（例: 注文処理のオブジェクト間のメッセージのやり取り）、④アクティビティ図でビジネスプロセス設計（例: 注文処理の流れ）、を行います。選択肢①③④は、各フェーズで使用する図の組み合わせが間違っています。"
    }
  ]
}
