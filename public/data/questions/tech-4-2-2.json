{
  "topicId": "tech-4-2-2",
  "title": "プログラミング",
  "questions": [
    {
      "id": "tech-4-2-2-q1",
      "type": "multiple_choice",
      "question": "組み込みシステムで、ハードウェア（センサー、モーター）を直接制御する必要があります。実行速度が重要で、CPUのレジスタやメモリアドレスを直接操作したいです。どの言語を使うべきですか？",
      "options": [
        "Python（高級言語、インタプリタ方式）",
        "アセンブリ言語（低級言語）",
        "Java（高級言語、中間コード方式）",
        "JavaScript（高級言語、インタプリタ方式）"
      ],
      "correctAnswer": 1,
      "explanation": "「アセンブリ言語（低級言語）」が正しいです。組み込みシステムでハードウェアを直接制御する必要がある場合、低級言語（アセンブリ言語）が適しています。低級言語の特徴は、①CPUに近い（ハードウェアを直接制御できる）、②実行速度が速い（機械語に変換する手間が少ない）、③記述が難しい（人間にとって理解困難）、④移植性が低い（CPUごとに命令セットが異なる）、です。この問題では、「ハードウェアを直接制御」、「実行速度が重要」、「CPUのレジスタやメモリアドレスを直接操作」という要件が、低級言語の特徴と一致しています。アセンブリ言語は、機械語を人間が読みやすい記号（ニーモニック）で表現した言語で、MOV（データ移動）、ADD（加算）などの命令を使ってCPUを直接制御します。Python、Java、JavaScriptは高級言語であり、ハードウェアを直接制御することは困難です。高級言語は人間にとって理解しやすいですが、CPUに近い処理（レジスタ操作など）を記述することはできません。"
    },
    {
      "id": "tech-4-2-2-q2",
      "type": "multiple_choice",
      "question": "C言語でプログラムを開発しています。ソースコード全体を事前に機械語に変換してから実行したいです。この変換方式を何と呼びますか？また、実行速度はどうなりますか？",
      "options": [
        "インタプリタ方式、実行速度が遅い",
        "コンパイラ方式、実行速度が速い",
        "インタプリタ方式、実行速度が速い",
        "コンパイラ方式、実行速度が遅い"
      ],
      "correctAnswer": 1,
      "explanation": "「コンパイラ方式、実行速度が速い」が正しいです。コンパイラ方式とは、ソースコード全体を事前に機械語（オブジェクトコード）に変換し、その後、実行する方式です。コンパイラ方式の特徴は、①変換タイミング：事前に全体を変換（コンパイル時）、②実行速度：速い（事前に機械語に変換済み）、③開発効率：やや低い（コンパイルに時間がかかる）、④デバッグ：やや難しい（コンパイルが必要）、です。C言語は代表的なコンパイラ言語です。処理の流れは、①ソースコード（main.c）を作成、②コンパイラ（gcc）でコンパイル → main.exe（機械語）に変換、③実行：./main.exe → 機械語を直接実行、です。この方式では、事前に機械語に変換済みのため、実行速度が速いです。インタプリタ方式は、ソースコードを1行ずつ読み取り、その場で機械語に変換して実行する方式で、毎回変換が必要なため、実行速度がやや遅いです。Python、Ruby、JavaScriptがインタプリタ言語の例です。"
    },
    {
      "id": "tech-4-2-2-q3",
      "type": "multiple_choice",
      "question": "Python でプログラムを開発しています。コンパイル不要で、ソースコードを作成したらすぐに実行できます。この変換方式を何と呼びますか？",
      "options": [
        "コンパイラ方式",
        "インタプリタ方式",
        "中間コード方式",
        "アセンブラ方式"
      ],
      "correctAnswer": 1,
      "explanation": "「インタプリタ方式」が正しいです。インタプリタ方式とは、ソースコードを1行ずつ読み取り、その場で機械語に変換して実行する方式です。インタプリタ方式の特徴は、①変換タイミング：実行時に1行ずつ変換、②実行速度：遅い（毎回変換が必要）、③開発効率：高い（すぐに実行できる）、④デバッグ：容易（すぐに実行して確認できる）、です。Python は代表的なインタプリタ言語です。処理の流れは、①ソースコード（main.py）を作成、②実行（コンパイル不要）：python main.py → インタプリタ（python）がソースコードを1行ずつ読み取り、その場で機械語に変換して実行、です。この問題では、「コンパイル不要で、ソースコードを作成したらすぐに実行できます」という記述が、インタプリタ方式の特徴である「開発効率が高い（すぐに実行できる）」と一致しています。コンパイラ方式では、ソースコードを実行する前に、コンパイル（全体を機械語に変換）が必要です。中間コード方式は、Java や C# が採用する方式で、コンパイラとインタプリタの両方の特徴を持ちます。アセンブラ方式は、アセンブリ言語を機械語に変換する方式で、一般的なプログラミングとは異なります。"
    },
    {
      "id": "tech-4-2-2-q4",
      "type": "multiple_choice",
      "question": "C言語で、ソースコード（main.c）に「#include <stdio.h>」と「#define PI 3.14」が書かれています。この2つのディレクティブを展開するのはどの処理ですか？",
      "options": [
        "コンパイラ（Compiler）",
        "プリプロセッサ（Preprocessor）",
        "リンカ（Linker）",
        "ローダ（Loader）"
      ],
      "correctAnswer": 1,
      "explanation": "「プリプロセッサ（Preprocessor）」が正しいです。プリプロセッサとは、ソースコードの前処理を行うツールで、#include や #define を展開します。プリプロセッサの役割は、①#include <stdio.h> → stdio.h の内容（数千行）が挿入される、②#define PI 3.14 → ソースコード中の PI が 3.14 に置換される、です。この問題では、「#include <stdio.h>」と「#define PI 3.14」という記述が、プリプロセッサのディレクティブ（前処理命令）であることを示しています。ビルドプロセスの流れは、①プリプロセッサ（前処理）：#include や #define を展開 → main.i、②コンパイラ（翻訳）：ソースコードをオブジェクトコード（機械語）に変換 → main.o、③リンカ（結合）：複数のオブジェクトコード+ライブラリを結合して実行可能ファイルを生成 → main.exe、④ローダ（読み込み）：実行可能ファイルをメモリに読み込んで実行、です。コンパイラはソースコードを機械語に変換する処理で、#include や #define の展開は行いません。リンカは複数のオブジェクトコードを結合する処理で、ローダは実行可能ファイルをメモリに読み込む処理です。"
    },
    {
      "id": "tech-4-2-2-q5",
      "type": "multiple_choice",
      "question": "C言語で、main.c と func.c の2つのソースファイルを作成しました。それぞれをコンパイルして main.o と func.o を生成しました。この2つのオブジェクトコードを結合して、1つの実行可能ファイル（main.exe）を生成するのはどの処理ですか？",
      "options": [
        "プリプロセッサ（Preprocessor）",
        "コンパイラ（Compiler）",
        "リンカ（Linker）",
        "ローダ（Loader）"
      ],
      "correctAnswer": 2,
      "explanation": "「リンカ（Linker）」が正しいです。リンカとは、複数のオブジェクトコードとライブラリを結合して実行可能ファイルを生成するツールです。リンカの役割は、①複数のソースファイル（main.c、func.c）をそれぞれコンパイルしたオブジェクトコード（main.o、func.o）を結合、②printf などの標準ライブラリ関数を結合、です。この問題では、「main.o と func.o を結合して、1つの実行可能ファイル（main.exe）を生成する」という記述が、リンカの役割そのものです。ビルドプロセスの流れは、①プリプロセッサ（前処理）：#include や #define を展開 → main.i、②コンパイラ（翻訳）：ソースコードをオブジェクトコード（機械語）に変換 → main.o、③リンカ（結合）：複数のオブジェクトコード+ライブラリを結合して実行可能ファイルを生成 → main.exe、④ローダ（読み込み）：実行可能ファイルをメモリに読み込んで実行、です。プリプロセッサは#include や #define を展開する処理で、コンパイラはソースコードを機械語に変換する処理で、ローダは実行可能ファイルをメモリに読み込む処理です。リンカが複数のオブジェクトコードを結合する処理を担当します。"
    },
    {
      "id": "tech-4-2-2-q6",
      "type": "multiple_choice",
      "question": "プログラムを「順次」「選択」「反復」の3つの基本構造だけで記述し、goto 文を使わない手法を何と呼びますか？",
      "options": [
        "オブジェクト指向プログラミング",
        "構造化プログラミング",
        "関数型プログラミング",
        "宣言型プログラミング"
      ],
      "correctAnswer": 1,
      "explanation": "「構造化プログラミング」が正しいです。構造化プログラミング（Structured Programming）とは、プログラムを「順次」「選択」「反復」の3つの基本構造の組み合わせで記述する手法です。構造化プログラミングの目的は、プログラムの可読性（読みやすさ）と保守性（修正しやすさ）を向上させることです。3つの基本構造は、①順次（Sequence）：命令を上から順番に実行（例：a = 5; b = 10; c = a + b;）、②選択（Selection）：条件によって処理を分岐（例：if (x > 0) { ... } else { ... }）、③反復（Iteration）：条件を満たす間、処理を繰り返す（例：for (int i = 0; i < 10; i++) { ... }）、です。この問題では、「順次、選択、反復の3つの基本構造だけで記述し、goto 文を使わない」という記述が、構造化プログラミングの定義そのものです。1960年代まで、プログラムは goto 文を多用したスパゲッティコード（複雑に絡み合ったコード）でしたが、1968年にダイクストラが構造化プログラミングを提唱し、goto 文を使わずに3つの基本構造だけでプログラムを記述することで、プログラムが格段に読みやすくなりました。オブジェクト指向プログラミングはデータと処理をまとめたオブジェクトを操作する手法で、関数型プログラミングは関数の組み合わせで記述する手法で、宣言型プログラミングは「何をするか」を記述する手法です。"
    },
    {
      "id": "tech-4-2-2-q7",
      "type": "multiple_choice",
      "question": "次のコードは、goto 文を使って 1 から 10 までの合計を計算しています。このコードを構造化プログラミングの原則に従って書き直すには、どの基本構造を使うべきですか？\n\nコード：\nint sum = 0;\nint i = 1;\nLOOP:\n    sum = sum + i;\n    i = i + 1;\n    if (i <= 10) goto LOOP;",
      "options": [
        "順次構造のみ",
        "選択構造（if-else）",
        "反復構造（for ループ）",
        "オブジェクト指向"
      ],
      "correctAnswer": 2,
      "explanation": "「反復構造（for ループ）」が正しいです。このコードは、goto 文を使って 1 から 10 までの合計を計算しています。goto 文は、処理の流れが複雑で読みづらいため、構造化プログラミングでは使用を避けます。このコードを構造化プログラミングの原則に従って書き直すには、反復構造（for ループ）を使います。書き直したコードは、int sum = 0; for (int i = 1; i <= 10; i++) { sum = sum + i; } です。このコードは、goto 文を使わず、for ループ（反復構造）で記述しています。反復構造（Iteration）は、条件を満たす間、処理を繰り返す基本構造で、while、for などの制御構造を使います。この問題では、「1 から 10 までの合計を計算する」という処理が繰り返し処理であるため、反復構造が適しています。順次構造は命令を上から順番に実行する基本構造で、繰り返し処理には使えません。選択構造は条件によって処理を分岐する基本構造で、この問題では使いません。オブジェクト指向はプログラミングパラダイムの1つで、基本構造ではありません。"
    },
    {
      "id": "tech-4-2-2-q8",
      "type": "multiple_choice",
      "question": "Java で開発しています。Java のソースコード（.java）をコンパイラ（javac）でバイトコード（.class）に変換し、JVM（Java仮想マシン）がバイトコードを実行します。この方式を何と呼びますか？",
      "options": [
        "コンパイラ方式",
        "インタプリタ方式",
        "中間コード方式",
        "アセンブラ方式"
      ],
      "correctAnswer": 2,
      "explanation": "「中間コード方式」が正しいです。中間コード方式とは、コンパイラとインタプリタの両方の特徴を持つ方式です。Java や C# が採用しています。Java の処理フローは、①ソースコード（.java）をコンパイラ（javac）でバイトコード（.class）に変換（中間コード）、②JVM（Java仮想マシン）がバイトコードを1行ずつ解釈して実行（またはJITコンパイルで機械語に変換）、です。この問題では、「ソースコードをバイトコードに変換し、JVMがバイトコードを実行する」という記述が、中間コード方式の特徴を示しています。中間コード方式の利点は、①移植性が高い（バイトコードはどのOSでも実行可能）、②コンパイラ方式とインタプリタ方式の長所を両立、です。コンパイラ方式は、ソースコード全体を事前に機械語に変換し、その後、実行する方式です。インタプリタ方式は、ソースコードを1行ずつ読み取り、その場で機械語に変換して実行する方式です。アセンブラ方式は、アセンブリ言語を機械語に変換する方式で、一般的なプログラミングとは異なります。"
    },
    {
      "id": "tech-4-2-2-q9",
      "type": "multiple_choice",
      "question": "データと処理をまとめた「オブジェクト」を操作するプログラミング手法を何と呼びますか？また、この手法の代表的な言語はどれですか？",
      "options": [
        "手続き型プログラミング、C言語",
        "オブジェクト指向プログラミング、Java",
        "関数型プログラミング、Haskell",
        "宣言型プログラミング、SQL"
      ],
      "correctAnswer": 1,
      "explanation": "「オブジェクト指向プログラミング、Java」が正しいです。オブジェクト指向プログラミング（Object-Oriented Programming、OOP）とは、データと処理をまとめたオブジェクトを操作するプログラミング手法です。オブジェクト指向の特徴は、カプセル化、継承、ポリモーフィズムの3つです。代表的な言語として、Java、C++、Python があります。この問題では、「データと処理をまとめた『オブジェクト』を操作する」という記述が、オブジェクト指向プログラミングの定義そのものです。例えば、Java では、public class Calculator { public int sum(int start, int end) { ... } } というクラス（オブジェクトの設計図）を定義し、Calculator calc = new Calculator(); calc.sum(1, 10); というようにオブジェクトを操作します。手続き型プログラミングは処理の手順を記述する手法で、C、Pascal が代表的です。関数型プログラミングは関数の組み合わせで記述する手法で、Haskell、Lisp、Scala が代表的です。宣言型プログラミングは「何をするか」を記述する手法で、SQL、HTML が代表的です。"
    },
    {
      "id": "tech-4-2-2-q10",
      "type": "multiple_choice",
      "question": "Python で開発しています。Python は、手続き型（for ループ）、オブジェクト指向（class）、関数型（lambda）の全てをサポートしています。このような言語を何と呼びますか？",
      "options": [
        "手続き型言語",
        "オブジェクト指向言語",
        "関数型言語",
        "マルチパラダイム言語"
      ],
      "correctAnswer": 3,
      "explanation": "「マルチパラダイム言語」が正しいです。マルチパラダイム言語とは、複数のプログラミングパラダイム（考え方や手法）をサポートするプログラミング言語です。現代のプログラミング言語は、マルチパラダイム言語が主流です。Python の例として、①手続き型：for ループで処理を記述（例：for i in range(10): sum += i）、②オブジェクト指向：class を使ってオブジェクトを定義（例：class Calculator: ...）、③関数型：lambda や map、reduce を使って関数を組み合わせる（例：reduce(lambda x, y: x + y, range(1, 11))）、があります。この問題では、「Python は、手続き型、オブジェクト指向、関数型の全てをサポート」という記述が、マルチパラダイム言語の定義そのものです。プログラマは、問題に応じて最適なパラダイムを選択できます。手続き型言語は手続き型のみをサポートする言語で、C、Pascal が該当します。オブジェクト指向言語はオブジェクト指向のみをサポートする言語で、Smalltalk が該当します。関数型言語は関数型のみをサポートする言語で、Haskell が該当します。現代の主要言語（Python、Java、C++）は、ほとんどがマルチパラダイム言語です。"
    }
  ]
}
