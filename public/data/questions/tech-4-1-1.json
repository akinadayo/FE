{
  "topicId": "tech-4-1-1",
  "title": "システム開発プロセス",
  "questions": [
    {
      "id": "tech-4-1-1-q1",
      "type": "multiple_choice",
      "question": "システム開発プロセスの5つのフェーズを正しい順番に並べたものはどれですか？",
      "options": [
        "要件定義 → プログラミング → システム設計 → テスト → 移行と運用保守",
        "要件定義 → システム設計 → プログラミング → テスト → 移行と運用保守",
        "システム設計 → 要件定義 → プログラミング → テスト → 移行と運用保守",
        "要件定義 → システム設計 → テスト → プログラミング → 移行と運用保守"
      ],
      "correctAnswer": 1,
      "explanation": "「要件定義 → システム設計 → プログラミング → テスト → 移行と運用保守」が正しいです。システム開発プロセスは、①要件定義：ユーザーのニーズを収集し、システムに必要な機能と制約を明確化、②システム設計：要件を実現するための設計（外部設計、内部設計）、③プログラミング：設計書に基づいてプログラムを作成、④テスト：プログラムが正しく動作するか検証、⑤移行と運用保守：本番環境へ移行し、運用開始後の保守、の順で実施されます。この順番により、前のフェーズの成果物が次のフェーズの入力になり、システム開発の品質と効率が確保されます。選択肢①③④は順番が間違っています。"
    },
    {
      "id": "tech-4-1-1-q2",
      "type": "multiple_choice",
      "question": "次のうち、機能要件に該当するものはどれですか？（ECサイトの例）",
      "options": [
        "ページの応答時間は1秒以内",
        "商品検索機能（キーワード、カテゴリ、価格帯で検索できる）",
        "稼働率99.9%（ダウンタイムは年間8.76時間以内）",
        "同時アクセス数1,000人に対応"
      ],
      "correctAnswer": 1,
      "explanation": "「商品検索機能（キーワード、カテゴリ、価格帯で検索できる）」が正しいです。機能要件（Functional Requirements）とは、システムが実現すべき機能のことです。例として、商品検索機能、注文機能、決済機能、管理者機能などがあります。対して、非機能要件（Non-Functional Requirements）は、システムの性能や制約のことで、選択肢①「ページの応答時間は1秒以内」（性能要件）、③「稼働率99.9%」（可用性要件）、④「同時アクセス数1,000人に対応」（性能要件）が該当します。機能要件は「何ができるか」、非機能要件は「どの程度のレベルで動作するか」を定義します。"
    },
    {
      "id": "tech-4-1-1-q3",
      "type": "multiple_choice",
      "question": "次のうち、外部設計の内容として正しいものはどれですか？",
      "options": [
        "データベース設計（ユーザーテーブル、商品テーブルの定義）",
        "画面設計（トップページ、商品一覧ページ、カートページの設計）",
        "モジュール分割（ユーザー管理モジュール、商品管理モジュールの分割）",
        "処理フロー（商品検索の処理手順の設計）"
      ],
      "correctAnswer": 1,
      "explanation": "「画面設計（トップページ、商品一覧ページ、カートページの設計）」が正しいです。外部設計（External Design）とは、ユーザーから見たシステムの仕様を設計することで、「何を作るか」を明確にします。外部設計の主な内容は、画面設計、画面遷移、入出力項目、データ形式などです。対して、選択肢①データベース設計、③モジュール分割、④処理フローは、内部設計（Internal Design）の内容です。内部設計は、システムの内部構造（プログラムの構造）を設計し、「どうやって作るか」を明確にします。外部設計はユーザーと協議しながら進め、内部設計は開発者が技術的な観点から設計します。"
    },
    {
      "id": "tech-4-1-1-q4",
      "type": "multiple_choice",
      "question": "「個々のモジュール（関数、クラス）が設計通りに動作するかを確認するテスト」を何と呼びますか？",
      "options": [
        "単体テスト（Unit Test）",
        "結合テスト（Integration Test）",
        "システムテスト（System Test）",
        "運用テスト（Acceptance Test）"
      ],
      "correctAnswer": 0,
      "explanation": "「単体テスト（Unit Test）」が正しいです。単体テストは、個々のモジュール（関数、クラス）が設計通りに動作するかを確認するテストで、開発者（プログラマ）が実施します。例えば、商品検索関数（search_products）に対して、キーワード「ノートPC」で検索したときに、商品名に「ノートPC」を含む商品が返ってくるかを確認します。選択肢②結合テストは、複数のモジュールを組み合わせたものをテスト、③システムテストは、システム全体が要件定義を満たすかをテスト、④運用テストは、実際の業務で使えるかをユーザーがテスト（受け入れテスト）します。テストは、単体テスト→結合テスト→システムテスト→運用テストの順に実施されます。"
    },
    {
      "id": "tech-4-1-1-q5",
      "type": "multiple_choice",
      "question": "「商品検索が遅い」という顧客の声を受けて、データベースにインデックスを追加して検索速度を改善しました。この保守作業は何に該当しますか？",
      "options": [
        "是正保守（Corrective Maintenance）",
        "適応保守（Adaptive Maintenance）",
        "完全化保守（Perfective Maintenance）",
        "予防保守（Preventive Maintenance）"
      ],
      "correctAnswer": 2,
      "explanation": "「完全化保守（Perfective Maintenance）」が正しいです。完全化保守とは、性能改善や機能追加を行う保守です。この例では、「商品検索が遅い」という問題に対して、データベースにインデックスを追加して検索速度を改善しており、性能改善に該当します。選択肢①是正保守はバグ修正（例: 「商品検索で価格帯を指定すると、検索結果が0件になる」バグを修正）、②適応保守は環境変化への対応（例: クレジットカード決済のAPI仕様が変更 → 決済モジュールを修正）、④予防保守は将来のトラブルを防ぐための改善（例: セキュリティパッチを適用）です。保守には、是正、適応、完全化、予防の4種類があります。"
    },
    {
      "id": "tech-4-1-1-q6",
      "type": "multiple_choice",
      "question": "要件定義が不十分だった場合、開発の途中でどのような問題が発生する可能性が高いですか？",
      "options": [
        "プログラミング言語の選定が難しくなる",
        "必要な機能が抜けていたことが発覚し、大幅な手戻り（やり直し）が発生する",
        "テストの実施が困難になる",
        "開発者のモチベーションが低下する"
      ],
      "correctAnswer": 1,
      "explanation": "「必要な機能が抜けていたことが発覚し、大幅な手戻り（やり直し）が発生する」が正しいです。要件定義は、システム開発の最も重要なフェーズで、「何を作るか」を明確にします。要件定義が不十分だと、①必要な機能が抜けていた → 開発途中で追加が必要になり、大幅な手戻り、②性能が要求を満たさない → システムテストで発覚し、設計から作り直し、③ユーザーの期待と異なるシステムが完成 → 再開発が必要、などの問題が発生します。要件定義では、ユーザーと開発者が密にコミュニケーションを取り、要件を明確化することが重要です。選択肢①③④は要件定義が不十分な場合の直接的な問題ではありません。"
    },
    {
      "id": "tech-4-1-1-q7",
      "type": "multiple_choice",
      "question": "バグの修正コストについて、正しい説明はどれですか？",
      "options": [
        "バグの修正コストは、発見の時期に関係なく一定である",
        "単体テストでバグを発見した場合と、運用テスト（本番稼働後）でバグを発見した場合で、修正コストに100倍以上の差が出ることもある",
        "運用テスト（本番稼働後）でバグを発見した方が、単体テストでバグを発見した場合よりも修正コストが低い",
        "システムテストでバグを発見すれば、修正コストは最小になる"
      ],
      "correctAnswer": 1,
      "explanation": "「単体テストでバグを発見した場合と、運用テスト（本番稼働後）でバグを発見した場合で、修正コストに100倍以上の差が出ることもある」が正しいです。バグの修正コストは、発見が遅れるほど高くなります。単体テストでバグを発見すれば、該当モジュールのみ修正すればよいですが、運用テスト（本番稼働後）でバグを発見すると、大規模な修正が必要になり、コストが100倍以上になることもあります。テストは、単体テスト→結合テスト→システムテスト→運用テストの順に実施し、各段階でバグを発見・修正することで、修正コストを最小化できます。選択肢①③④は間違いです。"
    },
    {
      "id": "tech-4-1-1-q8",
      "type": "multiple_choice",
      "question": "ECサイトの移行作業で、「1週間、旧システムと新ECサイトを並行運用し、新ECサイトで注文を受け付け、旧システムと注文データを比較する」という作業を何と呼びますか？",
      "options": [
        "データ移行",
        "環境構築",
        "並行稼働",
        "本番稼働"
      ],
      "correctAnswer": 2,
      "explanation": "「並行稼働」が正しいです。並行稼働とは、旧システムと新システムを並行運用してデータを比較する作業です。この例では、1週間、旧システムと新ECサイトを並行運用し、新ECサイトで注文を受け付け、旧システムと注文データを比較して、問題がないかを確認します。移行（Migration）には、①データ移行：既存システムのデータを新システムに移行、②環境構築：本番サーバの設定、③並行稼働：旧システムと新システムを並行運用、④本番稼働：新システムに完全移行、の4つの作業があります。選択肢①②④は並行稼働とは異なる移行作業です。"
    },
    {
      "id": "tech-4-1-1-q9",
      "type": "multiple_choice",
      "question": "コーディング規約（Coding Standards）を守ることで得られる効果として、正しくないものはどれですか？",
      "options": [
        "可読性：他の開発者がコードを読みやすくなる",
        "保守性：バグ修正や機能追加がしやすくなる",
        "実行速度：プログラムの実行速度が大幅に向上する",
        "品質：バグの混入を防ぐ"
      ],
      "correctAnswer": 2,
      "explanation": "「実行速度：プログラムの実行速度が大幅に向上する」が正しくないです。コーディング規約（Coding Standards）とは、プログラムコードの記述ルール（変数名・関数名の命名規則、インデント、コメントの記述、1行の文字数制限など）です。コーディング規約を守ることで、①可読性：他の開発者がコードを読みやすくなる、②保守性：バグ修正や機能追加がしやすくなる、③品質：バグの混入を防ぐ、などの効果があります。しかし、コーディング規約を守ることは、プログラムの実行速度の向上に直接的な影響を与えません（実行速度の向上は、アルゴリズムの最適化、データ構造の選択などで実現されます）。選択肢①②④は正しい効果です。"
    },
    {
      "id": "tech-4-1-1-q10",
      "type": "multiple_choice",
      "question": "システム開発のライフサイクル全体のコストのうち、運用保守のコストが占める割合として正しいものはどれですか？",
      "options": [
        "10～20%",
        "30～40%",
        "60～80%",
        "90～100%"
      ],
      "correctAnswer": 2,
      "explanation": "「60～80%」が正しいです。システム開発のライフサイクル全体のコストのうち、運用保守のコストは60～80%を占めると言われています。開発フェーズのコストは20～40%程度で、運用保守のコストの方が圧倒的に高いです。そのため、開発フェーズで品質を高め、運用保守のコストを削減することが重要です。また、運用保守を見越した設計（保守性の高いコード、ドキュメント整備）が求められます。運用保守には、①運用（Operation）：システムの日常的な運用（バックアップ、監視、障害対応）、②保守（Maintenance）：システムの修正や機能追加（是正、適応、完全化、予防保守）、の2つがあります。選択肢①②④は間違いです。"
    }
  ]
}
