{
  "topicId": "tech-2-2-3",
  "title": "システムの信頼性",
  "questions": [
    {
      "id": "tech-2-2-3-q001",
      "type": "multiple_choice",
      "question": "RASISのうち、「R」が表すものはどれか。",
      "options": [
        "可用性(Availability)",
        "信頼性(Reliability)",
        "保守性(Serviceability)",
        "安全性(Security)"
      ],
      "correctAnswer": 1,
      "explanation": "RASIS(ラシス)は、システムの信頼性を評価する5つの指標の頭文字を取ったものです:\n\n【R - Reliability(信頼性)】\n- システムが故障せずに正常に動作し続ける能力\n- 故障の発生しにくさ\n- MTBF(平均故障間隔)で測定\n\n【A - Availability(可用性)】\n- システムが必要なときに利用できる度合い\n- 稼働率で表される\n- MTBF、MTTR から算出\n\n【S - Serviceability(保守性)】\n- 故障時の修理や保守のしやすさ\n- MTTRで測定\n\n【I - Integrity(保全性/完全性)】\n- データの正確性、一貫性を保つ能力\n- データの破損や不整合を防ぐ\n\n【S - Security(安全性/機密性)】\n- 不正アクセスやデータ漏洩からシステムを守る能力\n- 情報セキュリティ\n\nRASISは、システムの品質を総合的に評価するための重要な指標群です。特に信頼性(R)と可用性(A)は基本情報技術者試験で頻出です。"
    },
    {
      "id": "tech-2-2-3-q002",
      "type": "multiple_choice",
      "question": "MTBF(Mean Time Between Failures)の説明として、最も適切なものはどれか。",
      "options": [
        "システムが故障してから修理が完了するまでの平均時間",
        "システムが故障せずに正常に動作する平均時間",
        "システムが稼働している時間の割合",
        "システムの平均寿命"
      ],
      "correctAnswer": 1,
      "explanation": "MTBF(Mean Time Between Failures:平均故障間隔)は、システムが故障してから次の故障が発生するまでの平均時間、つまり正常に動作している平均時間です。\n\n【定義】\nMTBF = 総稼働時間 / 故障回数\n\n【例】\n総稼働時間:10,000時間、故障回数:5回の場合:\nMTBF = 10,000 / 5 = 2,000時間\n→ 平均2,000時間ごとに故障が発生\n\n【意味】\n- 信頼性(Reliability)の指標\n- 値が大きいほど信頼性が高い(故障しにくい)\n- 単位:時間(h)\n\n【MTTRとの違い】\n- **MTBF**:正常動作の平均時間(故障間隔)\n- **MTTR**:修理にかかる平均時間\n\n【稼働率との関係】\n稼働率 = MTBF / (MTBF + MTTR)\n\n【活用】\n- システム選定の判断材料\n- 保守計画の立案\n- 可用性の計算\n- 予防保守のタイミング決定\n\nMTBFは、システムの信頼性を定量的に評価する最も重要な指標の一つです。"
    },
    {
      "id": "tech-2-2-3-q003",
      "type": "multiple_choice",
      "question": "MTTR(Mean Time To Repair)が10時間、MTBF(Mean Time Between Failures)が90時間のシステムの稼働率はどれか。",
      "options": [
        "0.1",
        "0.9",
        "0.99",
        "0.999"
      ],
      "correctAnswer": 1,
      "explanation": "稼働率(Availability)は、システムが正常に稼働している時間の割合を表します。\n\n【稼働率の計算式】\n稼働率 = MTBF / (MTBF + MTTR)\n\nまたは\n\n稼働率 = 稼働時間 / (稼働時間 + 停止時間)\n\n【与えられた値】\n- MTBF = 90時間(正常動作時間)\n- MTTR = 10時間(修理時間)\n\n【計算】\n稼働率 = 90 / (90 + 10)\n      = 90 / 100\n      = 0.9\n      = 90%\n\n【意味】\n稼働率0.9(90%)とは:\n- 全体の90%の時間は正常稼働\n- 10%の時間は故障・修理中\n- 100時間中、90時間稼働、10時間停止\n\n【稼働率の目標例】\n- 一般的な業務システム:0.95〜0.99(95〜99%)\n- ミッションクリティカル:0.999〜0.99999(99.9〜99.999%)\n- 0.99 = 99%(ツーナイン):年間停止時間 約3.65日\n- 0.999 = 99.9%(スリーナイン):年間停止時間 約8.76時間\n- 0.9999 = 99.99%(フォーナイン):年間停止時間 約52.6分\n\n稼働率を向上させるには、MTBFを大きく(故障を減らす)、MTTRを小さく(修理時間を短縮)することが重要です。"
    },
    {
      "id": "tech-2-2-3-q004",
      "type": "multiple_choice",
      "question": "稼働率0.9のシステムを2台直列に接続した場合の全体の稼働率はどれか。",
      "options": [
        "0.81",
        "0.9",
        "0.99",
        "1.8"
      ],
      "correctAnswer": 0,
      "explanation": "システムの接続形態によって稼働率の計算方法が異なります:\n\n【直列システム(シリーズシステム)】\n- どちらか一方でも故障すると全体が停止\n- 稼働率は個々の稼働率の積(掛け算)\n\n全体の稼働率 = R1 × R2 × ... × Rn\n\n【問題の計算】\nシステムA、Bがそれぞれ稼働率0.9で直列接続:\n\n全体の稼働率 = 0.9 × 0.9 = 0.81\n\n【意味】\n- 両方のシステムが稼働している確率:81%\n- どちらかが故障している確率:19%\n- 直列接続では稼働率が低下する\n\n【並列システムとの比較】\nもし同じシステムを並列接続(冗長化)した場合:\n全体の稼働率 = 1 - (1 - R1) × (1 - R2)\n              = 1 - (1 - 0.9) × (1 - 0.9)\n              = 1 - 0.1 × 0.1\n              = 1 - 0.01\n              = 0.99\n\n【直列と並列の違い】\n- **直列**:稼働率が低下する(0.81)\n- **並列**:稼働率が向上する(0.99)\n\n【実例】\n- 直列:Webサーバ → DBサーバ(両方必要)\n- 並列:負荷分散、冗長構成(どちらか稼働すればOK)\n\n直列システムでは、構成要素が増えるほど稼働率が低下するため、重要なシステムでは並列構成(冗長化)が採用されます。"
    },
    {
      "id": "tech-2-2-3-q005",
      "type": "multiple_choice",
      "question": "稼働率0.8のシステムを2台並列に接続した場合の全体の稼働率はどれか。",
      "options": [
        "0.64",
        "0.8",
        "0.96",
        "1.6"
      ],
      "correctAnswer": 2,
      "explanation": "並列システム(パラレルシステム)は、複数のシステムを並列に配置し、どれか1台でも稼働していれば全体が稼働するという冗長構成です。\n\n【並列システムの稼働率計算式】\n全体の稼働率 = 1 - (すべてが故障している確率)\n              = 1 - (1 - R1) × (1 - R2) × ... × (1 - Rn)\n\n【問題の計算】\nシステムA、Bがそれぞれ稼働率0.8で並列接続:\n\n全体の稼働率 = 1 - (1 - 0.8) × (1 - 0.8)\n              = 1 - 0.2 × 0.2\n              = 1 - 0.04\n              = 0.96\n\n【意味】\n- どちらか1台以上が稼働している確率:96%\n- 両方とも故障している確率:4%\n- 並列接続により稼働率が向上(0.8 → 0.96)\n\n【計算の考え方】\n1. システムAの故障率:1 - 0.8 = 0.2(20%)\n2. システムBの故障率:1 - 0.8 = 0.2(20%)\n3. 両方故障する確率:0.2 × 0.2 = 0.04(4%)\n4. どちらか稼働している確率:1 - 0.04 = 0.96(96%)\n\n【冗長化の効果】\n- 1台構成:稼働率 0.8(80%)\n- 2台並列:稼働率 0.96(96%)\n- 3台並列:稼働率 = 1 - (0.2)³ = 1 - 0.008 = 0.992(99.2%)\n\n並列接続(冗長化)は、システムの可用性を大幅に向上させる重要な手法です。"
    },
    {
      "id": "tech-2-2-3-q006",
      "type": "multiple_choice",
      "question": "デュアルシステムの説明として、最も適切なものはどれか。",
      "options": [
        "2台のシステムが同じ処理を並列実行し、結果を照合して信頼性を高める",
        "2台のシステムのうち1台は待機状態で、故障時に切り替える",
        "2台のシステムで処理を分散して性能を向上させる",
        "2台のシステムで異なる業務を並行処理する"
      ],
      "correctAnswer": 0,
      "explanation": "システムの信頼性・可用性を向上させる冗長構成には、いくつかの方式があります:\n\n【デュアルシステム(Dual System)】\n- **構成**:2台のシステムが同一処理を並列実行\n- **動作**:\n  - 両システムが常に同じ処理を実行\n  - 処理結果を相互に照合・比較\n  - 結果が一致しない場合はエラーとして検出\n- **目的**:信頼性向上(フォールトトレラント)\n- **特徴**:\n  - 高い信頼性\n  - 故障検出が即座に可能\n  - コストが高い(2倍のリソース)\n  - 性能向上効果はない\n\n【デュプレックスシステム(Duplex System)】\n- **構成**:主系(現用系)と従系(待機系)の2台\n- **動作**:\n  - 通常は主系が処理を実行\n  - 従系は待機(ホットスタンバイ/コールドスタンバイ)\n  - 主系故障時に従系に切り替え(フェールオーバー)\n- **目的**:可用性向上\n- **種類**:\n  - ホットスタンバイ:待機系も起動状態\n  - コールドスタンバイ:待機系は停止状態\n\n【デュアル vs デュプレックス】\n- **デュアル**:両方稼働、結果照合、信頼性重視\n- **デュプレックス**:主従構成、障害時切替、可用性重視\n\n高い信頼性が要求される金融システムや制御システムでは、デュアルシステムが採用されることがあります。"
    },
    {
      "id": "tech-2-2-3-q007",
      "type": "multiple_choice",
      "question": "フォールトトレラントの説明として、最も適切なものはどれか。",
      "options": [
        "障害が発生しても、システム全体としては正常に動作を継続できる能力",
        "障害の発生を未然に防ぐ能力",
        "障害発生時に安全な状態に移行する能力",
        "障害発生時に機能を縮退して動作を継続する能力"
      ],
      "correctAnswer": 0,
      "explanation": "システムの信頼性・安全性に関する重要な概念:\n\n【フォールトトレラント(Fault Tolerant:耐障害性)】\n- **意味**:障害が発生しても、システム全体としては正常に動作を継続できる能力\n- **手法**:\n  - 冗長化(Redundancy)\n  - デュアルシステム\n  - RAID構成\n  - クラスタリング\n  - 自動フェールオーバー\n- **特徴**:\n  - 部品の故障を許容\n  - サービス中断なし\n  - 高コスト\n- **例**:飛行機の制御システム、金融システム\n\n【フェールセーフ(Fail Safe)】\n- **意味**:障害発生時に、安全な状態に移行する仕組み\n- **手法**:\n  - 異常検出時にシステムを安全側に制御\n  - 緊急停止\n  - デフォルト動作への移行\n- **例**:\n  - 踏切の遮断機(故障時は閉じたまま)\n  - エレベータ(停電時は最寄り階で停止)\n  - ガス漏れ検知器(故障時はガスを遮断)\n\n【フェールソフト(Fail Soft)】\n- **意味**:障害発生時に、機能を縮退しながらも動作を継続\n- **手法**:\n  - 重要度の低い機能を停止\n  - 性能を落として継続\n  - 段階的な機能停止\n- **例**:サーバ負荷増大時に一部機能を制限\n\n【フールプルーフ(Fool Proof)】\n- **意味**:人為的ミスを防ぐ設計\n- **例**:USB端子の形状(逆向きに挿せない)\n\nフォールトトレラントは、ミッションクリティカルなシステムで特に重要な概念です。"
    },
    {
      "id": "tech-2-2-3-q008",
      "type": "multiple_choice",
      "question": "フェールセーフの説明として、最も適切なものはどれか。",
      "options": [
        "障害が発生しても正常に動作を継続する",
        "障害発生時に、安全な状態に移行する",
        "障害発生時に、機能を縮退して動作を継続する",
        "障害の発生を事前に防ぐ"
      ],
      "correctAnswer": 1,
      "explanation": "フェールセーフ(Fail Safe)は、システムや機器に障害が発生した場合、安全側に動作するように設計する考え方です。\n\n【基本概念】\n- 障害発生は避けられないという前提\n- 障害時に人命や財産を守ることを最優先\n- 「安全側」に制御する\n\n【設計原則】\n1. **異常検出時の安全動作**\n   - システムを安全な状態に移行\n   - 危険な動作を停止\n\n2. **フェール時の動作設計**\n   - 開く vs 閉じる → 安全な方を選択\n   - 動く vs 止まる → 安全な方を選択\n\n【具体例】\n\n**踏切の遮断機**\n- 故障時 → 遮断機が下りたまま(閉じる)\n- 理由:電車が来ても安全\n\n**エレベータ**\n- 停電時 → 最寄り階で停止・ドア開放\n- 理由:閉じ込め防止\n\n**信号機**\n- 故障時 → 全方向が赤信号または点滅\n- 理由:衝突事故防止\n\n**原子炉**\n- 異常検出時 → 制御棒挿入(緊急停止)\n- 理由:暴走防止\n\n**ガス検知器**\n- 故障時 → ガス供給を遮断\n- 理由:ガス漏れ・爆発防止\n\n【他の概念との違い】\n- **フォールトトレラント**:故障しても動作継続\n- **フェールセーフ**:故障時は安全側に移行(停止も含む)\n- **フェールソフト**:機能縮退して継続\n\nフェールセーフは、特に人命に関わるシステムで必須の設計思想です。"
    },
    {
      "id": "tech-2-2-3-q009",
      "type": "multiple_choice",
      "question": "フェールソフトの説明として、最も適切なものはどれか。",
      "options": [
        "障害が発生しても、システム全体を停止せず、機能を縮退して動作を継続する",
        "障害発生時に、システムを安全な状態で完全に停止する",
        "障害が発生しても、まったく影響を受けずに動作を継続する",
        "障害の発生を事前に予測して防ぐ"
      ],
      "correctAnswer": 0,
      "explanation": "フェールソフト(Fail Soft)は、システムに障害が発生した場合、機能を段階的に縮退(グレースフル・デグラデーション)させながらも、可能な限り動作を継続する設計思想です。\n\n【基本概念】\n- 完全停止を避ける\n- 重要度に応じて機能を段階的に停止\n- 最低限の機能は維持\n- サービスの継続性を重視\n\n【動作イメージ】\n正常時:100%の機能\n ↓ 障害発生\n縮退時:60%の機能(重要な機能のみ継続)\n ↓ さらに障害発生\n縮退時:30%の機能(最低限の機能のみ)\n ↓ 致命的障害\n停止:0%(完全停止)\n\n【具体例】\n\n**Webサイト**\n- 通常:全機能利用可能\n- 負荷増大時:画像表示を簡素化、アニメーション停止\n- さらに負荷増:動的コンテンツを静的化\n- 限界時:エラーページ表示\n\n**ECサイト**\n- 通常:商品検索、カート、決済すべて可能\n- 障害時:カート機能のみ提供(新規検索は停止)\n- 重度障害:閲覧のみ可能(購入機能停止)\n\n**航空管制システム**\n- 通常:自動制御\n- 障害時:半自動制御(一部手動)\n- 重度障害:完全手動制御\n\n**データベースシステム**\n- 通常:読み書き両方可能\n- 障害時:読み取り専用モード\n\n【メリット】\n- サービスの継続性\n- ユーザへの影響最小化\n- ビジネスの継続\n\n【デメリット】\n- 実装が複雑\n- どの機能を優先するか判断が必要\n\nフェールソフトは、可用性とユーザ体験を重視するシステムで重要です。"
    },
    {
      "id": "tech-2-2-3-q010",
      "type": "multiple_choice",
      "question": "システムの保守性(Serviceability)を向上させる手法として、適切でないものはどれか。",
      "options": [
        "モジュール化設計により、故障部品の交換を容易にする",
        "自己診断機能を組み込み、故障箇所を特定しやすくする",
        "ホットスワップ対応により、システム稼働中に部品交換を可能にする",
        "システムを冗長化し、故障発生時に自動的に切り替える"
      ],
      "correctAnswer": 3,
      "explanation": "保守性(Serviceability / Maintainability)は、システムの保守や修理のしやすさを表す指標です。MTTRと密接に関連しています。\n\n【保守性向上の手法】\n\n**1. モジュール化設計(選択肢1)✓**\n- 部品を独立したモジュールに分割\n- 故障部品の特定が容易\n- 部品交換が簡単\n- 修理時間(MTTR)の短縮\n→ 保守性向上に有効\n\n**2. 自己診断機能(選択肢2)✓**\n- 自動的に異常を検出\n- 故障箇所を特定\n- ログ記録機能\n- リモート診断対応\n→ 保守性向上に有効\n\n**3. ホットスワップ(選択肢3)✓**\n- システム稼働中に部品交換可能\n- ダウンタイム削減\n- RAID、電源ユニット、ファンなどで採用\n→ 保守性向上に有効\n\n**4. システムの冗長化(選択肢4)✗**\n- 故障時の自動切り替え(フェールオーバー)\n- システムの可用性を向上\n- ただし、保守性(修理のしやすさ)そのものは向上しない\n- むしろシステムが複雑化し、保守が困難になる場合も\n→ 可用性向上には有効だが、保守性向上ではない\n\n【保守性を表す指標】\n- **MTTR**(Mean Time To Repair:平均修理時間)\n  - 小さいほど保守性が高い\n\n【その他の保守性向上策】\n- ドキュメントの整備\n- 標準部品の使用\n- アクセスのしやすさ\n- 保守マニュアルの充実\n- リモート保守機能\n\n冗長化は「可用性(Availability)」向上の手法であり、「保守性(Serviceability)」向上の直接的な手法ではありません。"
    }
  ]
}
