{
  "topicId": "tech-2-2-1",
  "title": "システム構成",
  "questions": [
    {
      "id": "tech-2-2-1-q001",
      "type": "multiple_choice",
      "question": "クライアントサーバシステムの説明として、最も適切なものはどれか。",
      "options": [
        "すべての処理とデータをサーバで集中管理するシステム",
        "クライアントが処理やデータ管理を要求し、サーバがそれに応答するシステム",
        "各端末が対等な関係で直接通信するシステム",
        "複数のサーバを並列に接続して処理能力を向上させるシステム"
      ],
      "correctAnswer": 1,
      "explanation": "クライアントサーバシステムは、サービスを要求する側(クライアント)と、サービスを提供する側(サーバ)の役割を明確に分けたシステム構成です。\n\n【特徴】\n- クライアント:ユーザインタフェース、プレゼンテーション処理を担当\n- サーバ:データ管理、業務処理、共有資源の管理を担当\n- ネットワークを介して通信\n- 役割分担によりシステムが効率化\n\n【メリット】\n- データの一元管理が可能\n- セキュリティ管理が容易\n- 保守性が高い\n- クライアント側の負荷が軽減される\n\n【デメリット】\n- サーバに障害が発生すると全体に影響\n- ネットワークトラフィックが増加\n- サーバの負荷が集中する可能性\n\n代表例:Webシステム(ブラウザ=クライアント、Webサーバ=サーバ)、メールシステム、データベースシステムなど"
    },
    {
      "id": "tech-2-2-1-q002",
      "type": "multiple_choice",
      "question": "3層クライアントサーバシステムの構成として、正しいものはどれか。",
      "options": [
        "プレゼンテーション層、アプリケーション層、データ層",
        "入力層、処理層、出力層",
        "クライアント層、ネットワーク層、サーバ層",
        "ユーザ層、管理層、データベース層"
      ],
      "correctAnswer": 0,
      "explanation": "3層クライアントサーバシステム(3-Tier Architecture)は、システムを3つの論理的な層に分離した構成です:\n\n【プレゼンテーション層(Presentation Tier)】\n- ユーザインタフェース(UI)を提供\n- 画面表示、入力受付\n- クライアント側で実行(Webブラウザ、GUIアプリなど)\n\n【アプリケーション層(Application Tier / Business Logic Tier)】\n- 業務ロジック、ビジネスルールの処理\n- データの加工・計算\n- アプリケーションサーバで実行\n- プレゼンテーション層とデータ層の仲介\n\n【データ層(Data Tier)】\n- データの永続化・管理\n- データベース管理システム(DBMS)\n- データベースサーバで実行\n\n【メリット】\n- 各層の独立性が高く、保守性が向上\n- 負荷分散が容易\n- セキュリティの向上(データ層を直接公開しない)\n- スケーラビリティが高い\n\n2層システムに比べて、柔軟性と拡張性が向上します。"
    },
    {
      "id": "tech-2-2-1-q003",
      "type": "multiple_choice",
      "question": "シンクライアントの説明として、最も適切なものはどれか。",
      "options": [
        "高性能なCPUと大容量ストレージを搭載したクライアント端末",
        "必要最小限の機能のみを持ち、処理の大部分をサーバ側で行うクライアント端末",
        "無線接続専用のクライアント端末",
        "複数のOSを同時に実行できるクライアント端末"
      ],
      "correctAnswer": 1,
      "explanation": "シンクライアント(Thin Client)は、クライアント端末の機能を最小限に抑え、アプリケーション実行やデータ保存などの処理をサーバ側で行うシステム構成です。\n\n【特徴】\n- クライアント端末:最小限のハードウェア、OSのみ\n- サーバ側:アプリケーション実行、データ保存、処理を担当\n- 端末にはデータを保存しない\n- 画面転送技術を使用\n\n【メリット】\n- セキュリティ向上(端末からの情報漏洩リスク低減)\n- 管理コスト削減(ソフトウェア更新はサーバ側のみ)\n- 端末の導入・運用コストが低い\n- 端末の故障による影響が小さい\n- ライセンス管理が容易\n\n【デメリット】\n- サーバやネットワークに障害が発生すると業務停止\n- ネットワーク負荷が増大\n- オフライン作業ができない\n- サーバの投資コストが高い\n\n対比:ファットクライアント(Fat Client)は、高性能な端末で処理を行う従来の形態です。"
    },
    {
      "id": "tech-2-2-1-q004",
      "type": "multiple_choice",
      "question": "ピアツーピア(P2P)ネットワークの説明として、最も適切なものはどれか。",
      "options": [
        "専用のサーバを中心に、クライアントが接続する形態",
        "各コンピュータが対等な関係で、互いにクライアントにもサーバにもなる形態",
        "複数のサーバを階層的に配置する形態",
        "クライアントとサーバの中間にプロキシサーバを配置する形態"
      ],
      "correctAnswer": 1,
      "explanation": "ピアツーピア(P2P:Peer to Peer)は、各コンピュータ(ピア)が対等な関係で直接通信し、互いにクライアントにもサーバにもなるネットワーク形態です。\n\n【特徴】\n- 中央サーバが不要(または最小限)\n- 各ピアがリソースを共有\n- 分散型のネットワーク構造\n- スケーラビリティが高い\n\n【種類】\n- 純粋型P2P:完全に分散(中央サーバなし)\n- ハイブリッド型P2P:索引サーバを使用\n\n【メリット】\n- サーバの負荷が分散される\n- 一部のノードが停止してもシステム全体は動作\n- リソースの有効活用\n- 拡張性が高い\n\n【デメリット】\n- セキュリティ管理が困難\n- トラフィック制御が難しい\n- 各ピアの負荷が不均一になる可能性\n- データの一貫性確保が困難\n\n【用途例】\n- ファイル共有(BitTorrent)\n- 暗号通貨(Bitcoin)\n- 通信アプリ(Skype)\n- 分散ストレージ"
    },
    {
      "id": "tech-2-2-1-q005",
      "type": "multiple_choice",
      "question": "クラスタリングシステムの主な目的として、最も適切なものはどれか。",
      "options": [
        "データのバックアップを自動化する",
        "複数のコンピュータを連携させて可用性や処理能力を向上させる",
        "ネットワークのセキュリティを強化する",
        "仮想マシンを複数稼働させる"
      ],
      "correctAnswer": 1,
      "explanation": "クラスタリング(Clustering)は、複数のコンピュータ(ノード)を連携させて、1つのシステムとして動作させる技術です。\n\n【目的と種類】\n\n1. **HAクラスタ(High Availability Cluster:高可用性)**\n- 可用性(稼働率)の向上が目的\n- アクティブ・スタンバイ構成\n- 障害時に待機系が引き継ぐ(フェールオーバー)\n\n2. **負荷分散クラスタ(Load Balancing Cluster)**\n- 処理能力の向上が目的\n- 複数ノードで負荷を分散\n- スループット向上\n\n3. **HPCクラスタ(High Performance Computing)**\n- 計算能力の向上が目的\n- 並列処理により高速計算\n- 科学技術計算などに使用\n\n【メリット】\n- 可用性の向上(システム停止時間の削減)\n- 性能・処理能力の向上\n- スケーラビリティ(ノード追加で拡張可能)\n- コスト効率(汎用サーバの組み合わせ)\n\n【デメリット】\n- 管理の複雑化\n- ノード間の通信オーバーヘッド"
    },
    {
      "id": "tech-2-2-1-q006",
      "type": "multiple_choice",
      "question": "グリッドコンピューティングの説明として、最も適切なものはどれか。",
      "options": [
        "地理的に分散した複数のコンピュータをネットワークで結び、大規模な計算資源として利用する技術",
        "1台のコンピュータ内で複数の仮想マシンを動作させる技術",
        "クライアントとサーバを3層に分離する技術",
        "複数のストレージを仮想的に1つに見せる技術"
      ],
      "correctAnswer": 0,
      "explanation": "グリッドコンピューティング(Grid Computing)は、地理的に分散した異種の計算機資源(CPU、ストレージ、ネットワークなど)をネットワークで結合し、仮想的な1つの高性能コンピュータとして利用する技術です。\n\n【特徴】\n- 地理的に分散した資源の統合\n- 異種システムの統合(OS、ハードウェアが異なっても可)\n- 大規模な計算能力の実現\n- リソースの共有と協調利用\n- インターネット経由での接続\n\n【クラスタリングとの違い】\n- クラスタ:同一拠点、同種システム、密結合\n- グリッド:分散拠点、異種システム可、疎結合\n\n【用途】\n- 科学技術計算(気象予測、創薬、物理シミュレーション)\n- ビッグデータ解析\n- レンダリング処理\n- 暗号解読\n\n【メリット】\n- 遊休リソースの有効活用\n- 低コストで大規模計算が可能\n- 柔軟なリソース配分\n\n【課題】\n- セキュリティ管理\n- リソース管理の複雑さ\n- ネットワーク遅延の影響"
    },
    {
      "id": "tech-2-2-1-q007",
      "type": "multiple_choice",
      "question": "スケールアップとスケールアウトの説明として、正しい組み合わせはどれか。",
      "options": [
        "スケールアップ:サーバ台数を増やす、スケールアウト:サーバの性能を上げる",
        "スケールアップ:サーバの性能を上げる、スケールアウト:サーバ台数を増やす",
        "スケールアップ:ストレージ容量を増やす、スケールアウト:ネットワーク帯域を増やす",
        "スケールアップ:仮想化を導入する、スケールアウト:クラウド化する"
      ],
      "correctAnswer": 1,
      "explanation": "システムの処理能力を向上させる方法として、スケールアップとスケールアウトがあります:\n\n【スケールアップ(Scale Up / Vertical Scaling:垂直拡張)】\n- **方法**:既存のサーバの性能を向上させる\n- **具体例**:\n  - CPUを高性能なものに交換\n  - メモリ容量を増設\n  - ストレージを高速なものに交換\n- **メリット**:\n  - システム構成がシンプル\n  - 管理が容易\n  - アプリケーション改修が不要な場合が多い\n- **デメリット**:\n  - ハードウェアの性能上限がある\n  - コストが高い(性能向上とともに価格が急増)\n  - 単一障害点(SPOF)のリスク\n\n【スケールアウト(Scale Out / Horizontal Scaling:水平拡張)】\n- **方法**:サーバ台数を増やして負荷を分散\n- **具体例**:\n  - Webサーバを複数台並列配置\n  - ロードバランサで負荷分散\n- **メリット**:\n  - 柔軟な拡張が可能\n  - コスト効率が良い(汎用サーバの利用)\n  - 可用性が向上(冗長構成)\n- **デメリット**:\n  - システムが複雑化\n  - アプリケーションの対応が必要な場合がある\n  - 管理コスト増加"
    },
    {
      "id": "tech-2-2-1-q008",
      "type": "multiple_choice",
      "question": "次のシステム構成のうち、可用性(Availability)を最も高めることができるものはどれか。",
      "options": [
        "高性能なサーバ1台で集中処理する",
        "複数のサーバで負荷を分散し、1台が故障しても他のサーバで処理を継続できるようにする",
        "処理能力の高いCPUを搭載したサーバを使用する",
        "大容量のメモリを搭載したサーバを使用する"
      ],
      "correctAnswer": 1,
      "explanation": "可用性(Availability)とは、システムが正常に稼働している時間の割合(稼働率)を示す指標です。可用性を高めるには、冗長化(Redundancy)が重要です。\n\n【可用性向上の手法】\n\n1. **冗長化**\n- 複数のサーバを用意(アクティブ・スタンバイ、アクティブ・アクティブ)\n- 障害時の自動切り替え(フェールオーバー)\n- RAID構成(ストレージの冗長化)\n- 電源の冗長化(UPS、二重電源)\n\n2. **負荷分散**\n- 複数サーバで処理を分散\n- 1台が故障しても他のサーバで継続\n- ロードバランサの使用\n\n3. **クラスタリング**\n- HAクラスタ構成\n- 高可用性の実現\n\n【単一サーバの問題点】\n- SPOF(Single Point of Failure:単一障害点)となる\n- 障害時にシステム全体が停止\n- 高性能でも可用性は向上しない\n\n選択肢1、3、4は性能向上には寄与しますが、可用性向上には直接つながりません。可用性向上には冗長化が必須です。"
    },
    {
      "id": "tech-2-2-1-q009",
      "type": "multiple_choice",
      "question": "2層クライアントサーバシステムの説明として、最も適切なものはどれか。",
      "options": [
        "クライアント側でプレゼンテーション処理と業務処理を行い、サーバ側でデータ管理を行う",
        "クライアント側でプレゼンテーション処理のみ行い、サーバ側で業務処理とデータ管理を行う",
        "すべての処理をクライアント側で行う",
        "プレゼンテーション、業務処理、データ管理を3つの層に分離する"
      ],
      "correctAnswer": 0,
      "explanation": "2層クライアントサーバシステム(2-Tier Architecture)は、システムを2つの層に分けた構成です:\n\n【クライアント層(ファットクライアント)】\n- プレゼンテーション処理(画面表示、入力)\n- 業務ロジック(アプリケーション処理)\n- ビジネスルールの実装\n\n【サーバ層】\n- データ管理(データベース)\n- データの永続化\n- トランザクション管理\n\n【特徴】\n- クライアント側に業務ロジックを配置\n- データベースサーバとクライアントの2層構成\n- クライアント側の処理が多い\n\n【メリット】\n- システム構成がシンプル\n- 開発が比較的容易\n- レスポンスが速い(ローカルで処理)\n\n【デメリット】\n- クライアント側の負荷が大きい\n- 業務ロジック変更時に全クライアントの更新が必要\n- スケーラビリティが低い\n- セキュリティ管理が難しい(クライアントから直接DB接続)\n\n現在では、より柔軟な3層システムが主流となっています。2層システムは小規模なシステムや、特定の用途で使用されます。"
    },
    {
      "id": "tech-2-2-1-q010",
      "type": "multiple_choice",
      "question": "分散処理システムの説明として、適切でないものはどれか。",
      "options": [
        "複数のコンピュータが連携して処理を実行する",
        "ネットワークで接続された複数の拠点で処理を分担できる",
        "1台のコンピュータですべての処理を集中管理する",
        "負荷分散や信頼性向上に有効である"
      ],
      "correctAnswer": 2,
      "explanation": "分散処理システム(Distributed Processing System)は、ネットワークで接続された複数のコンピュータが連携・協調して処理を行うシステムです。\n\n【特徴】\n- 複数のコンピュータ(ノード)が協調動作\n- ネットワークを介した通信\n- 処理やデータを分散配置\n- 各ノードが自律的に動作\n\n【種類】\n- クライアントサーバシステム\n- P2Pシステム\n- クラスタリング\n- グリッドコンピューティング\n- クラウドコンピューティング\n\n【メリット】\n- 負荷分散(処理能力の向上)\n- 信頼性向上(冗長構成により可用性向上)\n- 拡張性(ノード追加で拡張可能)\n- 地理的分散(災害対策)\n- リソースの有効活用\n\n【デメリット】\n- システムの複雑化\n- ネットワーク依存度が高い\n- データの一貫性確保が困難\n- セキュリティ管理が複雑\n- 通信オーバーヘッド\n\n「1台のコンピュータですべての処理を集中管理する」は集中処理システムの特徴であり、分散処理システムとは対照的な構成です。"
    }
  ]
}
