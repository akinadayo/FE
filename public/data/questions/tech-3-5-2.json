{
  "topicId": "tech-3-5-2",
  "title": "脅威と対策",
  "questions": [
    {
      "id": "tech-3-5-2-q1",
      "type": "multiple_choice",
      "question": "ワームとウイルスの最も重要な違いはどれですか？",
      "options": [
        "ワームは自己増殖するが、ウイルスは自己増殖しない",
        "ワームは単独で存在し自動的に拡散するが、ウイルスは他のプログラムに寄生してユーザーの操作で拡散する",
        "ワームはファイルを暗号化するが、ウイルスはファイルを削除する",
        "ワームはネットワーク経由で感染するが、ウイルスはUSBメモリ経由でしか感染しない"
      ],
      "correctAnswer": 1,
      "explanation": "「ワームは単独で存在し自動的に拡散するが、ウイルスは他のプログラムに寄生してユーザーの操作で拡散する」が正しいです。ウイルスとワームの最も重要な違いは、拡散方法です。ウイルスは、他のプログラム（宿主）に寄生し、ユーザーが感染したファイルを実行しない限り活動しません。一方、ワームは単独で存在し、ネットワークの脆弱性を突いて自動的に感染・拡散します。ユーザーの操作なしに、短時間で大量のPCに感染するため、被害が急速に広がるのが特徴です。例えば、2017年のWannaCryランサムウェアは、ワームの機能を持ち、150カ国20万台以上のPCに数時間で感染しました。選択肢①はウイルスも自己増殖する点で誤り、③④は両者の本質的な違いではありません。"
    },
    {
      "id": "tech-3-5-2-q2",
      "type": "multiple_choice",
      "question": "ランサムウェア攻撃から企業を守るための最も重要な対策はどれですか？",
      "options": [
        "ウイルス対策ソフトを最新の状態に保つ",
        "ネットワークから切り離したオフラインバックアップを定期的に取得する",
        "全社員に対して、メールの添付ファイルを開かないよう教育する",
        "ファイアウォールを設置し、外部からの不正アクセスを遮断する"
      ],
      "correctAnswer": 1,
      "explanation": "「ネットワークから切り離したオフラインバックアップを定期的に取得する」が正しいです。ランサムウェア攻撃では、全てのファイルが暗号化され、ネットワークに接続されたバックアップも同時に暗号化されてしまいます。オフラインバックアップ（外付けHDD、テープメディア、クラウドの世代管理バックアップなど、ネットワークから切り離したバックアップ）があれば、ランサムウェアに感染してもデータを復元できます。近年の標的型ランサムウェア攻撃では、攻撃者がバックアップサーバも調査し、バックアップを削除してから暗号化するケースが増えています。選択肢①③④も重要な対策ですが、万が一感染した場合の最後の砦となるのはオフラインバックアップです。また、バックアップからの復元訓練も定期的に実施し、いざという時に確実に復元できるようにしておくことが重要です。"
    },
    {
      "id": "tech-3-5-2-q3",
      "type": "multiple_choice",
      "question": "次のパスワードのうち、総当たり攻撃に最も強いものはどれですか？（1秒に100万回試行できる場合の解読時間を考慮）",
      "options": [
        "8桁の数字のみ（例: 12345678）",
        "8桁の英小文字のみ（例: password）",
        "8桁の英大小文字+数字（例: Passw0rd）",
        "8桁の英大小文字+数字+記号（例: P@ssw0rd）"
      ],
      "correctAnswer": 3,
      "explanation": "「8桁の英大小文字+数字+記号（例: P@ssw0rd）」が正しいです。パスワードの強度は、使用できる文字の種類と桁数で決まります。①8桁の数字（10種類）：10^8 = 1億通り → 約1.7分で解読、②8桁の英小文字（26種類）：26^8 = 約2,088億通り → 約6.6年で解読、③8桁の英大小文字+数字（62種類）：62^8 = 約218兆通り → 約691万年で解読、④8桁の英大小文字+数字+記号（94種類）：94^8 = 約6京通り → 約196億年で解読、となります。選択肢④が最も強力です。ただし、実際には「Password123!」のような一般的な単語に数字・記号を追加したパスワードは、辞書攻撃で簡単に破られます。「P@ssw0rd」ではなく、「xQ7#mK9$wL2@」のようなランダムな文字列が理想的です。また、パスワードは12文字以上にすることが推奨されます（8文字では将来的に総当たり攻撃で破られる可能性があります）。"
    },
    {
      "id": "tech-3-5-2-q4",
      "type": "multiple_choice",
      "question": "パスワードリスト攻撃を防ぐために、ユーザーが実施すべき最も効果的な対策はどれですか？",
      "options": [
        "複雑なパスワード（8文字以上、英数字記号混在）を設定する",
        "サイトごとに異なるパスワードを使用する",
        "定期的にパスワードを変更する（3ヶ月ごと）",
        "二要素認証（パスワード + 指紋認証）を有効化する"
      ],
      "correctAnswer": 1,
      "explanation": "「サイトごとに異なるパスワードを使用する」が正しいです。パスワードリスト攻撃は、他サイトから流出したID・パスワードのリストを使って、別のサイトへの不正ログインを試みる攻撃です。多くのユーザーが複数のサイトで同じパスワードを使い回しているため、1つのサイトから流出したパスワードで、銀行やECサイトなど他のサイトにも不正ログインされてしまいます。サイトごとに異なるパスワードを使用すれば、1つのサイトから流出しても、他のサイトは安全です。パスワード管理ツール（1Password、LastPass、Bitwardenなど）を活用すれば、サイトごとに異なる複雑なパスワードを簡単に管理できます。選択肢①③も重要ですが、パスワードリスト攻撃に対しては効果が限定的です（どれだけ複雑でも、流出すれば使い回していれば危険）。選択肢④の多要素認証も非常に効果的で、併用することでさらにセキュリティが向上します（パスワードが流出しても、ワンタイムパスワードで保護）。"
    },
    {
      "id": "tech-3-5-2-q5",
      "type": "multiple_choice",
      "question": "ソーシャルエンジニアリングの一種である「トラッシング」とは何ですか？",
      "options": [
        "IT部を装って電話し、パスワードを聞き出す",
        "企業のゴミ箱から捨てられた書類を回収し、情報を収集する",
        "宅配業者を装って社員と一緒に入室し、オフィス内を探索する",
        "後ろから覗き見して、パスワード入力を盗み見る"
      ],
      "correctAnswer": 1,
      "explanation": "「企業のゴミ箱から捨てられた書類を回収し、情報を収集する」が正しいです。トラッシング（Trashing）は、企業のゴミ箱から、捨てられた書類（社員名、電話番号、システム名、メモ、印刷ミスの資料など）を回収し、情報を収集する攻撃手法です。攻撃者は、収集した情報を使って、社員になりすましてヘルプデスクに電話し、パスワードリセットを依頼したり、標的型攻撃メールを作成したりします。対策として、機密情報が記載された書類は、必ずシュレッダーにかけてから廃棄する必要があります。クロスカット方式（縦横に細かく裁断）のシュレッダーを使用し、復元を困難にしましょう。選択肢①はなりすまし電話、③はテイルゲーティング（共連れ）、④はショルダーハッキング（覗き見）という、それぞれ別のソーシャルエンジニアリング手法です。"
    },
    {
      "id": "tech-3-5-2-q6",
      "type": "multiple_choice",
      "question": "DDoS攻撃（分散DoS攻撃）において、攻撃者が使用する「ボットネット」とは何ですか？",
      "options": [
        "攻撃者が作成した自動攻撃プログラム",
        "マルウェアに感染させた複数のPCを遠隔操作するネットワーク",
        "DDoS攻撃を検知・遮断するセキュリティシステム",
        "大量のアクセスを分散処理するサーバ群"
      ],
      "correctAnswer": 1,
      "explanation": "「マルウェアに感染させた複数のPCを遠隔操作するネットワーク」が正しいです。ボットネット（Botnet）は、マルウェアに感染させた多数のPC（ボット）を遠隔操作するネットワークです。攻撃者は、①マルウェアをばらまいて多数のPCを感染させる、②感染したPC（ボット）を遠隔操作できるようにする、③攻撃者が指令サーバ（C&Cサーバ: Command and Control Server）からボットに指令を送る、④全てのボットが一斉に特定のWebサイトにアクセスし、DDoS攻撃を実行する、という流れでDDoS攻撃を行います。例えば、10万台のボットが同時にアクセスすると、Webサーバは処理能力を超えてダウンします。ボットネットは、DDoS攻撃だけでなく、スパムメールの送信、仮想通貨のマイニング（PC資源を不正利用）、他のマルウェアの配布などにも使われます。ユーザーのPCがボットになっていても、普段は正常に動作するため、気づかないことが多いです。"
    },
    {
      "id": "tech-3-5-2-q7",
      "type": "multiple_choice",
      "question": "標的型攻撃（APT）において、攻撃者が企業ネットワーク内で実行する「横展開（Lateral Movement）」とは何ですか？",
      "options": [
        "1台のPCに侵入後、ネットワーク内の他のPCやサーバに感染を拡大させること",
        "複数の脆弱性を同時に悪用して、短時間で大量のPCに感染させること",
        "企業の複数の拠点（東京本社、大阪支社など）に同時に攻撃を仕掛けること",
        "攻撃の痕跡を消すために、ログファイルを横方向にずらして隠蔽すること"
      ],
      "correctAnswer": 0,
      "explanation": "「1台のPCに侵入後、ネットワーク内の他のPCやサーバに感染を拡大させること」が正しいです。横展開（Lateral Movement）は、標的型攻撃において、攻撃者が最初に侵入した1台のPCから、ネットワーク内の他のPCやサーバに感染を拡大させる手法です。攻撃の流れは、①社員のPC（山田さんのPC）にフィッシングメールでマルウェアを感染させる、②攻撃者が山田さんのPCを遠隔操作し、ネットワーク内を探索、③山田さんのPCから、他の社員のPC（佐藤さん、田中さんのPC）に侵入（横展開）、④管理者権限を持つPCに侵入し、権限を奪取（権限昇格）、⑤ファイルサーバ、データベースサーバに侵入し、機密情報を窃取、という流れです。横展開により、攻撃者はネットワーク内を自由に移動し、重要なサーバにアクセスできます。対策として、ネットワークのセグメント化（重要なサーバを別セグメントに隔離）、最小権限の原則（社員には必要最小限の権限のみ付与）、ネットワーク監視（異常なアクセスの検知）が重要です。"
    },
    {
      "id": "tech-3-5-2-q8",
      "type": "multiple_choice",
      "question": "ゼロデイ攻撃に対する最も効果的な対策はどれですか？",
      "options": [
        "ソフトウェアを最新の状態に保つ（セキュリティパッチを適用）",
        "使用していないソフトウェアはアンインストールし、攻撃対象を減らす",
        "ウイルス対策ソフトで定期的にスキャンする",
        "ファイアウォールで外部からの不正アクセスを遮断する"
      ],
      "correctAnswer": 1,
      "explanation": "「使用していないソフトウェアはアンインストールし、攻撃対象を減らす」が正しいです。ゼロデイ攻撃は、ソフトウェアの脆弱性が公開される前（パッチが提供される前）に、その脆弱性を悪用する攻撃です。パッチが存在しないため、通常のセキュリティ対策（選択肢①③④）では完全に防ぐことができません。最も効果的な対策は、使用していないソフトウェアをアンインストールし、攻撃対象を減らすことです。例えば、Adobe Flash Playerは過去に多数のゼロデイ脆弱性が発見されましたが、現在はサポート終了しており、使用していない場合はアンインストールすべきです。Java、Silverlightなど、不要なプラグインも削除しましょう。選択肢①も重要ですが、ゼロデイ攻撃の時点ではパッチが存在しないため、完全には防げません（パッチ公開後、速やかに適用することで被害を最小化できます）。その他の対策として、IDS/IPS（侵入検知・防止システム）で異常な通信を検知、仮想環境（サンドボックス）で不審なファイルを実行、重要なシステムはネットワークから隔離、などがあります。"
    },
    {
      "id": "tech-3-5-2-q9",
      "type": "multiple_choice",
      "question": "次のSQL文のうち、SQLインジェクション攻撃を防ぐために最も安全なものはどれですか？（ユーザーが入力したuser_idとpasswordでログイン認証を行う場合）",
      "options": [
        "sql = \"SELECT * FROM users WHERE user_id = '\" + user_id + \"' AND password = '\" + password + \"'\"",
        "sql = \"SELECT * FROM users WHERE user_id = \" + user_id + \" AND password = \" + password",
        "sql = \"SELECT * FROM users WHERE user_id = ? AND password = ?\" を実行し、パラメータとして user_id と password を渡す",
        "sql = \"SELECT * FROM users WHERE user_id LIKE '%\" + user_id + \"%' AND password = '\" + password + \"'\""
      ],
      "correctAnswer": 2,
      "explanation": "「sql = \"SELECT * FROM users WHERE user_id = ? AND password = ?\" を実行し、パラメータとして user_id と password を渡す」が正しいです。これはプレースホルダ（パラメータ化クエリ）と呼ばれる手法で、SQLインジェクション攻撃を防ぐ最も安全な方法です。プレースホルダでは、SQL文とデータを分離し、データ部分は自動的にエスケープ（特殊文字を無害化）されます。例えば、攻撃者が user_id に `admin' --` を入力しても、`admin' --` という文字列として扱われ、SQL文の構造が変わらないため、攻撃は失敗します。選択肢①は最も危険で、ユーザー入力をそのままSQL文に連結しているため、SQLインジェクション攻撃を受けやすいです（攻撃者が `admin' --` を入力すると、`SELECT * FROM users WHERE user_id = 'admin' --' AND password = 'anything'` となり、パスワードチェックが無視されます）。選択肢②は引用符がないため、さらに危険です。選択肢④はLIKE演算子を使っており、攻撃者がワイルドカード（%、_）を使って不正な検索ができるため、不適切です。"
    },
    {
      "id": "tech-3-5-2-q10",
      "type": "multiple_choice",
      "question": "CSRF（クロスサイトリクエストフォージェリ）攻撃を防ぐために、Webアプリケーションが実装すべき最も効果的な対策はどれですか？",
      "options": [
        "全ての入力値をHTMLエスケープし、特殊文字を無害化する",
        "各リクエストに一意のCSRFトークンを付与し、サーバ側で検証する",
        "クッキーにHTTPOnlyフラグを設定し、JavaScriptからのアクセスを禁止する",
        "HTTPS（SSL/TLS）を使用し、通信を暗号化する"
      ],
      "correctAnswer": 1,
      "explanation": "「各リクエストに一意のCSRFトークンを付与し、サーバ側で検証する」が正しいです。CSRF攻撃は、ユーザーがログイン中のサイトに対して、攻撃者が用意したリンクやフォームから、意図しない操作を実行させる攻撃です。CSRFトークン（ランダムな文字列）を各リクエストに付与し、サーバ側でトークンが正しいか検証することで、CSRF攻撃を防げます。例えば、送金フォームに `<input type=\"hidden\" name=\"csrf_token\" value=\"ランダムな文字列\">` を追加し、サーバ側でトークンが正しいか確認します。攻撃者は、CSRFトークンを知らないため、罠のページから送信されたリクエストは、トークンが不正として拒否されます。選択肢①はXSS攻撃の対策、③はセッションハイジャック（XSS経由）の対策、④は盗聴の対策です。その他のCSRF対策として、②クッキーにSameSite属性を設定（クロスサイトからのリクエストでクッキーを送信しない）、③重要な操作には、パスワードの再入力を要求、などがあります。CSRFトークンとSameSite属性を併用することで、より強固な防御が可能です。"
    }
  ]
}
