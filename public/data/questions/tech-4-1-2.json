{
  "topicId": "tech-4-1-2",
  "title": "開発手法",
  "questions": [
    {
      "id": "tech-4-1-2-q1",
      "type": "multiple_choice",
      "question": "ウォーターフォールモデルの欠点として正しいものはどれですか？",
      "options": [
        "各フェーズの成果物が明確で、進捗管理がしやすい",
        "開発途中で要件変更が発生すると、前のフェーズに戻る必要があり、コストが大きい（手戻り）",
        "各フェーズでレビューを実施し、品質を確保できる",
        "大規模プロジェクトでも、計画的に進められる"
      ],
      "correctAnswer": 1,
      "explanation": "「開発途中で要件変更が発生すると、前のフェーズに戻る必要があり、コストが大きい（手戻り）」が正しいです。ウォーターフォールモデルは、システム開発のフェーズ（要件定義→設計→プログラミング→テスト→移行）を順番に実施し、前のフェーズが完了してから次のフェーズに進む開発手法です。この特性により、開発途中で要件変更が発生すると、前のフェーズに戻って作り直す必要があり、コストが大きくなります（手戻り）。また、実際の動作を確認できるのがテストフェーズなので、顧客が「イメージと違った」と感じるリスクもあります。選択肢①③④はウォーターフォールモデルの利点です。"
    },
    {
      "id": "tech-4-1-2-q2",
      "type": "multiple_choice",
      "question": "次のプロジェクトのうち、ウォーターフォールモデルが最も適しているものはどれですか？",
      "options": [
        "スタートアップが開発する新しいSNSサービス（要件が不明確で、市場の反応を見ながら機能を追加したい）",
        "銀行の勘定系システム（預金、振込などの業務は長年変わらず、要件が明確で、バグが許されない）",
        "ECサイトのUI設計（顧客のフィードバックを得ながら、デザインを改善したい）",
        "Webアプリケーション（1日に何度もリリースして、ユーザーの反応を早く得たい）"
      ],
      "correctAnswer": 1,
      "explanation": "「銀行の勘定系システム（預金、振込などの業務は長年変わらず、要件が明確で、バグが許されない）」が正しいです。ウォーターフォールモデルが適したプロジェクトは、①要件が明確で、変更が少ないプロジェクト、②品質重視で、バグが許されないプロジェクト、③大規模プロジェクトで、計画的に進める必要があるプロジェクト、です。銀行の勘定系システムは、業務が長年変わらないため要件が明確で、バグが許されないため品質重視であり、ウォーターフォールモデルに最適です。選択肢①スタートアップの新サービスはアジャイル開発、③ECサイトのUI設計はプロトタイピングモデル、④Webアプリケーションの頻繁なリリースはDevOps（CI/CD）が適しています。"
    },
    {
      "id": "tech-4-1-2-q3",
      "type": "multiple_choice",
      "question": "プロトタイピングモデルの利点として正しいものはどれですか？",
      "options": [
        "開発期間が短く、コストが低い",
        "早期にフィードバックを得られるため、顧客の期待と開発の方向性のズレを防ぐことができる",
        "ドキュメントが充実しており、保守がしやすい",
        "要件が明確なプロジェクトに適している"
      ],
      "correctAnswer": 1,
      "explanation": "「早期にフィードバックを得られるため、顧客の期待と開発の方向性のズレを防ぐことができる」が正しいです。プロトタイピングモデルとは、開発の初期段階で、プロトタイプ（試作品）を作成し、顧客にデモを見せて、フィードバックを得ながら開発を進める手法です。利点は、①早期にフィードバックを得られる → 顧客の期待と開発の方向性のズレを防ぐ、②UI/UX を顧客と一緒に作り上げられる → 顧客満足度が高い、です。プロトタイピングモデルは、要件が不明確なプロジェクトや、UI/UX重視のプロジェクト（ECサイトのUI設計など）に適しています。選択肢①はプロトタイプ作成に時間がかかるため誤り、③④も該当しません。"
    },
    {
      "id": "tech-4-1-2-q4",
      "type": "multiple_choice",
      "question": "スパイラルモデルの特徴として正しいものはどれですか？",
      "options": [
        "「計画→リスク分析→開発→評価」のサイクル（スパイラル）を繰り返し、リスクを早期に発見・対策できる",
        "短期間（1～4週間）のイテレーションで、「計画→開発→テスト→リリース」を繰り返す",
        "フェーズを順番に実施し、前のフェーズが完了してから次のフェーズに進む",
        "開発と運用を密に連携させ、CI/CDパイプラインで自動化する"
      ],
      "correctAnswer": 0,
      "explanation": "「「計画→リスク分析→開発→評価」のサイクル（スパイラル）を繰り返し、リスクを早期に発見・対策できる」が正しいです。スパイラルモデルとは、ウォーターフォールモデルとプロトタイピングモデルを組み合わせた開発手法で、リスク分析を重視します。各サイクルで、①計画：開発する機能を決定、②リスク分析：リスク（センサーの誤差、通信エラー）を分析、③開発：プロトタイプを作成、④評価：顧客にデモを見せ、フィードバックを得る、を繰り返します。スパイラルモデルは、大規模で複雑なプロジェクトや、リスクが高いプロジェクト（航空機の制御システムなど）に適しています。選択肢②はアジャイル開発、③はウォーターフォールモデル、④はDevOpsです。"
    },
    {
      "id": "tech-4-1-2-q5",
      "type": "multiple_choice",
      "question": "アジャイル開発の利点として正しくないものはどれですか？",
      "options": [
        "変更に柔軟に対応できる（市場の反応を見ながら、優先度を変更できる）",
        "早期にリリースできる（2週間ごとに動作するソフトウェアをリリース）",
        "全体の完成時期が明確で、計画的な進捗管理がしやすい",
        "顧客満足度が高い（顧客のフィードバックを常に反映）"
      ],
      "correctAnswer": 2,
      "explanation": "「全体の完成時期が明確で、計画的な進捗管理がしやすい」が正しくないです。これはアジャイル開発の欠点の1つです。アジャイル開発では、要件を小さな単位に分割し、優先度の高い機能から順番に開発します。要件が変わるため、全体の完成時期が見えにくく、計画的な進捗管理が難しいという欠点があります。アジャイル開発の利点は、①変更に柔軟に対応できる、②早期にリリースできる、③顧客満足度が高い、です。アジャイル開発は、要件が不明確で変更が多いプロジェクトや、スピード重視のプロジェクト（スタートアップの新サービスなど）に適しています。選択肢①②④は正しい利点です。"
    },
    {
      "id": "tech-4-1-2-q6",
      "type": "multiple_choice",
      "question": "スクラムにおいて、「顧客の代表として、要件の優先順位を決定し、プロダクトバックログを管理する」役割を何と呼びますか？",
      "options": [
        "プロダクトオーナー（Product Owner）",
        "スクラムマスター（Scrum Master）",
        "開発チーム（Development Team）",
        "プロジェクトマネージャー（Project Manager）"
      ],
      "correctAnswer": 0,
      "explanation": "「プロダクトオーナー（Product Owner）」が正しいです。スクラムとは、アジャイル開発の具体的な手法の1つで、チームの役割、イベント（会議）、成果物が明確に定義されています。スクラムのチームは、①プロダクトオーナー：顧客の代表、要件の優先順位を決定、プロダクトバックログを管理、②スクラムマスター：チームの支援、障害の除去、スクラムのルールを守らせる、③開発チーム：実際の開発を担当、自己組織化（自分たちで計画・実行）、の3つの役割で構成されます。選択肢②スクラムマスターはチームの支援と障害の除去、③開発チームは実際の開発を担当します。④プロジェクトマネージャーはスクラムの役割ではありません。"
    },
    {
      "id": "tech-4-1-2-q7",
      "type": "multiple_choice",
      "question": "スクラムにおいて、「昨日やったこと、今日やること、困っていること（障害）を共有する」会議を何と呼びますか？",
      "options": [
        "スプリント計画ミーティング（Sprint Planning）",
        "デイリースクラム（Daily Scrum、朝会）",
        "スプリントレビュー（Sprint Review）",
        "スプリントレトロスペクティブ（Sprint Retrospective、振り返り）"
      ],
      "correctAnswer": 1,
      "explanation": "「デイリースクラム（Daily Scrum、朝会）」が正しいです。デイリースクラムは、毎日15分の短時間で、①昨日やったこと、②今日やること、③困っていること（障害）、を共有する会議です。短時間で情報共有し、問題を早期に発見することが目的です。選択肢①スプリント計画ミーティングは、プロダクトオーナーが優先度の高い機能を提示し、開発チームが2週間で実現可能な機能を選択する会議（2時間）、③スプリントレビューは、開発チームが完成した機能をプロダクトオーナーにデモし、フィードバックを得る会議（1時間）、④スプリントレトロスペクティブは、チーム全員でスプリントの進め方を振り返り、改善点を議論する会議（1時間）です。"
    },
    {
      "id": "tech-4-1-2-q8",
      "type": "multiple_choice",
      "question": "XP（エクストリームプログラミング）の「2人のプログラマが1台のPCで一緒にコードを書く」プラクティスを何と呼びますか？",
      "options": [
        "ペアプログラミング（Pair Programming）",
        "テスト駆動開発（TDD: Test-Driven Development）",
        "継続的インテグレーション（CI: Continuous Integration）",
        "リファクタリング（Refactoring）"
      ],
      "correctAnswer": 0,
      "explanation": "「ペアプログラミング（Pair Programming）」が正しいです。ペアプログラミングとは、2人のプログラマが1台のPCで一緒にコードを書く手法です。ドライバー（実際にコードを入力）とナビゲーター（コードをレビューし、設計や問題点を指摘）に分かれ、役割を定期的に交代（30分ごと）します。利点は、①コードの品質が向上（常にレビューされる）、②知識の共有（2人でコードを書くため、属人化を防ぐ）、③問題の早期発見（ナビゲーターがバグや設計の問題を指摘）、です。選択肢②TDDは「コードを書く前にテストコードを書く」開発手法、③CIは「1日に複数回コードをコミットし、自動的にビルド・テスト」、④リファクタリングは「動作を変えずにコードの構造を改善」です。"
    },
    {
      "id": "tech-4-1-2-q9",
      "type": "multiple_choice",
      "question": "テスト駆動開発（TDD）の正しい手順はどれですか？",
      "options": [
        "①コードを書く → ②テストコードを書く → ③テストを実行 → ④リファクタリング",
        "①テストコードを書く → ②テストを実行（失敗） → ③最小限のコードを書いてテストを通す → ④テストを実行（成功） → ⑤リファクタリング",
        "①設計書を書く → ②コードを書く → ③テストコードを書く → ④テストを実行",
        "①テストを実行 → ②コードを書く → ③リファクタリング → ④テストコードを書く"
      ],
      "correctAnswer": 1,
      "explanation": "「①テストコードを書く → ②テストを実行（失敗） → ③最小限のコードを書いてテストを通す → ④テストを実行（成功） → ⑤リファクタリング」が正しいです。テスト駆動開発（TDD）とは、「コードを書く前に、テストコードを書く」という開発手法です。まず、テストコードを書いてテストを実行すると失敗します（まだ関数が実装されていないため）。次に、最小限のコードを書いてテストを通し（例: 固定値を返す）、テストが成功したらリファクタリング（コードを改善、実際のデータベース検索を実装）します。TDDの利点は、①テストが常に最新、②バグが減る、③設計が改善される、です。選択肢①③④は手順が間違っています。"
    },
    {
      "id": "tech-4-1-2-q10",
      "type": "multiple_choice",
      "question": "DevOpsのCI/CDパイプラインにおいて、「コードをコミットすると、自動的にビルド・単体テスト・結合テストを実行し、テストが成功したら自動的にステージング環境にデプロイする」仕組みの利点として正しいものはどれですか？",
      "options": [
        "ドキュメントが充実する",
        "開発期間が長くなる",
        "バグを早期に発見でき、リリースの高速化が実現できる",
        "要件が明確になる"
      ],
      "correctAnswer": 2,
      "explanation": "「バグを早期に発見でき、リリースの高速化が実現できる」が正しいです。DevOpsとは、開発（Development）と運用（Operations）を密に連携させ、ソフトウェアの開発・デプロイ・運用を高速化・自動化する手法です。CI/CD（Continuous Integration / Continuous Delivery）パイプラインでは、コードのコミットからデプロイまでを自動化します。これにより、①リリースの高速化：1日に何度もデプロイできる（Netflix は1日に100回以上デプロイ）、②品質の向上：自動テストで早期にバグを発見、③運用の安定化：監視ツールで問題を早期に発見・対応、が実現できます。選択肢①②④はCI/CDパイプラインの直接的な利点ではありません。"
    }
  ]
}
