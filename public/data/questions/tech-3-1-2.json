{
  "topicId": "tech-3-1-2",
  "title": "入出力設計",
  "questions": [
    {
      "id": "tech-3-1-2-q1",
      "type": "multiple_choice",
      "question": "ある会社が社員番号に「24-01-0123」という形式を採用している。この形式は何コードか。",
      "options": [
        "順次コード",
        "区分コード",
        "桁別コード",
        "表意コード"
      ],
      "correctAnswer": 2,
      "explanation": "24-01-0123は、各桁に意味を持たせた桁別コードです。24=2024年入社、01=営業部、0123=連番のように、各部分が階層的な分類を表現しています。順次コードは単なる連番（0001, 0002...）、区分コードは範囲で分類（1xx=営業, 2xx=開発）、表意コードは名称の一部を使う（TYO=東京）ものです。桁別コードは各桁に意味があるため、コードを見るだけで入社年や所属部署がわかるという利点があります。"
    },
    {
      "id": "tech-3-1-2-q2",
      "type": "multiple_choice",
      "question": "モジュラス10（重み3,1）でチェックディジットを計算する。コード「978-4-12345-678-?」のチェックディジットはいくつか。",
      "options": [
        "2",
        "4",
        "6",
        "8"
      ],
      "correctAnswer": 1,
      "explanation": "計算手順：①各桁に重み（1,3,1,3,...）を掛けて合計する。9×1 + 7×3 + 8×1 + 4×3 + 1×1 + 2×3 + 3×1 + 4×3 + 5×1 + 6×3 + 7×1 + 8×3 = 9 + 21 + 8 + 12 + 1 + 6 + 3 + 12 + 5 + 18 + 7 + 24 = 126。②126を10で割った余りを求める。126 ÷ 10 = 12 余り 6。③10から余りを引く。10 - 6 = 4。したがって、チェックディジットは「4」です。この方式はISBNやJANコード（バーコード）で使用されており、入力ミスをほぼ100%検出できます。"
    },
    {
      "id": "tech-3-1-2-q3",
      "type": "multiple_choice",
      "question": "入力チェックで、試験の点数が「0～100点」の範囲内かを検証するのは何チェックか。",
      "options": [
        "ニューメリックチェック",
        "リミットチェック",
        "フォーマットチェック",
        "桁数チェック"
      ],
      "correctAnswer": 1,
      "explanation": "値が上限・下限の範囲内かを検証するのはリミットチェックです。試験の点数が0～100点の範囲内か、年齢が0～150歳の範囲内か等を確認します。ニューメリックチェックは数字のみで構成されているかを検証（電話番号等）、フォーマットチェックは形式が正しいかを検証（メールアドレスの@含む等）、桁数チェックは桁数が正しいかを検証（郵便番号7桁等）です。リミットチェックにより、101点や-10点といった不正な値の入力を防止できます。"
    },
    {
      "id": "tech-3-1-2-q4",
      "type": "multiple_choice",
      "question": "区分コードの説明として、最も適切なものはどれか。",
      "options": [
        "連番で割り当てる方式で、シンプルだが意味を持たない",
        "カテゴリごとに範囲を分けて割り当てる方式",
        "各桁に意味を持たせる階層的な方式",
        "名称の一部を使って意味を持たせる方式"
      ],
      "correctAnswer": 1,
      "explanation": "区分コードは、カテゴリごとに範囲を分けて割り当てる方式です。例えば、部門コードで1xx=営業、2xx=開発、3xx=総務のように、範囲で分類します。選択肢1は順次コード、選択肢3は桁別コード、選択肢4は表意コードの説明です。区分コードのメリットは分類がわかりやすく範囲指定がしやすい点ですが、範囲が足りなくなる可能性があるというデメリットもあります。例えば営業部が100人を超えると1xxでは表現できなくなります。"
    },
    {
      "id": "tech-3-1-2-q5",
      "type": "multiple_choice",
      "question": "メールアドレスが「xxx@yyy.zzz」の形式になっているかを検証するのは何チェックか。",
      "options": [
        "ニューメリックチェック",
        "リミットチェック",
        "フォーマットチェック",
        "必須チェック"
      ],
      "correctAnswer": 2,
      "explanation": "形式が正しいかを検証するのはフォーマットチェックです。メールアドレスがxxx@yyy.zzz形式、電話番号が03-1234-5678形式等を確認します。ニューメリックチェックは数字のみで構成されているか、リミットチェックは値が範囲内か、必須チェックは必須項目が入力されているかを検証します。フォーマットチェックは正規表現を使用して実装されることが多く、例えばメールアドレスの場合、@が含まれているか、@の前後に文字があるか等を詳細に検証します。"
    },
    {
      "id": "tech-3-1-2-q6",
      "type": "multiple_choice",
      "question": "入力フォームで「開始日が終了日より後になっていないか」を検証するのは何チェックか。",
      "options": [
        "リミットチェック",
        "相関チェック",
        "重複チェック",
        "桁数チェック"
      ],
      "correctAnswer": 1,
      "explanation": "複数項目の関係が正しいかを検証するのは相関チェックです。開始日≦終了日、年齢と生年月日の整合性、小計と消費税の計算が一致するか等を確認します。リミットチェックは単一項目の値が範囲内かを検証、重複チェックはすでに登録されていないかを検証、桁数チェックは桁数が正しいかを検証します。相関チェックは複数項目の論理的な整合性を確保するため、業務ロジックの正確性を保証する重要なチェックです。例えば、予約開始日が終了日より後だとシステムがおかしな動作をしてしまいます。"
    },
    {
      "id": "tech-3-1-2-q7",
      "type": "multiple_choice",
      "question": "チェックディジットで検出できるエラーとして、最も適切でないものはどれか。",
      "options": [
        "1234 → 1235（1桁間違い）",
        "1234 → 1243（隣接する2桁の入れ替え）",
        "1234 → 5678（複数桁の大幅な変更）",
        "1234 → 1134（同じ数字が続く）"
      ],
      "correctAnswer": 2,
      "explanation": "チェックディジットは、単純な入力ミス（1桁間違い）、転置エラー（隣接する2桁の入れ替え）、ダブルエラー（同じ数字が続く）は高い確率で検出できますが、複数桁が大幅に変更されるような複雑なエラーは検出できない場合があります。チェックディジットは入力ミスを100%検出できるわけではなく、特定のパターンのエラーについては検出率が低下します。しかし、実際の入力シーンで発生しやすい単純なミスはほぼ確実に検出できるため、システムの信頼性向上に大きく貢献します。"
    },
    {
      "id": "tech-3-1-2-q8",
      "type": "multiple_choice",
      "question": "入力チェックの実装タイミングとして、最も適切なものはどれか。",
      "options": [
        "クライアント側のみでリアルタイムチェック",
        "サーバー側のみで送信時チェック",
        "クライアント側でリアルタイムチェック + サーバー側で送信時チェックの両方",
        "入力チェックは不要。データベース側で制約をかければ十分"
      ],
      "correctAnswer": 2,
      "explanation": "入力チェックは、クライアント側でリアルタイムチェック（入力中・入力直後）とサーバー側で送信時チェックの両方を実施することが推奨されます。クライアント側のみだとブラウザの開発者ツールで無効化される可能性があり、サーバー側のみだとユーザーがすぐにミスに気づけません。両方を実施することで、ユーザビリティ（すぐエラーがわかる）とセキュリティ（不正データの混入防止）を両立できます。データベースの制約も重要ですが、それだけではユーザーフレンドリーなエラーメッセージを提供できません。"
    },
    {
      "id": "tech-3-1-2-q9",
      "type": "multiple_choice",
      "question": "順次コードの特徴として、最も適切でないものはどれか。",
      "options": [
        "シンプルで管理しやすい",
        "無限に追加可能",
        "コードから分類や意味がわかる",
        "会員番号や受注番号に適している"
      ],
      "correctAnswer": 2,
      "explanation": "順次コードは連番（0001, 0002, 0003...）で割り当てる方式で、シンプルで管理しやすく無限に追加可能ですが、コードから分類や意味がわからないという特徴があります。会員番号や受注番号のように、特に分類が不要で一意性だけが重要な場合に適しています。コードから分類がわかるのは桁別コードや区分コードの特徴です。例えば会員番号0001を見ても、それが誰なのか、いつ入会したのか等の情報はわかりません。一方、シンプルなため管理が容易で、番号が不足する心配もありません。"
    },
    {
      "id": "tech-3-1-2-q10",
      "type": "multiple_choice",
      "question": "ある会社の商品コードを設計する。今後の拡張性を考慮して、最も適切な設計はどれか。商品は現在500種類で、年間100種類ずつ増加している。",
      "options": [
        "3桁の順次コード（000～999）",
        "4桁の順次コード（0000～9999）",
        "2桁の順次コード（00～99）",
        "5桁の順次コード（00000～99999）"
      ],
      "correctAnswer": 1,
      "explanation": "現在500種類、年間100種類増加なので、10年後には500 + 100×10 = 1,500種類になります。3桁（999種類まで）では不足する可能性があります。4桁（9,999種類まで）なら50年以上対応可能で、将来の拡張性を十分に確保できます。2桁（99種類まで）は現時点でも不足、5桁は過剰です。入出力設計では「将来の拡張を考慮した桁数」が重要で、後から桁数を増やすのは非常に困難です。既存のシステムやデータベースの変更が必要になり、コストが膨大になります。初めから余裕を持った桁数を設定することがベストプラクティスです。"
    }
  ]
}
