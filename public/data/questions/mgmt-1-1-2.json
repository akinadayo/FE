{
  "topicId": "mgmt-1-1-2",
  "title": "プロジェクト統合マネジメント",
  "questions": [
    {
      "id": "mgmt-1-1-2-q1",
      "type": "multiple_choice",
      "question": "プロジェクト憲章の主な目的として最も適切なものはどれですか？",
      "options": [
        "プロジェクトの詳細なスケジュールとコスト計画を定義する",
        "プロジェクトの開始を正式に承認し、プロジェクトマネージャに権限を付与する",
        "プロジェクトの技術的な設計仕様を詳細に記述する",
        "プロジェクトメンバーの日次タスクを管理する"
      ],
      "correctAnswer": 1,
      "explanation": "「プロジェクトの開始を正式に承認し、プロジェクトマネージャに権限を付与する」が正しいです。プロジェクト憲章(Project Charter)は、プロジェクトの開始を正式に承認する文書で、経営層やプロジェクトスポンサーが作成・承認します。プロジェクト憲章により、プロジェクトマネージャは予算執行、メンバーアサイン、スケジュール調整などの権限を得ます。プロジェクト憲章には、プロジェクトの目的、概要、ビジネスケース、主要なステークホルダ、前提条件、制約条件、主要なリスク、プロジェクトマネージャの任命などが記載されます。選択肢①「詳細なスケジュールとコスト計画」はプロジェクト計画書の内容です。プロジェクト憲章は高レベル(概要)の情報を記載し、詳細な計画はプロジェクト計画書で定義します。選択肢③「技術的な設計仕様」は設計書の内容、④「日次タスク管理」は日常のプロジェクト管理の内容です。"
    },
    {
      "id": "mgmt-1-1-2-q2",
      "type": "multiple_choice",
      "question": "次の文書のうち、プロジェクト憲章に記載すべき内容として最も適切でないものはどれですか？",
      "options": [
        "プロジェクトの目的とビジネスケース(ROI、投資回収期間)",
        "主要なステークホルダと前提条件・制約条件",
        "各モジュールの詳細な処理フローとデータベース設計",
        "プロジェクトマネージャの任命と権限の範囲"
      ],
      "correctAnswer": 2,
      "explanation": "「各モジュールの詳細な処理フローとデータベース設計」が正しいです(記載すべきでない)。プロジェクト憲章は、プロジェクトの開始を承認する高レベル(概要)の文書であり、詳細な技術仕様は含みません。詳細な処理フローやデータベース設計は、内部設計書に記載される内容です。プロジェクト憲章には、①プロジェクトの目的(なぜ実施するのか)、②ビジネスケース(期待される効果、ROI、投資回収期間)、③プロジェクトの概要(何を作るのか)、④主要なステークホルダ、⑤スケジュール・予算の概要、⑥前提条件・制約条件、⑦主要なリスク、⑧プロジェクトマネージャの任命と権限の範囲、などの高レベルの情報を記載します。選択肢①②④は全てプロジェクト憲章に記載すべき内容です。"
    },
    {
      "id": "mgmt-1-1-2-q3",
      "type": "multiple_choice",
      "question": "WBS(作業分解構成図)を作成する際の原則として最も適切なものはどれですか？",
      "options": [
        "「業務をヒアリングする」「設計書を作成する」のように、作業(アクティビティ)ベースで分解する",
        "「要件定義書」「設計書」のように、成果物(デリバラブル)ベースで分解する",
        "プロジェクトマネージャのタスクのみを分解し、開発メンバーのタスクは含めない",
        "最小単位の作業は1時間~2時間にして、できるだけ細かく分解する"
      ],
      "correctAnswer": 1,
      "explanation": "「『要件定義書』『設計書』のように、成果物(デリバラブル)ベースで分解する」が正しいです。WBS(Work Breakdown Structure:作業分解構成図)は、プロジェクトの成果物を階層的に分解した構造図で、「成果物ベース」で分解するのが原則です。「何をするか(作業)」ではなく「何を作るか(成果物)」で分解します。例えば、○「業務要件定義書」(成果物)、×「業務をヒアリングする」(作業)。成果物ベースで分解することで、①スコープが明確になる、②スケジュール・コストを見積もりやすくなる、③担当者を明確にできる、という効果があります。選択肢①は作業ベースで間違いです。選択肢③「PMのタスクのみ」は間違いで、WBSはプロジェクト全体の全ての成果物を含みます(100%ルール)。選択肢④「1時間~2時間」は細かすぎます。WBSの最小単位(ワークパッケージ)は、8時間~80時間(1日~10日)が目安です(8/80ルール)。"
    },
    {
      "id": "mgmt-1-1-2-q4",
      "type": "multiple_choice",
      "question": "プロジェクト実行中に、業務部門から「新しい機能を追加してほしい」という要求が出されました。プロジェクトマネージャが最初に実施すべき対応として最も適切なものはどれですか？",
      "options": [
        "業務部門の要求なので、すぐに開発チームに指示して機能を追加する",
        "変更要求を記録し、スコープ・スケジュール・コスト・リスクへの影響を分析する",
        "この機能は重要ではないと判断し、要求を却下する",
        "プロジェクトスポンサーに報告し、スポンサーの判断を待つ"
      ],
      "correctAnswer": 1,
      "explanation": "「変更要求を記録し、スコープ・スケジュール・コスト・リスクへの影響を分析する」が正しいです。プロジェクト実行中に変更要求が出された場合、変更管理プロセスに従って対応します。変更管理プロセスの最初のステップは、①変更要求を記録(変更要求書を作成)、②変更の影響を分析(スコープ、スケジュール、コスト、品質、リスクへの影響)、です。影響分析の結果を基に、変更管理委員会で承認・却下を判断します。選択肢①「すぐに機能を追加」は間違いです。変更管理プロセスを経ずに変更を実施すると、スコープクリープ(スコープが際限なく拡大)、スケジュール遅延、コスト超過が発生します。選択肢③「PMが却下」も間違いです。PMが単独で却下するのではなく、影響分析を行い、変更管理委員会で審議します。選択肢④「スポンサーの判断を待つ」は部分的に正しいですが、最初に実施すべきは影響分析です。影響分析なしにスポンサーに報告しても、適切な判断ができません。"
    },
    {
      "id": "mgmt-1-1-2-q5",
      "type": "multiple_choice",
      "question": "変更管理委員会で、ある変更要求が承認されました。次に実施すべき対応として最も適切なものはどれですか？",
      "options": [
        "すぐに変更を実施し、完了後にベースラインを更新する",
        "ベースライン(スコープ、スケジュール、コスト計画)を更新してから、変更を実施する",
        "変更を実施せず、変更履歴のみを記録する",
        "変更要求者に却下を通知する"
      ],
      "correctAnswer": 1,
      "explanation": "「ベースライン(スコープ、スケジュール、コスト計画)を更新してから、変更を実施する」が正しいです。変更管理プロセスの手順は、①変更要求の受付、②変更の影響分析、③変更管理委員会で審議、④ベースラインの更新、⑤変更の実施、⑥変更の記録、です。変更が承認された後、まずベースライン(スコープベースライン、スケジュールベースライン、コストベースライン)を更新し、その後で実際の変更を実施します。ベースラインを更新することで、プロジェクト全体の計画が最新の状態に保たれ、進捗管理が正確にできます。選択肢①「すぐに実施、後でベースライン更新」は順序が間違っています。ベースラインを更新せずに変更を実施すると、計画と実績が乖離し、進捗管理ができなくなります。選択肢③「変更を実施せず」は間違いです。承認された変更は実施する必要があります。選択肢④「却下を通知」も間違いです。承認されているので、却下ではありません。"
    },
    {
      "id": "mgmt-1-1-2-q6",
      "type": "multiple_choice",
      "question": "スコープクリープ(Scope Creep)を防止するための対策として最も適切でないものはどれですか？",
      "options": [
        "変更管理プロセスを確立し、全ての変更要求を記録・分析・承認する",
        "要件定義フェーズで、全ての要件を洗い出し、ステークホルダと合意する",
        "ステークホルダの要求は全て受け入れて、スコープに追加する",
        "スコープベースライン(WBS、要件定義書)を明確化し、変更はベースラインからの差分として管理する"
      ],
      "correctAnswer": 2,
      "explanation": "「ステークホルダの要求は全て受け入れて、スコープに追加する」が正しいです(適切でない対策)。スコープクリープ(Scope Creep)とは、プロジェクトのスコープが際限なく拡大する現象で、プロジェクト失敗の最大の原因の1つです。スコープクリープを防止するには、①変更管理プロセスを確立し、全ての変更要求を記録・影響分析・承認する(承認されない変更は実施しない)、②スコープベースラインを明確化し、変更はベースラインからの差分として管理する、③要件定義フェーズで全ての要件を洗い出し、ステークホルダと合意する、④変更管理委員会を設置し、変更の承認・却下を判断する、などの対策が必要です。選択肢③「全ての要求を受け入れる」は、スコープクリープを助長する行為で、最も適切でない対策です。ステークホルダの要求を全て受け入れると、スコープが際限なく拡大し、スケジュール遅延、コスト超過、品質低下が発生します。プロジェクトマネージャは、変更要求の影響を分析し、必要に応じて「NO」と言う勇気が必要です。"
    },
    {
      "id": "mgmt-1-1-2-q7",
      "type": "multiple_choice",
      "question": "構成管理の目的として最も適切なものはどれですか？",
      "options": [
        "プロジェクトの予算を管理し、コスト超過を防止する",
        "プロジェクトの成果物のバージョンを管理し、誰が・いつ・何を変更したかを追跡する",
        "プロジェクトメンバーの勤怠を管理し、作業時間を記録する",
        "プロジェクトのリスクを管理し、リスク対応策を実施する"
      ],
      "correctAnswer": 1,
      "explanation": "「プロジェクトの成果物のバージョンを管理し、誰が・いつ・何を変更したかを追跡する」が正しいです。構成管理(Configuration Management)とは、プロジェクトの成果物(文書、プログラムコード、設定ファイルなど)のバージョンを管理し、変更履歴を追跡するプロセスです。構成管理により、①成果物の最新版を特定できる、②過去のバージョンに戻せる(ロールバック)、③複数人が同時に作業しても、変更が競合しない、④変更履歴を追跡できる(誰が・いつ・何を変更したか)、という効果があります。構成管理の対象は、①文書(要件定義書、設計書、テスト計画書)、②プログラムコード(ソースコード、スクリプト)、③データベーススキーマ(テーブル定義、インデックス)、④設定ファイル(サーバ設定、環境変数)、⑤インフラ(サーバ構成、ネットワーク構成)、などです。選択肢①「予算管理」はコスト管理、③「勤怠管理」は人的資源管理、④「リスク管理」はリスクマネジメントの内容です。"
    },
    {
      "id": "mgmt-1-1-2-q8",
      "type": "multiple_choice",
      "question": "バージョン管理システム(Git)を使用して、プログラムコードを管理しています。開発者が新しい機能を開発し、コードをリモートリポジトリに反映する手順として最も適切なものはどれですか？",
      "options": [
        "①コードを編集 → ②プッシュ(Push) → ③コミット(Commit)",
        "①コードを編集 → ②コミット(Commit) → ③プッシュ(Push)",
        "①プッシュ(Push) → ②コードを編集 → ③コミット(Commit)",
        "①コミット(Commit) → ②コードを編集 → ③プッシュ(Push)"
      ],
      "correctAnswer": 1,
      "explanation": "「①コードを編集 → ②コミット(Commit) → ③プッシュ(Push)」が正しいです。バージョン管理システム(Git)を使用したコード管理の基本手順は、①コードを編集(新機能を開発、バグ修正)、②コミット:変更をローカルリポジトリに記録(コミットメッセージ、コミットID、コミット者、日時を記録)、③プッシュ:ローカルリポジトリの変更を、リモートリポジトリに送信(チーム全体で共有)、です。コミットは、変更をローカル(自分のPC)に記録する操作で、プッシュは、ローカルの変更をリモート(サーバ)に送信する操作です。まずコミットで変更を記録し、その後プッシュでチームに共有します。選択肢①「プッシュ→コミット」は順序が逆です。コミットせずにプッシュはできません。選択肢③④も順序が間違っています。なお、他の開発者の変更を取得する場合は、プル(Pull)を使用します。プルは、リモートリポジトリの最新版を、ローカルリポジトリにダウンロードする操作です。"
    },
    {
      "id": "mgmt-1-1-2-q9",
      "type": "multiple_choice",
      "question": "ベースライン(Baseline)に関する説明として最も適切なものはどれですか？",
      "options": [
        "ベースラインは、プロジェクト開始時に一度だけ設定され、以降は変更できない",
        "ベースラインは、正式に承認された成果物のバージョンで、変更は変更管理プロセスで承認が必要",
        "ベースラインは、プロジェクトマネージャが自由に変更できる",
        "ベースラインは、プロジェクトの日次タスクを管理するための文書"
      ],
      "correctAnswer": 1,
      "explanation": "「ベースラインは、正式に承認された成果物のバージョンで、変更は変更管理プロセスで承認が必要」が正しいです。ベースライン(Baseline)とは、正式に承認された成果物のバージョンで、プロジェクトの基準となります。以降の変更は全てベースラインからの差分として管理され、変更管理プロセスで承認が必要です。ベースラインにより、①プロジェクトの進捗を測定できる(ベースラインと実績を比較)、②変更を適切にコントロールできる、という効果があります。代表的なベースラインとして、①スコープベースライン(WBS、要件定義書)、②スケジュールベースライン(ガントチャート、アローダイアグラム)、③コストベースライン(予算、コスト計画)、の3つがあります。選択肢①「以降は変更できない」は間違いです。ベースラインは変更できますが、変更管理プロセスで承認が必要です(統合変更管理)。承認された変更は、ベースラインに反映されます。選択肢③「PMが自由に変更」も間違いです。ベースラインの変更は、変更管理委員会の承認が必要です。選択肢④「日次タスク管理」は間違いで、ベースラインはプロジェクトの基準を定義する文書です。"
    },
    {
      "id": "mgmt-1-1-2-q10",
      "type": "multiple_choice",
      "question": "成果物のレビュー手法に関する説明として最も適切なものはどれですか？",
      "options": [
        "インスペクション(Inspection)は、作成者が成果物を説明し、参加者が質問する軽量なレビュー手法",
        "ウォークスルー(Walkthrough)は、正式なレビュー会議で、レビュー担当者が事前に成果物を読み込む厳格なレビュー手法",
        "ピアレビュー(Peer Review)は、同僚同士で相互レビューする手法で、気軽に実施できる",
        "デスクチェックは、外部の専門家が成果物をレビューする手法"
      ],
      "correctAnswer": 2,
      "explanation": "「ピアレビュー(Peer Review)は、同僚同士で相互レビューする手法で、気軽に実施できる」が正しいです。成果物の品質を確保するために、レビューが不可欠です。代表的なレビュー手法として、①インスペクション(Inspection):正式なレビュー会議。レビュー担当者が事前に成果物を読み込み、会議で指摘事項を議論。厳格だが時間がかかる。重要な成果物(要件定義書、設計書)に使用。②ウォークスルー(Walkthrough):作成者が成果物を説明し、参加者が質問・指摘。インスペクションより軽量。中程度の成果物(画面設計、テスト計画書)に使用。③ピアレビュー(Peer Review):同僚同士で相互レビュー。気軽に実施できる。プログラムコード、文書に使用。④デスクチェック:作成者本人が見直す。最も基本的なレビュー。レビューの効果として、①バグを早期に発見(テスト前にバグを発見すれば、修正コストが低い)、②知識の共有(レビュー参加者全員が成果物を理解)、③品質の向上、があります。選択肢①②は、インスペクションとウォークスルーの説明が逆です。選択肢④「外部の専門家」は間違いで、デスクチェックは作成者本人が実施します。"
    }
  ]
}
