{
  "topicId": "tech-4-1-5",
  "title": "開発ツール",
  "questions": [
    {
      "id": "tech-4-1-5-q1",
      "type": "multiple_choice",
      "question": "CASE（Computer Aided Software Engineering）ツールの説明として、最も適切なものはどれか。",
      "options": [
        "プログラムのバグを自動的に修正するツール",
        "ソフトウェア開発の上流工程（要件定義・設計）を支援し、UML図の作成やコード自動生成を行うツール",
        "コードの変更履歴を管理し、複数人での開発を支援するツール",
        "コンパイル、実行、デバッグを統合した開発環境"
      ],
      "correctAnswer": 1,
      "explanation": "CASEツールは、ソフトウェア開発の上流工程（要件定義・設計）を支援するツールです。UMLクラス図、シーケンス図、ER図などの設計図を作成し、設計図からコードを自動生成したり、設計書を自動で作成したりする機能を提供します。選択肢1はデバッガの説明、選択肢3はバージョン管理ツール（Git等）の説明、選択肢4はIDE（統合開発環境）の説明です。CASEツールは設計フェーズで活躍し、設計変更への迅速な対応や設計の整合性チェックを可能にします。"
    },
    {
      "id": "tech-4-1-5-q2",
      "type": "multiple_choice",
      "question": "上流CASE、下流CASE、統合CASEの説明として、最も適切でないものはどれか。",
      "options": [
        "上流CASEは、要件定義・設計段階でUML図やER図を作成し、設計書を生成する",
        "下流CASEは、実装・テスト段階でコード自動生成やテストケース生成を行う",
        "統合CASE（I-CASE）は、上流CASEと下流CASEを統合し、設計からコード生成まで一貫して支援する",
        "上流CASEは、プログラムのデバッグを自動的に行う"
      ],
      "correctAnswer": 3,
      "explanation": "「上流CASEは、プログラムのデバッグを自動的に行う」は誤りです。デバッグはデバッガの役割であり、上流CASEは要件定義・設計段階を支援するツールです。正しい説明は、上流CASEはUML図やER図の作成、設計書の生成を行い、下流CASEはコード自動生成やテストケース生成を行い、統合CASE（I-CASE）は両者を統合して設計からコード生成まで一貫して支援します。CASEツールは設計フェーズに焦点を当てており、デバッグは別のツール（デバッガやIDE）で行います。"
    },
    {
      "id": "tech-4-1-5-q3",
      "type": "multiple_choice",
      "question": "Gitとは何か。最も適切なものはどれか。",
      "options": [
        "プログラムのコンパイルを高速化するツール",
        "分散型バージョン管理システムで、コード変更の履歴管理や複数人での共同開発を支援するツール",
        "Webサーバーを構築するためのフレームワーク",
        "データベースの管理ツール"
      ],
      "correctAnswer": 1,
      "explanation": "Gitは分散型バージョン管理システムです。ソースコードの変更履歴を記録し、誰が、いつ、どのファイルを、どのように変更したかを追跡できます。各開発者がローカルに完全な履歴を持ち、ブランチによる並行開発や変更の競合の自動検出・解決が可能です。GitHub、GitLabなどのサービスと組み合わせることで、リモートリポジトリでのチーム開発が効率化されます。選択肢1はコンパイラ、選択肢3はWebフレームワーク、選択肢4はDBMSの説明です。現代のソフトウェア開発では、バージョン管理ツールの使用が必須です。"
    },
    {
      "id": "tech-4-1-5-q4",
      "type": "multiple_choice",
      "question": "Gitの用語の説明として、最も適切でないものはどれか。",
      "options": [
        "コミット：変更を履歴として記録する操作で、メッセージを付けて変更内容を説明する",
        "ブランチ：開発の分岐で、main（本番）、develop（開発）、feature（機能追加）等を作成し並行開発する",
        "マージ：ブランチを統合する操作で、feature→mainにマージして機能を本番に反映する",
        "プッシュ：リモートリポジトリの変更をローカルに取得する操作"
      ],
      "correctAnswer": 3,
      "explanation": "「プッシュ：リモートリポジトリの変更をローカルに取得する操作」は誤りです。これはプル（Pull）の説明です。正しくは、プッシュ（Push）は「ローカルリポジトリの変更をリモートリポジトリに送信する操作」です。例えば、git push origin mainで、ローカルのmainブランチの変更をリモートのmainブランチに反映させます。逆に、git pull origin mainで、リモートの最新版をローカルに取得します。チーム開発では、プッシュで自分の変更を共有し、プルで他のメンバーの変更を取得します。"
    },
    {
      "id": "tech-4-1-5-q5",
      "type": "multiple_choice",
      "question": "Gitの分散型とSubversion（SVN）の集中型の比較として、最も適切でないものはどれか。",
      "options": [
        "Gitは各開発者がローカルに完全な履歴を持つため、オフライン作業が可能だが、SVNは中央サーバーへの接続が必須",
        "Gitはブランチが軽量で高速に作成・切り替えできるが、SVNはブランチ作成がやや重い",
        "Gitは分散型のため複数拠点での開発に適しており、SVNは集中型のため中央サーバーで一元管理する",
        "Gitは小規模開発に適しており、SVNは大規模開発に適している"
      ],
      "correctAnswer": 3,
      "explanation": "「Gitは小規模開発に適しており、SVNは大規模開発に適している」は誤りです。実際には、Gitは小規模から大規模まで幅広く適しており、特に複数拠点での大規模なオープンソース開発やチーム開発で広く使われています（Linux開発、GitHub上の数百万のプロジェクト等）。SVNは集中型でシンプルですが、大規模開発では分散型のGitの方が柔軟性と拡張性が高いです。その他の選択肢は正しく、Gitはオフライン作業可能、ブランチが軽量、分散型で複数拠点に強い、という特徴があります。"
    },
    {
      "id": "tech-4-1-5-q6",
      "type": "multiple_choice",
      "question": "統合開発環境（IDE）の説明として、最も適切でないものはどれか。",
      "options": [
        "コードエディタ、コンパイラ、デバッガ、ビルドツールなどを1つの環境に統合し、開発効率を向上させる",
        "コード補完（IntelliSense）により、変数名や関数名を途中まで入力すると候補を表示し、タイプミスを防ぐ",
        "入力中にエラーを即座に検出し、赤い波線で表示することで、コンパイル前にミスに気づける",
        "IDEを使うと、コンパイル速度が必ず10倍以上に向上する"
      ],
      "correctAnswer": 3,
      "explanation": "「IDEを使うと、コンパイル速度が必ず10倍以上に向上する」は誤りです。IDEはコード補完やエラー検出により開発効率を向上させますが、コンパイル速度自体はコンパイラの性能やハードウェアに依存し、IDEを使っても必ずしも大幅に向上するわけではありません。IDEの主なメリットは、①コード補完による入力速度向上、②入力中のエラー検出によるバグの早期発見、③リファクタリング支援、④デバッガ統合、⑤Git連携、などです。これらにより、開発全体の生産性が向上します（例：100行のコードを書く時間が60分→30分）。"
    },
    {
      "id": "tech-4-1-5-q7",
      "type": "multiple_choice",
      "question": "主なIDEと対応言語の組み合わせとして、最も適切でないものはどれか。",
      "options": [
        "Visual Studio Code - JavaScript、Python、汎用（拡張機能で多言語対応）",
        "IntelliJ IDEA - Java、Kotlin、Scala、Android開発",
        "Eclipse - Java、C++、PHP",
        "Xcode - Java、Android開発"
      ],
      "correctAnswer": 3,
      "explanation": "「Xcode - Java、Android開発」は誤りです。Xcodeは、AppleのIDEで、Swift、Objective-Cに対応し、iOS、macOSアプリの開発専用です。Javaは対応しておらず、Android開発はできません。Android開発にはIntelliJ IDEAベースのAndroid Studioが使われます。その他の組み合わせは正しく、Visual Studio CodeはJavaScript、Python等の汎用開発、IntelliJ IDEAはJava、Kotlin、Android開発、EclipseはJava、C++、PHPに対応しています。各IDEは対応言語や用途が異なるため、開発プロジェクトに合わせて選択する必要があります。"
    },
    {
      "id": "tech-4-1-5-q8",
      "type": "multiple_choice",
      "question": "デバッガの機能の説明として、最も適切でないものはどれか。",
      "options": [
        "ブレークポイント：指定した行で実行を一時停止し、その時点での変数の値を確認できる",
        "ステップ実行：1行ずつプログラムを実行し、どの行でバグが発生したか正確に特定できる",
        "ウォッチ式（変数監視）：変数の値をリアルタイムで表示し、いつ変わったか追跡できる",
        "コールスタック：プログラムのコンパイルエラーを自動的に修正する"
      ],
      "correctAnswer": 3,
      "explanation": "「コールスタック：プログラムのコンパイルエラーを自動的に修正する」は誤りです。コールスタックは関数呼び出しの履歴を表示する機能で、どの関数からどの関数が呼ばれたかを把握し、エラーの発生元を特定するために使います。エラーを自動修正する機能ではありません。その他の選択肢は正しく、ブレークポイントで実行を止めて変数を確認、ステップ実行で1行ずつ追跡、ウォッチ式で変数の変化を監視、というのがデバッガの主な機能です。デバッガを使うことで、print文を大量に書かなくても効率的にバグを特定できます。"
    },
    {
      "id": "tech-4-1-5-q9",
      "type": "multiple_choice",
      "question": "デバッグの基本的な流れとして、最も適切なものはどれか。",
      "options": [
        "①コードを書く→②コンパイル→③エラーが出たら修正→④完成",
        "①バグの発生を確認→②仮説を立てる→③ブレークポイント設定→④デバッグ実行→⑤変数確認→⑥ステップ実行→⑦原因特定→⑧修正→⑨再テスト",
        "①print文を大量に挿入→②実行→③出力を確認→④修正",
        "①ランダムにコードを修正→②実行→③動けばOK"
      ],
      "correctAnswer": 1,
      "explanation": "デバッグの基本的な流れは、①バグの発生を確認（期待した結果と異なる）→②仮説を立てる（どの部分がおかしいか推測）→③ブレークポイント設定（怪しい箇所に設定）→④デバッグ実行（ブレークポイントで停止）→⑤変数の値を確認（ウォッチ式で期待値と比較）→⑥ステップ実行（1行ずつ追跡）→⑦原因を特定（おかしな箇所を発見）→⑧コードを修正→⑨再テスト（バグが解消されたか確認）、です。選択肢3のprint文を使う方法も可能ですが、デバッガを使う方が効率的です。選択肢4のランダムな修正は非効率で、バグを増やすリスクがあります。"
    },
    {
      "id": "tech-4-1-5-q10",
      "type": "multiple_choice",
      "question": "条件付きブレークポイントの説明として、最も適切なものはどれか。",
      "options": [
        "すべてのループで必ず実行を停止する機能",
        "特定条件を満たした時のみ実行を停止する機能で、例えばループ変数iが100の時のみ停止させることができる",
        "エラーが発生した時のみ実行を停止する機能",
        "関数呼び出しの回数を記録する機能"
      ],
      "correctAnswer": 1,
      "explanation": "条件付きブレークポイントは、特定条件を満たした時のみ実行を停止する機能です。例えば、for文でi=0から999までループする場合、通常のブレークポイントでは1000回も停止してしまいますが、条件付きブレークポイント（例：i==100）を設定すると、iが100の時のみ停止します。これにより、大量ループの特定回のみを効率的に調査できます。選択肢1の「すべてのループで停止」は通常のブレークポイント、選択肢3の「エラー発生時のみ停止」は例外ブレークポイント、選択肢4は該当する機能がありません。条件付きブレークポイントは、デバッグの効率化に非常に役立ちます。"
    }
  ]
}
