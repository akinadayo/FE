{
  "topicId": "tech-2-1-1",
  "title": "プロセッサ(CPU)",
  "questions": [
    {
      "id": "tech-2-1-1-q001",
      "type": "multiple_choice",
      "question": "コンピュータの5大装置に含まれないものはどれか。",
      "options": [
        "制御装置",
        "演算装置",
        "通信装置",
        "主記憶装置"
      ],
      "correctAnswer": 2,
      "explanation": "コンピュータの5大装置は、制御装置、演算装置、主記憶装置、入力装置、出力装置です。通信装置は5大装置には含まれません。制御装置と演算装置を合わせてCPU(中央処理装置)と呼びます。この5大装置の構成は、ノイマン型コンピュータの基本アーキテクチャとして知られています。"
    },
    {
      "id": "tech-2-1-1-q002",
      "type": "multiple_choice",
      "question": "プログラムカウンタ(PC)の役割として、最も適切なものはどれか。",
      "options": [
        "現在実行中の命令を格納する",
        "次に実行する命令のアドレスを保持する",
        "演算結果を一時的に保存する",
        "割込み処理の優先順位を管理する"
      ],
      "correctAnswer": 1,
      "explanation": "プログラムカウンタ(PC:Program Counter)は、次に実行する命令が格納されているメモリアドレスを保持するレジスタです。命令を実行するたびにプログラムカウンタの値が更新され、通常は次の命令のアドレスが設定されます。分岐命令の場合は、分岐先のアドレスが設定されます。現在実行中の命令を格納するのは命令レジスタ(IR)の役割です。"
    },
    {
      "id": "tech-2-1-1-q003",
      "type": "multiple_choice",
      "question": "命令実行の手順を正しく並べたものはどれか。",
      "options": [
        "デコード → フェッチ → 実行",
        "フェッチ → デコード → 実行",
        "実行 → フェッチ → デコード",
        "フェッチ → 実行 → デコード"
      ],
      "correctAnswer": 1,
      "explanation": "命令実行の手順は次の3段階で行われます:\n1. フェッチ(fetch):プログラムカウンタが示すアドレスから命令を読み出し、命令レジスタに格納\n2. デコード(decode):命令レジスタの内容を解読し、どのような操作を行うかを判断\n3. 実行(execute):解読された命令に従って演算や転送などの処理を実行\nこのサイクルを「命令サイクル」または「フェッチ・デコード・実行サイクル」と呼びます。"
    },
    {
      "id": "tech-2-1-1-q004",
      "type": "multiple_choice",
      "question": "即値アドレス指定方式の説明として、最も適切なものはどれか。",
      "options": [
        "命令の中に直接データ(即値)が含まれている",
        "命令の中にデータが格納されているアドレスが含まれている",
        "命令の中にデータのアドレスが格納されているアドレスが含まれている",
        "ベースレジスタの値と変位の和でアドレスを求める"
      ],
      "correctAnswer": 0,
      "explanation": "即値アドレス指定方式は、命令の中に直接データ(即値:immediate value)が含まれている方式です。メモリアクセスが不要なため高速に実行できますが、命令のビット数に制限があるため、扱えるデータの大きさに制約があります。例えば、「レジスタAに5を加算する」という命令の場合、5という値が命令の一部として含まれます。メモリアクセスが不要なため、最も高速なアドレス指定方式の一つです。"
    },
    {
      "id": "tech-2-1-1-q005",
      "type": "multiple_choice",
      "question": "クロック周波数が2GHz、CPI(Cycles Per Instruction)が4のCPUにおいて、1秒間に実行できる命令数はおよそ何MIPSか。",
      "options": [
        "500MIPS",
        "2000MIPS",
        "4000MIPS",
        "8000MIPS"
      ],
      "correctAnswer": 0,
      "explanation": "MIPS(Million Instructions Per Second)は次の式で計算できます:\nMIPS = クロック周波数 / CPI\n\nクロック周波数 = 2GHz = 2000MHz = 2000×10^6 Hz\nCPI = 4\n\nMIPS = 2000MHz / 4 = 500MIPS\n\n1秒間に実行できる命令数は約500百万命令、つまり500MIPSとなります。CPIは1命令の実行に必要な平均クロックサイクル数を表します。"
    },
    {
      "id": "tech-2-1-1-q006",
      "type": "multiple_choice",
      "question": "パイプライン処理の説明として、最も適切なものはどれか。",
      "options": [
        "複数の命令を並列に処理することで、見かけ上の処理速度を向上させる技術",
        "複数のCPUを使用して同時に異なるプログラムを実行する技術",
        "メモリアクセスを高速化するためにキャッシュメモリを使用する技術",
        "命令を細かく分割して異なる機能を持つ回路で同時に実行する技術"
      ],
      "correctAnswer": 3,
      "explanation": "パイプライン処理は、命令実行を複数の段階(フェッチ、デコード、実行など)に分割し、異なる命令をそれぞれの段階で同時並行的に処理する技術です。例えば、5段階のパイプラインでは、命令Aが実行段階にある間に、命令Bはデコード段階、命令Cはフェッチ段階にあるというように、複数の命令を流れ作業的に処理します。これにより、1命令あたりの見かけ上の実行時間を短縮できます。ただし、分岐命令やデータ依存などによってパイプラインが停止する「パイプラインハザード」が発生することがあります。"
    },
    {
      "id": "tech-2-1-1-q007",
      "type": "multiple_choice",
      "question": "スーパースカラの説明として、最も適切なものはどれか。",
      "options": [
        "命令をパイプライン処理することで高速化する技術",
        "複数の演算器を持ち、複数の命令を同時に実行する技術",
        "命令セットを単純化することで高速化する技術",
        "キャッシュメモリを多層化することで高速化する技術"
      ],
      "correctAnswer": 1,
      "explanation": "スーパースカラは、CPU内に複数の演算器(実行ユニット)を配置し、複数の命令を同時に実行する技術です。パイプライン処理と組み合わせることで、さらなる高速化が可能になります。例えば、2つの演算器を持つスーパースカラCPUでは、依存関係のない2つの命令を同時に実行できます。これにより、理論上は通常のパイプライン処理の2倍の性能を実現できます。現代のほとんどのCPUはスーパースカラアーキテクチャを採用しています。"
    },
    {
      "id": "tech-2-1-1-q008",
      "type": "multiple_choice",
      "question": "RISC(Reduced Instruction Set Computer)の特徴として、適切でないものはどれか。",
      "options": [
        "命令セットを単純化し、命令の種類を減らしている",
        "1命令の実行時間が短く、パイプライン処理に適している",
        "複雑な処理を1命令で実行できる",
        "レジスタの数が多い"
      ],
      "correctAnswer": 2,
      "explanation": "RISC(縮小命令セットコンピュータ)は、命令セットを単純化し、基本的な命令のみを用意することで高速化を図るアーキテクチャです。特徴として:\n- 命令の種類が少ない\n- 1命令の実行時間が短い(多くは1クロックサイクル)\n- パイプライン処理に適している\n- レジスタの数が多い\n- 複雑な処理は複数の命令の組み合わせで実現\n\n複雑な処理を1命令で実行できるのはCISC(Complex Instruction Set Computer)の特徴です。RISCでは複雑な処理も単純な命令の組み合わせで実現します。"
    },
    {
      "id": "tech-2-1-1-q009",
      "type": "multiple_choice",
      "question": "間接アドレス指定方式の説明として、最も適切なものはどれか。",
      "options": [
        "命令の中に実際のデータが含まれている",
        "命令の中にデータのアドレスが含まれている",
        "命令の中にデータのアドレスが格納されているアドレスが含まれている",
        "インデックスレジスタの値と命令中の変位を加算してアドレスを求める"
      ],
      "correctAnswer": 2,
      "explanation": "間接アドレス指定方式は、命令中に含まれるアドレスが、実際のデータが格納されているアドレスを指しているアドレス(ポインタ)である方式です。つまり、2段階のメモリアクセスが必要になります:\n1. 命令中のアドレスからポインタ(データのアドレス)を取得\n2. そのポインタが示すアドレスから実際のデータを取得\n\n間接アドレス指定は、配列やポインタ、動的データ構造の実装に有用ですが、メモリアクセスが2回必要なため、直接アドレス指定より実行速度は遅くなります。"
    },
    {
      "id": "tech-2-1-1-q010",
      "type": "multiple_choice",
      "question": "ノイマン型コンピュータの特徴として、最も適切なものはどれか。",
      "options": [
        "プログラムとデータを同じメモリに格納し、逐次的に命令を実行する",
        "プログラムは専用のROMに格納し、データはRAMに格納する",
        "複数のプログラムを同時並列に実行する",
        "命令とデータを別々のバスで転送する"
      ],
      "correctAnswer": 0,
      "explanation": "ノイマン型コンピュータ(プログラム内蔵方式)の最大の特徴は、プログラム(命令)とデータを同じメモリ(主記憶装置)に格納し、プログラムカウンタに従って逐次的に命令を読み出して実行する点です。この方式により、プログラムを柔軟に変更でき、汎用的なコンピュータが実現できました。ノイマン型の特徴:\n- プログラム内蔵方式(stored-program)\n- 逐次制御方式\n- 5大装置(制御、演算、記憶、入力、出力)で構成\n\n現代のほとんどのコンピュータはノイマン型アーキテクチャを基本としています。"
    }
  ]
}
