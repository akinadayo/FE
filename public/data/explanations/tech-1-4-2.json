{
  "topicId": "tech-1-4-2",
  "title": "誤り制御",
  "pages": [
    {
      "id": 1,
      "title": "誤り制御の基礎",
      "sections": [
        {
          "type": "text",
          "content": "データ通信においては、ノイズや電波障害などの影響でデータが誤って伝送されることがあります。誤り制御とは、このような伝送エラーを検出し、必要に応じて訂正する技術です。"
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "誤り制御の重要性",
          "content": "ネットワーク通信では、データの正確性が非常に重要です。誤りを検出・訂正することで、信頼性の高い通信を実現できます。"
        },
        {
          "type": "text",
          "content": "誤り制御には、大きく分けて「誤り検出」と「誤り訂正」の2つの方法があります。検出は誤りの有無を判定し、訂正は誤りを修正します。"
        },
        {
          "type": "table",
          "headers": ["方式", "概要", "特徴"],
          "rows": [
            ["誤り検出", "誤りの有無を検出する", "実装が簡単、再送が必要"],
            ["誤り訂正", "誤りを自動的に訂正する", "実装が複雑、再送不要"]
          ]
        },
        {
          "type": "list",
          "items": [
            "パリティチェック：最も基本的な誤り検出方式",
            "水平垂直パリティチェック：2次元のパリティチェック",
            "CRC（巡回冗長検査）：高度な誤り検出方式",
            "ハミング符号：誤り訂正が可能な方式"
          ]
        },
        {
          "type": "highlight",
          "icon": "📌",
          "title": "試験対策のポイント",
          "content": "各誤り制御方式の特徴と、どの程度の誤りを検出・訂正できるかを理解することが重要です。特にパリティチェックとCRCの違いを押さえましょう。"
        }
      ]
    },
    {
      "id": 2,
      "title": "パリティチェック",
      "sections": [
        {
          "type": "text",
          "content": "パリティチェックは、データに1ビットの検査用ビット（パリティビット）を付加して、誤りを検出する最も基本的な方式です。"
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "パリティビットの原理",
          "content": "データ中の1の個数が偶数または奇数になるようにパリティビットを設定します。受信側でこの規則が守られているかを確認します。"
        },
        {
          "type": "table",
          "headers": ["パリティ種別", "1の個数", "例（7ビットデータ：1010101）"],
          "rows": [
            ["偶数パリティ", "偶数にする", "1010101 + 1 = 10101011（1が6個）"],
            ["奇数パリティ", "奇数にする", "1010101 + 0 = 10101010（1が5個）"]
          ]
        },
        {
          "type": "text",
          "content": "パリティチェックの利点は実装が簡単で処理が高速なことです。しかし、欠点として以下の制限があります。"
        },
        {
          "type": "list",
          "items": [
            "1ビットの誤りは検出できる",
            "2ビットの誤りは検出できない（パリティが変わらないため）",
            "3ビットの誤りは検出できる（パリティが変わるため）",
            "誤りの位置は特定できない（訂正不可能）"
          ]
        },
        {
          "type": "example",
          "title": "例題：偶数パリティ",
          "content": "データ「1100110」に偶数パリティビットを付加した場合、パリティビットは何になるか。",
          "solution": "答え：0\n\n解説：データ中の1は4個（偶数）なので、偶数パリティを保つためにパリティビットは0になります。結果は「11001100」となります。"
        },
        {
          "type": "highlight",
          "icon": "⚠️",
          "title": "注意点",
          "content": "偶数個のビット誤りは検出できません。そのため、より高度な誤り検出には他の方式を使用します。"
        }
      ]
    },
    {
      "id": 3,
      "title": "水平垂直パリティチェック",
      "sections": [
        {
          "type": "text",
          "content": "水平垂直パリティチェックは、データを2次元の表形式で配置し、水平（行）方向と垂直（列）方向の両方にパリティビットを付加する方式です。"
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "2次元パリティの利点",
          "content": "水平と垂直の両方向でチェックすることで、単純なパリティチェックよりも高い検出能力を持ち、誤りの位置も特定できます。"
        },
        {
          "type": "table",
          "headers": ["", "ビット1", "ビット2", "ビット3", "ビット4", "水平パリティ"],
          "rows": [
            ["バイト1", "1", "0", "1", "1", "1"],
            ["バイト2", "0", "1", "0", "1", "0"],
            ["バイト3", "1", "1", "0", "0", "0"],
            ["垂直パリティ", "0", "0", "1", "0", "1"]
          ]
        },
        {
          "type": "text",
          "content": "水平垂直パリティチェックの特徴は以下の通りです。"
        },
        {
          "type": "list",
          "items": [
            "1ビットの誤り：検出可能、かつ位置を特定して訂正可能",
            "2ビットの誤り：同じ行または列なら検出可能",
            "3ビットの誤り：配置により検出できる場合とできない場合がある",
            "4ビットの誤り：矩形配置の場合は検出不可能"
          ]
        },
        {
          "type": "example",
          "title": "例題：誤り訂正",
          "content": "次のデータで水平パリティと垂直パリティの両方がエラーを示した場合、どのビットが誤っているか。\n\n  B1 B2 B3 HP\nD1 1  0  1  0 ← エラー\nD2 0  1  0  1\nVP 1  0  1\n      ↑\n    エラー",
          "solution": "答え：D1のB2（2行1列目）\n\n解説：水平パリティエラーがD1行、垂直パリティエラーがB2列なので、その交点であるD1-B2のビットが誤っていると特定できます。"
        },
        {
          "type": "highlight",
          "icon": "📌",
          "title": "試験のポイント",
          "content": "水平垂直パリティは1ビット誤りを訂正できることが重要です。ただし、複数ビット誤りには弱点があります。"
        }
      ]
    },
    {
      "id": 4,
      "title": "CRC（巡回冗長検査）",
      "sections": [
        {
          "type": "text",
          "content": "CRC（Cyclic Redundancy Check：巡回冗長検査）は、多項式演算を利用した高度な誤り検出方式です。イーサネットなど多くの通信プロトコルで採用されています。"
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "CRCの原理",
          "content": "送信データを生成多項式で割った余りを検査データ（FCS：Frame Check Sequence）として付加します。受信側で同じ計算を行い、余りが0になれば誤りなしと判定します。"
        },
        {
          "type": "list",
          "items": [
            "送信側：データを生成多項式で割り、余りをFCSとして付加",
            "受信側：受信データ全体を生成多項式で割る",
            "余りが0なら正常、0以外ならエラー",
            "計算には2進数のXOR演算（排他的論理和）を使用"
          ]
        },
        {
          "type": "table",
          "headers": ["特徴", "内容"],
          "rows": [
            ["検出能力", "バースト誤り（連続したビット誤り）に強い"],
            ["利用例", "イーサネット、USB、ZIP圧縮など"],
            ["標準規格", "CRC-16、CRC-32など（ビット長が異なる）"],
            ["誤り訂正", "不可能（検出のみ）"]
          ]
        },
        {
          "type": "highlight",
          "icon": "⚡",
          "title": "バースト誤りとは",
          "content": "連続した複数ビットが一度に誤る現象です。ノイズの影響で発生しやすく、CRCはこのような誤りの検出に優れています。"
        },
        {
          "type": "example",
          "title": "例題：CRCの特徴",
          "content": "CRCに関する記述として、最も適切なものはどれか。\n\nア：1ビットの誤りしか検出できない\nイ：誤りを検出して自動的に訂正できる\nウ：バースト誤りの検出に優れている\nエ：パリティチェックより検出能力が低い",
          "solution": "答え：ウ\n\n解説：CRCはバースト誤り（連続ビット誤り）の検出に優れた方式です。誤り訂正はできませんが、パリティチェックより高い検出能力を持ちます。"
        },
        {
          "type": "text",
          "content": "CRCは検出能力が高く、実装も比較的容易なため、データリンク層のプロトコルで広く使われています。"
        }
      ]
    },
    {
      "id": 5,
      "title": "ハミング符号",
      "sections": [
        {
          "type": "text",
          "content": "ハミング符号は、誤りの検出だけでなく自動訂正も可能な符号化方式です。複数の検査ビットを戦略的に配置することで実現します。"
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "ハミング符号の特徴",
          "content": "データビット数に応じて必要な検査ビット数が決まります。7ビットデータには4ビットの検査ビットを付加し、合計11ビットになります。"
        },
        {
          "type": "formula",
          "content": "2^r ≥ m + r + 1",
          "explanation": "r：検査ビット数、m：データビット数\nこの式を満たす最小のrが必要な検査ビット数です。"
        },
        {
          "type": "table",
          "headers": ["データビット数", "検査ビット数", "符号全体のビット数", "訂正能力"],
          "rows": [
            ["4ビット", "3ビット", "7ビット", "1ビット誤り訂正"],
            ["7ビット", "4ビット", "11ビット", "1ビット誤り訂正"],
            ["11ビット", "4ビット", "15ビット", "1ビット誤り訂正"],
            ["26ビット", "5ビット", "31ビット", "1ビット誤り訂正"]
          ]
        },
        {
          "type": "text",
          "content": "ハミング符号の動作原理は、検査ビットを2のべき乗の位置（1, 2, 4, 8, ...）に配置し、各検査ビットが特定のデータビットをチェックする仕組みです。"
        },
        {
          "type": "list",
          "items": [
            "1ビット誤りを自動的に訂正できる",
            "2ビット誤りは検出できるが訂正はできない",
            "メモリのECC（Error Correction Code）などに使用される",
            "誤り訂正が必要な用途に適している"
          ]
        },
        {
          "type": "example",
          "title": "例題：ハミング符号の検査ビット数",
          "content": "16ビットのデータをハミング符号で符号化する場合、最低何ビットの検査ビットが必要か。",
          "solution": "答え：5ビット\n\n解説：\n2^r ≥ m + r + 1 の式に m=16 を代入\n2^4 = 16 < 16 + 4 + 1 = 21（不足）\n2^5 = 32 ≥ 16 + 5 + 1 = 22（OK）\n\nしたがって、5ビットの検査ビットが必要です。"
        },
        {
          "type": "highlight",
          "icon": "📌",
          "title": "試験対策のまとめ",
          "content": "誤り制御方式の比較：パリティ（検出のみ）< CRC（高度な検出）< ハミング符号（訂正可能）。用途に応じて適切な方式を選択することが重要です。"
        }
      ]
    }
  ]
}
