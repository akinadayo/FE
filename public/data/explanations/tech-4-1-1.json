{
  "topicId": "tech-4-1-1",
  "title": "システム開発プロセス",
  "pages": [
    {
      "id": 1,
      "title": "システム開発プロセスの全体像と要件定義",
      "sections": [
        {
          "type": "text",
          "content": "**システム開発プロセス**とは、システムを企画・設計・実装・テスト・運用する一連の流れです。一般的なシステム開発プロセスは、①**要件定義**、②**システム設計**、③**プログラミング**、④**テスト**、⑤**移行と運用保守**、の5つのフェーズで構成されます。各フェーズが順番に実行され、前のフェーズの成果物が次のフェーズの入力になります（ウォーターフォールモデル）。この流れにより、システム開発の品質と効率が確保されます。"
        },
        {
          "type": "table",
          "headers": ["フェーズ", "主な作業内容", "成果物"],
          "rows": [
            ["①要件定義", "ユーザーのニーズを収集し、システムに必要な機能と制約を明確化", "要件定義書"],
            ["②システム設計", "要件を実現するための設計（外部設計、内部設計）", "設計書（外部設計書、内部設計書）"],
            ["③プログラミング", "設計書に基づいてプログラムを作成", "プログラムコード"],
            ["④テスト", "プログラムが正しく動作するか検証（単体→結合→システム→運用テスト）", "テスト仕様書、テスト結果報告書"],
            ["⑤移行と運用保守", "本番環境へ移行し、運用開始後の保守（バグ修正、機能追加）", "運用マニュアル、保守計画書"]
          ]
        },
        {
          "type": "text",
          "content": "**要件定義（Requirements Definition）**とは、ユーザー（発注者）のニーズを収集し、システムに必要な機能と制約を明確化するフェーズです。要件定義の成果物は**要件定義書**です。要件は、①**機能要件（Functional Requirements）**：システムが実現すべき機能（例: 商品を検索できる、注文できる）、②**非機能要件（Non-Functional Requirements）**：システムの性能や制約（例: 応答時間が1秒以内、99.9%の稼働率）、の2種類に分類されます。"
        },
        {
          "type": "example",
          "title": "要件定義の具体例：ECサイトの開発",
          "content": "【背景】\nある小売企業が、オンラインで商品を販売するECサイトを開発したいと考えています。\n\n【機能要件】\n①ユーザー登録・ログイン機能：顧客がアカウントを作成し、ログインできる\n②商品検索機能：キーワード、カテゴリ、価格帯で商品を検索できる\n③商品詳細表示：商品の写真、説明、価格、在庫状況を表示\n④カート機能：商品をカートに追加し、まとめて注文できる\n⑤注文・決済機能：クレジットカードで決済できる\n⑥注文履歴表示：過去の注文を確認できる\n⑦管理者機能：管理者が商品の追加・編集・削除、注文管理ができる\n\n【非機能要件】\n①性能要件：\n  - ページの応答時間は1秒以内\n  - 同時アクセス数1,000人に対応\n②可用性要件：\n  - 稼働率99.9%（ダウンタイムは年間8.76時間以内）\n③セキュリティ要件：\n  - クレジットカード情報は暗号化して保存\n  - 管理者機能へのアクセスは認証が必要\n④運用要件：\n  - バックアップは毎日自動実行\n  - ログは1年間保存\n⑤使いやすさ要件（ユーザビリティ）：\n  - スマートフォンでも使いやすい（レスポンシブデザイン）\n  - 購入完了まで3ステップ以内"
        },
        {
          "type": "table",
          "headers": ["要件の種類", "説明", "具体例"],
          "rows": [
            ["機能要件", "システムが実現すべき機能", "商品検索機能、注文機能、決済機能"],
            ["非機能要件", "システムの性能や制約", "応答時間1秒以内、稼働率99.9%、セキュリティ（暗号化）"]
          ]
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "要件定義の重要性",
          "content": "要件定義は、システム開発の最も重要なフェーズです。要件定義が不十分だと、開発の途中で「実は必要だった機能が抜けていた」「性能が要求を満たさない」などの問題が発覚し、大幅な手戻り（やり直し）が発生します。要件定義では、ユーザーと開発者が密にコミュニケーションを取り、「何を作るか」を明確にすることが重要です。"
        }
      ]
    },
    {
      "id": 2,
      "title": "システム設計（外部設計と内部設計）",
      "sections": [
        {
          "type": "text",
          "content": "**システム設計**とは、要件定義で明確化した要件を、どのように実現するかを設計するフェーズです。システム設計は、①**外部設計（External Design）**：ユーザーから見たシステムの仕様を設計、②**内部設計（Internal Design）**：システムの内部構造（プログラムの構造）を設計、の2段階に分かれます。外部設計は「何を作るか」を明確にし、内部設計は「どうやって作るか」を明確にします。"
        },
        {
          "type": "example",
          "title": "外部設計の具体例：ECサイトの画面設計",
          "content": "【外部設計の内容】\n外部設計では、ユーザーインターフェース（UI）、画面遷移、入出力項目、データ形式などを設計します。\n\n【ECサイトの外部設計】\n①画面設計：\n  - トップページ：商品カテゴリ一覧、検索ボックス、ログインボタン\n  - 商品一覧ページ：検索結果の商品リスト（写真、商品名、価格）\n  - 商品詳細ページ：商品の詳細情報、「カートに追加」ボタン\n  - カートページ：カート内の商品リスト、合計金額、「注文する」ボタン\n  - 注文確認ページ：配送先、決済方法、「注文確定」ボタン\n  - 注文完了ページ：注文番号、配送予定日\n\n②画面遷移：\n  トップページ → 商品一覧ページ → 商品詳細ページ → カートページ → 注文確認ページ → 注文完了ページ\n\n③入出力項目：\n  - 商品検索の入力：キーワード、カテゴリ、価格帯（最小値、最大値）\n  - 商品検索の出力：商品リスト（商品ID、商品名、価格、在庫状況）\n  - 注文の入力：商品ID、数量、配送先、決済方法\n  - 注文の出力：注文番号、合計金額、配送予定日\n\n④データ形式：\n  - 価格：整数（例: 1980円）\n  - 商品名：文字列（最大100文字）\n  - 配送先：郵便番号（7桁）、住所（最大200文字）"
        },
        {
          "type": "example",
          "title": "内部設計の具体例：ECサイトのプログラム構造設計",
          "content": "【内部設計の内容】\n内部設計では、プログラムの構造（モジュール分割）、データベース設計、処理フロー、アルゴリズムなどを設計します。\n\n【ECサイトの内部設計】\n①モジュール分割：\n  - ユーザー管理モジュール：ユーザー登録、ログイン、パスワード変更\n  - 商品管理モジュール：商品の追加・編集・削除、商品検索\n  - 注文管理モジュール：注文の登録、注文履歴の表示\n  - 決済モジュール：クレジットカード決済の処理\n  - 管理者モジュール：商品管理、注文管理の管理者向け機能\n\n②データベース設計：\n  - ユーザーテーブル：ユーザーID、ユーザー名、メールアドレス、パスワード（ハッシュ化）\n  - 商品テーブル：商品ID、商品名、価格、在庫数、カテゴリID\n  - 注文テーブル：注文ID、ユーザーID、注文日時、合計金額、配送先\n  - 注文明細テーブル：注文明細ID、注文ID、商品ID、数量、単価\n\n③処理フロー（例: 商品検索）：\n  ①ユーザーが検索キーワード、カテゴリ、価格帯を入力\n  ②商品管理モジュールがデータベースから条件に合う商品を検索（SQL: SELECT * FROM 商品 WHERE 商品名 LIKE '%キーワード%' AND 価格 BETWEEN 最小値 AND 最大値）\n  ③検索結果を商品一覧ページに表示\n\n④アルゴリズム（例: 在庫チェック）：\n  ①ユーザーが商品をカートに追加する際、在庫数をチェック\n  ②在庫数 >= 注文数 の場合、カートに追加（在庫数を減らす）\n  ③在庫数 < 注文数 の場合、エラーメッセージを表示（「在庫不足」）"
        },
        {
          "type": "table",
          "headers": ["設計の種類", "対象", "主な設計内容"],
          "rows": [
            ["外部設計", "ユーザーから見たシステム", "画面設計、画面遷移、入出力項目、データ形式"],
            ["内部設計", "システムの内部構造", "モジュール分割、データベース設計、処理フロー、アルゴリズム"]
          ]
        },
        {
          "type": "highlight",
          "icon": "🔧",
          "title": "外部設計と内部設計の違い",
          "content": "外部設計は「ユーザーから見える部分」（画面、入出力）を設計し、内部設計は「プログラムの内部構造」（モジュール、データベース、処理フロー）を設計します。外部設計はユーザーと協議しながら進め、内部設計は開発者が技術的な観点から設計します。外部設計が完了してから内部設計を行うのが一般的です。"
        }
      ]
    },
    {
      "id": 3,
      "title": "プログラミング（コーディング）",
      "sections": [
        {
          "type": "text",
          "content": "**プログラミング（Programming、コーディング）**とは、内部設計書に基づいて、実際にプログラムコードを記述するフェーズです。プログラミングでは、設計書で定義されたモジュール、データベース、処理フローを、プログラミング言語（Java、Python、C、JavaScriptなど）で実装します。プログラミングの品質（可読性、保守性）を高めるために、コーディング規約（変数名の命名規則、インデント、コメント）を守ることが重要です。"
        },
        {
          "type": "example",
          "title": "プログラミングの具体例：商品検索機能の実装（疑似コード）",
          "content": "【設計書の内容】\n商品検索機能：ユーザーが入力したキーワード、カテゴリ、価格帯に合致する商品をデータベースから検索し、商品一覧を表示する。\n\n【プログラムコード（疑似コード）】\n```python\ndef search_products(keyword, category, min_price, max_price):\n    \"\"\"\n    商品を検索する関数\n    引数:\n        keyword: 検索キーワード（文字列）\n        category: カテゴリID（整数、0の場合は全カテゴリ）\n        min_price: 最小価格（整数）\n        max_price: 最大価格（整数）\n    戻り値:\n        商品リスト（商品ID、商品名、価格、在庫数）\n    \"\"\"\n    # データベース接続\n    db = connect_to_database()\n    \n    # SQL文の構築\n    sql = \"SELECT 商品ID, 商品名, 価格, 在庫数 FROM 商品 WHERE 1=1\"\n    \n    # キーワードが指定されている場合\n    if keyword:\n        sql += \" AND 商品名 LIKE '%\" + keyword + \"%'\"\n    \n    # カテゴリが指定されている場合\n    if category > 0:\n        sql += \" AND カテゴリID = \" + str(category)\n    \n    # 価格帯が指定されている場合\n    if min_price > 0 or max_price > 0:\n        sql += \" AND 価格 BETWEEN \" + str(min_price) + \" AND \" + str(max_price)\n    \n    # SQL文を実行\n    results = db.execute(sql)\n    \n    # 結果を返す\n    return results\n\n# 使用例\nproducts = search_products(keyword=\"ノートPC\", category=1, min_price=50000, max_price=100000)\nfor product in products:\n    print(product['商品名'], product['価格'], \"円\")\n```\n\n【プログラミングのポイント】\n①関数名・変数名は意味が分かりやすい名前を付ける（search_products、keyword、min_price）\n②コメントを記述して、関数の役割、引数、戻り値を明示\n③SQLインジェクション対策（実際のコードではプレースホルダを使用）\n④エラーハンドリング（データベース接続失敗、SQL実行エラー）を実装"
        },
        {
          "type": "highlight",
          "icon": "📌",
          "title": "コーディング規約の重要性",
          "content": "コーディング規約（Coding Standards）とは、プログラムコードの記述ルールです。コーディング規約を守ることで、①可読性：他の開発者がコードを読みやすくなる、②保守性：バグ修正や機能追加がしやすくなる、③品質：バグの混入を防ぐ、などの効果があります。代表的なコーディング規約として、①変数名・関数名の命名規則（キャメルケース、スネークケース）、②インデント（スペース2個または4個）、③コメントの記述（関数の先頭に説明を記述）、④1行の文字数制限（80文字以内）、などがあります。"
        }
      ]
    },
    {
      "id": 4,
      "title": "テスト工程（単体テスト、結合テスト、システムテスト、運用テスト）",
      "sections": [
        {
          "type": "text",
          "content": "**テスト**とは、プログラムが正しく動作するかを検証するフェーズです。テストは、①**単体テスト（Unit Test）**、②**結合テスト（Integration Test）**、③**システムテスト（System Test）**、④**運用テスト（Acceptance Test）**、の4段階で実施されます。各テストは、テスト対象の範囲と目的が異なります。テストの目的は、バグ（欠陥）を早期に発見し、品質を確保することです。"
        },
        {
          "type": "table",
          "headers": ["テストの種類", "テスト対象", "実施者", "目的"],
          "rows": [
            ["①単体テスト", "個々のモジュール（関数、クラス）", "開発者（プログラマ）", "各モジュールが設計通りに動作するか確認"],
            ["②結合テスト", "複数のモジュールを組み合わせたもの", "開発者（テスト担当）", "モジュール間のインターフェース（データの受け渡し）が正しいか確認"],
            ["③システムテスト", "システム全体", "テスト担当者", "システム全体が要件定義を満たすか確認（機能、性能、セキュリティ）"],
            ["④運用テスト", "本番環境に近い環境でのシステム全体", "ユーザー（発注者）", "実際の業務で使えるか確認（受け入れテスト）"]
          ]
        },
        {
          "type": "example",
          "title": "各テストの具体例：ECサイトのテスト",
          "content": "【①単体テスト】\nテスト対象：商品検索関数（search_products）\nテスト内容：\n  - キーワード「ノートPC」で検索 → 商品名に「ノートPC」を含む商品が返ってくるか確認\n  - カテゴリID=1で検索 → カテゴリID=1の商品のみが返ってくるか確認\n  - 価格帯50,000～100,000円で検索 → 価格が範囲内の商品のみが返ってくるか確認\n  - キーワード、カテゴリ、価格帯を全て指定した場合 → 全ての条件を満たす商品が返ってくるか確認\n  - 検索結果が0件の場合 → 空のリストが返ってくるか確認\n\n【②結合テスト】\nテスト対象：商品検索画面 + 商品検索関数 + データベース\nテスト内容：\n  - ユーザーが商品検索画面でキーワード「ノートPC」を入力して検索ボタンを押す → 商品検索関数が正しく呼ばれ、データベースから商品が取得され、商品一覧画面に表示されるか確認\n  - 検索結果が0件の場合 → 「検索結果がありません」というメッセージが表示されるか確認\n\n【③システムテスト】\nテスト対象：ECサイト全体\nテスト内容：\n  - 機能テスト：全ての機能（商品検索、カート、注文、決済、管理者機能）が正しく動作するか確認\n  - 性能テスト：同時アクセス数1,000人でも応答時間が1秒以内か確認（負荷テスト）\n  - セキュリティテスト：SQLインジェクション、XSS（クロスサイトスクリプティング）などの脆弱性がないか確認\n  - 使いやすさテスト：スマートフォンでも使いやすいか確認\n\n【④運用テスト】\nテスト対象：本番環境に近い環境でのECサイト全体\nテスト内容：\n  - 実際のユーザー（発注者）が、実際の業務フロー（商品検索→カート追加→注文→決済）を実行\n  - 業務マニュアルに従って操作できるか確認\n  - 管理者が商品の追加・編集・削除、注文管理を実行できるか確認\n  - 問題がなければ「受け入れ」を承認（受け入れテスト）"
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "テストの重要性",
          "content": "テストは、バグを早期に発見し、品質を確保するために不可欠です。一般的に、バグの修正コストは、発見が遅れるほど高くなります。単体テストでバグを発見すれば、該当モジュールのみ修正すればよいですが、運用テスト（本番稼働後）でバグを発見すると、大規模な修正が必要になり、コストが100倍以上になることもあります。テストは、単体テスト→結合テスト→システムテスト→運用テストの順に実施し、各段階でバグを発見・修正することが重要です。"
        }
      ]
    },
    {
      "id": 5,
      "title": "移行と運用保守",
      "sections": [
        {
          "type": "text",
          "content": "**移行（Migration）**とは、開発したシステムを本番環境に導入し、運用を開始することです。移行では、①データ移行（既存システムのデータを新システムに移行）、②環境構築（本番サーバの設定）、③並行稼働（旧システムと新システムを並行運用してデータを比較）、④本番稼働（新システムに完全移行）、などの作業を実施します。移行計画を事前に立て、トラブルに備えることが重要です。"
        },
        {
          "type": "text",
          "content": "**運用保守（Operation and Maintenance）**とは、本番稼働後のシステムを運用し、保守することです。運用保守には、①**運用（Operation）**：システムの日常的な運用（バックアップ、監視、障害対応）、②**保守（Maintenance）**：システムの修正や機能追加、の2つがあります。保守には、①**是正保守（Corrective Maintenance）**：バグ修正、②**適応保守（Adaptive Maintenance）**：環境変化（OSバージョンアップ）への対応、③**完全化保守（Perfective Maintenance）**：性能改善、④**予防保守（Preventive Maintenance）**：将来のトラブルを防ぐための改善、の4種類があります。"
        },
        {
          "type": "example",
          "title": "移行と運用保守の具体例：ECサイトの本番稼働",
          "content": "【移行】\n①データ移行：\n  - 既存の顧客管理システムから、ユーザー情報（ユーザー名、メールアドレス、住所）を新ECサイトのデータベースに移行\n  - 既存の商品マスタから、商品情報（商品名、価格、在庫数）を新ECサイトのデータベースに移行\n  - データ移行後、データの整合性をチェック（件数、合計金額が一致するか確認）\n\n②環境構築：\n  - 本番サーバ（Webサーバ、データベースサーバ）を設定\n  - SSL証明書を設定（HTTPS通信を有効化）\n  - ファイアウォール、バックアップの設定\n\n③並行稼働：\n  - 1週間、旧システムと新ECサイトを並行運用\n  - 新ECサイトで注文を受け付け、旧システムと注文データを比較\n  - 問題がなければ、新ECサイトに完全移行\n\n④本番稼働：\n  - 旧システムを停止し、新ECサイトのみで運用開始\n\n【運用保守】\n①運用：\n  - 毎日、バックアップを自動実行（データベース、プログラムコード）\n  - 監視ツールでサーバの負荷、エラーログを監視\n  - 障害発生時（サーバダウン）、速やかに復旧（バックアップからデータを復元）\n\n②保守：\n  - 是正保守：顧客から「商品検索で価格帯を指定すると、検索結果が0件になる」というバグ報告 → バグを修正してリリース\n  - 適応保守：クレジットカード決済のAPI仕様が変更 → 決済モジュールを修正して対応\n  - 完全化保守：「商品検索が遅い」という顧客の声 → データベースにインデックスを追加して検索速度を改善\n  - 予防保守：セキュリティパッチを適用して、脆弱性を修正"
        },
        {
          "type": "table",
          "headers": ["保守の種類", "目的", "具体例"],
          "rows": [
            ["是正保守", "バグ修正", "商品検索のバグを修正"],
            ["適応保守", "環境変化への対応", "クレジットカード決済API仕様変更への対応"],
            ["完全化保守", "性能改善、機能追加", "商品検索の高速化、新機能追加"],
            ["予防保守", "将来のトラブル防止", "セキュリティパッチの適用"]
          ]
        },
        {
          "type": "highlight",
          "icon": "📌",
          "title": "運用保守のコスト",
          "content": "システム開発のライフサイクル全体のコストのうち、運用保守のコストは60～80%を占めると言われています。開発フェーズのコストは20～40%程度で、運用保守のコストの方が圧倒的に高いです。そのため、開発フェーズで品質を高め、運用保守のコストを削減することが重要です。また、運用保守を見越した設計（保守性の高いコード、ドキュメント整備）が求められます。"
        }
      ]
    }
  ]
}
