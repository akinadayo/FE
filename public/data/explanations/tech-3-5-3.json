{
  "topicId": "tech-3-5-3",
  "title": "認証とアクセス制御",
  "pages": [
    {
      "id": 1,
      "title": "ユーザー認証の基礎とパスワード認証",
      "sections": [
        {
          "type": "text",
          "content": "**ユーザー認証（Authentication）**とは、システムにアクセスしようとする者が本人であることを確認するプロセスです。認証は情報セキュリティの最初の防御線であり、不正アクセスを防ぐために不可欠です。認証方式は、①**知識（Something You Know）**：パスワード、暗証番号など、②**所有物（Something You Have）**：ICカード、スマートフォンなど、③**生体（Something You Are）**：指紋、顔、虹彩など、の3つの要素（認証の三要素）に分類されます。これらを組み合わせることで、セキュリティ強度を高めることができます。"
        },
        {
          "type": "table",
          "headers": ["認証要素", "説明", "具体例", "利点", "欠点"],
          "rows": [
            ["知識", "本人だけが知っている情報", "パスワード、暗証番号、秘密の質問", "コストが低い、実装が簡単", "忘れる可能性、推測・盗聴されやすい"],
            ["所有物", "本人だけが持っている物", "ICカード、スマートフォン、ワンタイムパスワードトークン", "物理的な盗難がない限り安全", "紛失・盗難のリスク、コストが高い"],
            ["生体", "本人の身体的特徴", "指紋、顔、虹彩、声紋、静脈パターン", "偽造が困難、紛失の心配がない", "認証装置のコストが高い、誤認識の可能性"]
          ]
        },
        {
          "type": "text",
          "content": "**パスワード認証**は、最も一般的な認証方式で、ユーザーIDとパスワードの組み合わせで本人確認を行います。パスワードは、システム内でハッシュ化（一方向暗号化）して保存されます。ユーザーがログイン時に入力したパスワードをハッシュ化し、保存されているハッシュ値と比較することで認証します。平文（元のパスワード）を保存しないことで、データベースが漏洩してもパスワードが解読されにくくなります。"
        },
        {
          "type": "example",
          "title": "パスワード認証の仕組み（ハッシュ化を用いた安全な保存）",
          "content": "【ユーザー登録時】\n①ユーザーがユーザーID「user123」とパスワード「MyP@ssw0rd」を入力\n②システムは、パスワード「MyP@ssw0rd」をハッシュ関数（例: SHA-256）で一方向暗号化\n  ハッシュ値 = SHA-256(\"MyP@ssw0rd\") = \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"\n③データベースに、ユーザーID「user123」とハッシュ値「e3b0c...」を保存（平文のパスワードは保存しない）\n\n【ログイン時】\n①ユーザーがユーザーID「user123」とパスワード「MyP@ssw0rd」を入力\n②システムは、入力されたパスワード「MyP@ssw0rd」をハッシュ化\n  ハッシュ値 = SHA-256(\"MyP@ssw0rd\") = \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"\n③データベースから、ユーザーID「user123」のハッシュ値を取得\n④入力されたパスワードのハッシュ値と、データベースのハッシュ値を比較\n⑤一致すれば認証成功、不一致なら認証失敗（エラーメッセージ: 「ユーザーIDまたはパスワードが間違っています」）\n\n【ハッシュ化の利点】\nデータベースが漏洩しても、ハッシュ値から元のパスワードを逆算することは困難（ハッシュ関数は一方向なので）。レインボーテーブル攻撃を防ぐため、ソルト（ランダムな文字列）を追加してハッシュ化することが推奨されます。"
        },
        {
          "type": "example",
          "title": "パスワードの強度とセキュリティベストプラクティス",
          "content": "【弱いパスワードの例】\n①短いパスワード: \"abc123\"（6文字）\n②辞書にある単語: \"password\", \"welcome\"\n③推測しやすいパスワード: \"12345678\", \"qwerty\", 誕生日（\"19900101\"）\n④ユーザーIDと同じパスワード: ユーザーID「tanaka」、パスワード「tanaka」\n\n【強いパスワードの例】\n①長さ: 8文字以上（推奨は12文字以上）\n②複雑さ: 大文字・小文字・数字・記号を組み合わせる\n  例: \"MyP@ssw0rd2024!\" （大文字M、P、小文字y, a, s, s, w, r, d、数字2024、記号@, !）\n③予測不可能: 辞書にない文字列、個人情報を含まない\n\n【セキュリティベストプラクティス】\n①パスワードの定期変更: 3～6ヶ月ごとに変更（ただし、最近の研究では、定期変更を強制すると逆に弱いパスワードを設定する傾向があるという指摘もある）\n②同じパスワードを複数のサイトで使い回さない\n③二要素認証（2FA）を有効化する\n④パスワードマネージャーを使用する（複雑なパスワードを自動生成・保存）\n⑤総当たり攻撃（Brute Force Attack）対策: ログイン失敗回数を制限（例: 5回失敗したらアカウントロック）、ログイン試行間隔を設ける（例: 1秒に1回まで）"
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "パスワード攻撃の種類",
          "content": "①**総当たり攻撃（Brute Force Attack）**: 考えられる全てのパスワードを試す攻撃。対策: パスワードを長く複雑にする、ログイン失敗回数を制限。\n②**辞書攻撃（Dictionary Attack）**: 辞書にある単語や、よく使われるパスワードのリストを試す攻撃。対策: 辞書にない文字列を使う。\n③**パスワードリスト攻撃**: 他のサービスから漏洩したユーザーID・パスワードのリストを使い、複数のサービスで試す攻撃。対策: 同じパスワードを使い回さない。\n④**レインボーテーブル攻撃**: 事前計算されたハッシュ値のテーブルを使い、ハッシュ値から元のパスワードを逆引きする攻撃。対策: ソルト（ランダムな文字列）を追加してハッシュ化。"
        }
      ]
    },
    {
      "id": 2,
      "title": "バイオメトリクス認証と多要素認証",
      "sections": [
        {
          "type": "text",
          "content": "**バイオメトリクス認証（生体認証）**とは、人間の身体的特徴や行動的特徴を用いて本人確認を行う認証方式です。バイオメトリクス認証は、①**身体的特徴（Physiological）**: 指紋、顔、虹彩、静脈パターン、DNA、②**行動的特徴（Behavioral）**: 声紋、署名（筆跡）、キーストローク（タイピングのリズム）、に分類されます。バイオメトリクス認証の利点は、①偽造が困難、②紛失・忘れる心配がない、③利便性が高い（パスワード入力不要）、です。一方、欠点は、①誤認識の可能性（本人拒否率FRR、他人受入率FAR）、②認証装置のコストが高い、③身体的特徴が変化する可能性（怪我、加齢）、④プライバシーの懸念（生体情報の漏洩は取り返しがつかない）、です。"
        },
        {
          "type": "table",
          "headers": ["バイオメトリクス認証の種類", "説明", "具体例", "精度", "導入事例"],
          "rows": [
            ["指紋認証", "指紋のパターン（隆線の形状）を読み取る", "スマートフォンのロック解除、入退室管理", "高（誤認識率 < 1%）", "iPhone Touch ID、オフィスの入退室管理"],
            ["顔認証", "顔の特徴点（目・鼻・口の位置、形状）を読み取る", "スマートフォンのロック解除、空港の自動ゲート", "中～高（精度はカメラの性能に依存）", "iPhone Face ID、空港の顔認証ゲート"],
            ["虹彩認証", "虹彩（目の黒目の周りの模様）を読み取る", "高セキュリティ施設の入退室管理", "非常に高（誤認識率 < 0.0001%）", "銀行の金庫室、研究施設"],
            ["静脈認証", "手のひらや指の静脈パターンを読み取る", "ATMの本人確認、入退室管理", "高", "銀行ATM（手のひら静脈認証）、企業の入退室"],
            ["声紋認証", "声の特徴（周波数、音色）を分析", "電話での本人確認、音声アシスタント", "中（環境音、風邪で精度低下）", "コールセンターの本人確認"]
          ]
        },
        {
          "type": "text",
          "content": "バイオメトリクス認証の精度は、①**本人拒否率（FRR: False Rejection Rate）**: 本人を誤って拒否する確率、②**他人受入率（FAR: False Acceptance Rate）**: 他人を誤って受け入れる確率、の2つの指標で評価されます。FRRを下げると、FARが上がり、その逆も成り立ちます（トレードオフの関係）。両者のバランスを取る点を**等価エラー率（EER: Equal Error Rate）**と呼び、EERが低いほど精度が高いと言えます。例えば、セキュリティを重視する場合はFARを低く設定（他人を受け入れない）し、利便性を重視する場合はFRRを低く設定（本人を拒否しない）します。"
        },
        {
          "type": "example",
          "title": "バイオメトリクス認証の具体例：スマートフォンの顔認証",
          "content": "【登録フェーズ】\n①ユーザーがスマートフォンのカメラで自分の顔を撮影（複数の角度から）\n②スマートフォンは、顔の特徴点（目・鼻・口の位置、形状）を抽出し、特徴ベクトル（数値データ）に変換\n③特徴ベクトルをスマートフォンの安全な領域（例: iPhoneのSecure Enclave）に暗号化して保存\n\n【認証フェーズ】\n①ユーザーがスマートフォンのカメラで自分の顔を撮影\n②スマートフォンは、撮影した顔から特徴ベクトルを抽出\n③抽出した特徴ベクトルと、登録時の特徴ベクトルを比較\n④類似度が閾値以上なら認証成功（ロック解除）、閾値未満なら認証失敗\n\n【セキュリティ対策】\n①写真を使ったなりすましを防ぐため、3Dセンサー（深度カメラ）で顔の立体構造を確認（例: iPhone Face IDは赤外線カメラで3D構造を確認）\n②目を閉じている場合は認証しない（注視検出）\n③マスクや眼鏡をしていても認証できるよう、複数の条件で学習"
        },
        {
          "type": "text",
          "content": "**多要素認証（MFA: Multi-Factor Authentication）**とは、認証の三要素（知識、所有物、生体）のうち、2つ以上を組み合わせて認証する方式です。**二要素認証（2FA: Two-Factor Authentication）**は、2つの要素を組み合わせます。例えば、①パスワード（知識）+ スマートフォンのワンタイムパスワード（所有物）、②パスワード（知識）+ 指紋認証（生体）、などです。多要素認証により、1つの要素が破られても、他の要素で防御できるため、セキュリティが大幅に向上します。例えば、パスワードが漏洩しても、ワンタイムパスワードがなければログインできません。"
        },
        {
          "type": "example",
          "title": "二要素認証の具体例：オンラインバンキング",
          "content": "【ログイン時の二要素認証】\n①ユーザーがユーザーIDとパスワードを入力（第1要素: 知識）\n②パスワード認証が成功すると、システムはユーザーのスマートフォンにワンタイムパスワード（6桁の数字）を送信（SMSまたはアプリ）\n③ユーザーがワンタイムパスワードを入力（第2要素: 所有物）\n④ワンタイムパスワードが正しければ、ログイン成功\n\n【ワンタイムパスワードの仕組み】\nワンタイムパスワードは、1回限り有効なパスワードで、一定時間（例: 30秒～3分）で無効になります。生成方式は、①**時刻ベース（TOTP: Time-based One-Time Password）**: 現在時刻と秘密鍵を使って生成（例: Google Authenticator）、②**イベントベース（HOTP: HMAC-based One-Time Password）**: カウンタと秘密鍵を使って生成、の2種類があります。\n\n【利点】\n①パスワードが漏洩しても、ワンタイムパスワードがなければログインできない\n②ワンタイムパスワードは1回限り有効なので、盗聴されても再利用できない\n\n【欠点】\n①スマートフォンを紛失すると、ログインできなくなる（対策: バックアップコードを事前に保存）\n②SMS送信の遅延や、電波が届かない場所ではワンタイムパスワードを受信できない"
        },
        {
          "type": "highlight",
          "icon": "🔧",
          "title": "多要素認証の重要性",
          "content": "多要素認証は、近年のサイバー攻撃の高度化に対応するために不可欠です。パスワードだけでは、フィッシング攻撃やパスワードリスト攻撃で簡単に突破されてしまいます。多要素認証を導入することで、不正アクセスのリスクを大幅に削減できます（Microsoftの調査によると、二要素認証により99.9%の自動攻撃を防げるとされています）。重要なシステム（オンラインバンキング、企業の社内システム、クラウドサービス）では、多要素認証の導入が推奨されています。"
        }
      ]
    },
    {
      "id": 3,
      "title": "ワンタイムパスワードとCAPTCHA",
      "sections": [
        {
          "type": "text",
          "content": "**ワンタイムパスワード（OTP: One-Time Password）**とは、1回限り有効なパスワードです。一定時間（30秒～3分）で無効になるため、盗聴されても再利用できません。ワンタイムパスワードの生成方式は、①**時刻ベース（TOTP: Time-based One-Time Password）**: 現在時刻と秘密鍵を使って生成、②**イベントベース（HOTP: HMAC-based One-Time Password）**: カウンタ（ログイン回数）と秘密鍵を使って生成、の2種類があります。TOTPは、スマートフォンアプリ（Google Authenticator、Microsoft Authenticator）で広く使われています。"
        },
        {
          "type": "example",
          "title": "TOTPの仕組み（Google Authenticator）",
          "content": "【登録フェーズ】\n①ユーザーがWebサービスで二要素認証を有効化\n②Webサービスは、秘密鍵（ランダムな文字列）を生成し、QRコードとして表示\n③ユーザーがスマートフォンのGoogle AuthenticatorアプリでQRコードをスキャン\n④Google Authenticatorアプリは、秘密鍵をスマートフォンに保存\n\n【認証フェーズ】\n①ユーザーがWebサービスにログイン（ユーザーID・パスワードを入力）\n②Webサービスは、ワンタイムパスワードの入力を要求\n③ユーザーがGoogle Authenticatorアプリを開く\n④Google Authenticatorアプリは、現在時刻と秘密鍵を使って、6桁のワンタイムパスワードを生成\n  例: TOTP = HMAC-SHA1(秘密鍵, 現在時刻 / 30秒) の下6桁\n  現在時刻が「2024年1月1日 12:00:00」の場合、ワンタイムパスワード = \"123456\"\n  30秒後（12:00:30）には、別のワンタイムパスワード = \"789012\" が生成される\n⑤ユーザーがワンタイムパスワード「123456」を入力\n⑥Webサービスは、同じアルゴリズム（現在時刻と秘密鍵）でワンタイムパスワードを生成し、ユーザーの入力と比較\n⑦一致すればログイン成功\n\n【時刻同期の問題】\nスマートフォンとWebサーバの時刻がずれていると、ワンタイムパスワードが一致しません。対策として、Webサーバは現在時刻の前後1～2ステップ（±30秒～1分）のワンタイムパスワードも受け付けます。"
        },
        {
          "type": "table",
          "headers": ["ワンタイムパスワードの種類", "生成方法", "有効期限", "具体例", "利点", "欠点"],
          "rows": [
            ["TOTP（時刻ベース）", "現在時刻 + 秘密鍵", "30秒～1分", "Google Authenticator、Microsoft Authenticator", "オフラインで生成可能、サーバと同期不要", "時刻ずれで認証失敗の可能性"],
            ["HOTP（イベントベース）", "カウンタ + 秘密鍵", "無期限（1回使用まで）", "ハードウェアトークン（銀行のワンタイムパスワード生成器）", "時刻ずれの影響なし", "カウンタの同期が必要"],
            ["SMS送信", "サーバが生成し、SMSで送信", "3～5分", "オンラインバンキング、SNS", "専用アプリ不要", "SMS送信の遅延、SIMスワップ攻撃のリスク"]
          ]
        },
        {
          "type": "text",
          "content": "**CAPTCHA（キャプチャ）**とは、人間とボット（自動プログラム）を区別するための認証技術です。CAPTCHAは「Completely Automated Public Turing test to tell Computers and Humans Apart（コンピュータと人間を区別する完全自動化された公開チューリングテスト）」の略です。CAPTCHAの目的は、①スパム投稿の防止（掲示板、コメント欄）、②総当たり攻撃の防止（ログイン画面）、③自動登録の防止（無料サービスの大量登録）、などです。CAPTCHAの種類は、①**テキストCAPTCHA**: 歪んだ文字列を読み取る、②**画像CAPTCHA**: 「信号機を全て選択してください」などの画像選択、③**reCAPTCHA**: Googleが提供するCAPTCHA（「私はロボットではありません」のチェックボックス）、などがあります。"
        },
        {
          "type": "example",
          "title": "CAPTCHAの具体例：reCAPTCHA v2とv3",
          "content": "【reCAPTCHA v2（チェックボックス方式）】\n①ユーザーがWebサイトのログイン画面で、「私はロボットではありません」のチェックボックスをクリック\n②reCAPTCHAは、ユーザーの行動（マウスの動き、クリックのタイミング）を分析\n③人間らしい行動と判断されれば、チェックマークが表示され、認証成功\n④ボットと疑われる場合、画像選択問題が表示される（例: 「信号機を全て選択してください」）\n⑤正しく選択できれば認証成功\n\n【reCAPTCHA v3（スコアベース方式）】\n①ユーザーがWebサイトにアクセス\n②reCAPTCHA v3は、バックグラウンドでユーザーの行動を分析（マウスの動き、スクロール、滞在時間など）\n③ユーザーの「人間らしさ」をスコア化（0.0～1.0、1.0に近いほど人間らしい）\n④Webサイトは、スコアに応じて処理を分岐\n  - スコア 0.7以上: そのままログインを許可\n  - スコア 0.3～0.7: 二要素認証を要求\n  - スコア 0.3未満: ログインを拒否\n\n【reCAPTCHA v3の利点】\nユーザーは画像選択などの操作をする必要がなく、シームレスに認証できます。Webサイト側は、スコアに応じて柔軟にセキュリティ対策を実施できます。\n\n【reCAPTCHAの欠点】\nアクセシビリティの問題（視覚障害者は画像選択が困難）、プライバシーの懸念（Googleがユーザーの行動を追跡）、完全ではない（高度なボットは突破可能）。"
        },
        {
          "type": "highlight",
          "icon": "📌",
          "title": "CAPTCHAの進化とボットとの攻防",
          "content": "CAPTCHAは、ボットの進化に合わせて常に進化しています。初期のテキストCAPTCHA（歪んだ文字列）は、機械学習により簡単に突破されるようになりました。そのため、画像選択やreCAPTCHA v3のような行動分析を用いた方式が主流になっています。しかし、高度なボットは人間の行動を模倣することで、これらのCAPTCHAを突破しようとします。そのため、CAPTCHAとボットの攻防は今後も続くと考えられます。Webサイト運営者は、CAPTCHAだけでなく、レート制限（1分間に10回までログイン試行可能）、IPアドレスのブロックリスト、異常行動の検知などを組み合わせて、総合的なセキュリティ対策を実施する必要があります。"
        }
      ]
    },
    {
      "id": 4,
      "title": "シングルサインオン（SSO）とOAuth",
      "sections": [
        {
          "type": "text",
          "content": "**シングルサインオン（SSO: Single Sign-On）**とは、1回の認証で複数のシステムやサービスにアクセスできる仕組みです。ユーザーは、最初に認証サーバ（IDプロバイダ）でログインすると、以降は他のシステム（サービスプロバイダ）に自動的にログインできます。SSOの利点は、①ユーザーの利便性向上（複数のパスワードを覚える必要がない）、②セキュリティの向上（パスワードの使い回しを防ぐ、統一的なパスワードポリシーを適用）、③管理コストの削減（ユーザー管理を集中化）、です。SSOの実現方式は、①**SAML（Security Assertion Markup Language）**: 企業の社内システムで広く使われる、②**OAuth（Open Authorization）**: SNSログイン（Googleアカウントでログイン）で広く使われる、③**OpenID Connect**: OAuthの上位層で認証機能を提供、などがあります。"
        },
        {
          "type": "example",
          "title": "SSOの具体例：企業の社内システム（SAML方式）",
          "content": "【シナリオ】\nある企業には、①人事システム、②経費精算システム、③社内Wiki、の3つのシステムがあります。従来は、各システムで個別にログインする必要がありましたが、SSOを導入することで、1回のログインで全てのシステムにアクセスできるようになりました。\n\n【SSO導入前】\n①社員が人事システムにアクセス → ユーザーID・パスワードを入力\n②社員が経費精算システムにアクセス → 別のユーザーID・パスワードを入力\n③社員が社内Wikiにアクセス → さらに別のユーザーID・パスワードを入力\n→ 社員は3つのパスワードを覚える必要があり、管理が煩雑\n\n【SSO導入後（SAML方式）】\n①社員が人事システムにアクセス\n②人事システムは、認証サーバ（IDプロバイダ）にリダイレクト\n③社員が認証サーバでユーザーID・パスワードを入力（初回のみ）\n④認証サーバは、認証成功後、SAMLアサーション（認証トークン）を発行し、人事システムにリダイレクト\n⑤人事システムは、SAMLアサーションを検証し、ログインを許可\n⑥社員が経費精算システムにアクセス\n⑦経費精算システムは、認証サーバにリダイレクト\n⑧認証サーバは、既にログイン済みなので、SAMLアサーションを発行し、経費精算システムにリダイレクト（パスワード入力不要）\n⑨経費精算システムは、SAMLアサーションを検証し、ログインを許可\n⑩社内Wikiにアクセスする際も、同様にパスワード入力不要でログインできる\n\n【SAMLアサーション】\nSAMLアサーションは、XML形式の認証情報で、①ユーザーID、②認証時刻、③有効期限、④署名（改ざん防止）、などが含まれます。"
        },
        {
          "type": "text",
          "content": "**OAuth（オーオース）**とは、サードパーティアプリケーションに、ユーザーのリソースへのアクセス権限を委譲するためのプロトコルです。OAuth 2.0が現在の標準です。OAuthの目的は、①ユーザーがパスワードをサードパーティアプリに渡さずに、リソースへのアクセスを許可できる、②アクセス範囲を制限できる（例: 「プロフィール情報のみ読み取り可能」）、です。OAuthは、「Googleアカウントでログイン」「Facebookアカウントでログイン」などのSNSログインで広く使われています。"
        },
        {
          "type": "example",
          "title": "OAuthの具体例：GoogleアカウントでログインするWebサービス",
          "content": "【シナリオ】\nユーザーがWebサービスA（例: オンライン写真共有サービス）に、Googleアカウントでログインします。WebサービスAは、Googleのプロフィール情報（名前、メールアドレス）を取得したいと考えています。\n\n【OAuth 2.0の流れ】\n①ユーザーがWebサービスAにアクセスし、「Googleアカウントでログイン」ボタンをクリック\n②WebサービスAは、ユーザーをGoogleの認証ページにリダイレクト\n  リダイレクトURL: https://accounts.google.com/o/oauth2/auth?client_id=ABC123&redirect_uri=https://serviceA.com/callback&scope=profile email\n  - client_id: WebサービスAの識別子（Googleに事前登録）\n  - redirect_uri: 認証後に戻るURL\n  - scope: アクセス範囲（プロフィール、メールアドレス）\n③ユーザーがGoogleのアカウントでログイン（ユーザーID・パスワードを入力）\n④Googleは、「WebサービスAがあなたのプロフィール情報とメールアドレスにアクセスすることを許可しますか?」という確認画面を表示\n⑤ユーザーが「許可」をクリック\n⑥Googleは、認可コード（authorization code）を発行し、WebサービスAのredirect_uriにリダイレクト\n  リダイレクトURL: https://serviceA.com/callback?code=XYZ789\n⑦WebサービスAは、認可コード「XYZ789」を使って、Googleのトークンエンドポイントにアクセストークンを要求\n  POST https://oauth2.googleapis.com/token\n  パラメータ: code=XYZ789, client_id=ABC123, client_secret=secret, redirect_uri=https://serviceA.com/callback\n⑧Googleは、アクセストークンを発行\n  レスポンス: {\"access_token\": \"ya29.a0AfH6...\", \"token_type\": \"Bearer\", \"expires_in\": 3600}\n⑨WebサービスAは、アクセストークンを使って、GoogleのAPIにアクセスし、プロフィール情報を取得\n  GET https://www.googleapis.com/oauth2/v1/userinfo?access_token=ya29.a0AfH6...\n  レスポンス: {\"id\": \"123456789\", \"name\": \"田中太郎\", \"email\": \"tanaka@example.com\"}\n⑩WebサービスAは、取得したプロフィール情報を使って、ユーザーのアカウントを作成し、ログインを許可\n\n【OAuthの利点】\nユーザーはGoogleのパスワードをWebサービスAに渡す必要がありません（WebサービスAがパスワードを知ることはない）。アクセストークンは有効期限があり（例: 1時間）、漏洩しても被害を最小限に抑えられます。"
        },
        {
          "type": "table",
          "headers": ["SSO方式", "主な用途", "認証方式", "利点", "欠点"],
          "rows": [
            ["SAML", "企業の社内システム", "XMLベースのアサーション", "セキュリティが高い、エンタープライズ向け", "実装が複雑、Webブラウザが必要"],
            ["OAuth 2.0", "SNSログイン（Google、Facebook）", "アクセストークンベース", "実装が簡単、モバイルアプリ対応", "認証機能は別途必要（OpenID Connectを併用）"],
            ["OpenID Connect", "SNSログイン + 認証", "OAuthの上位層、IDトークン", "認証と認可を両方提供、標準化されている", "比較的新しい技術"]
          ]
        },
        {
          "type": "highlight",
          "icon": "🔧",
          "title": "SSOのセキュリティリスクと対策",
          "content": "SSOは利便性が高い一方、セキュリティリスクもあります。①**シングルポイント障害（Single Point of Failure）**: 認証サーバが停止すると、全てのシステムにアクセスできなくなる。対策: 認証サーバの冗長化、②**認証情報の漏洩**: 認証サーバのパスワードが漏洩すると、全てのシステムにアクセスされる。対策: 多要素認証の導入、③**セッションハイジャック**: アクセストークンやSAMLアサーションが盗まれると、なりすましログインされる。対策: HTTPS通信の強制、トークンの有効期限を短くする、④**認可の過剰付与**: ユーザーに必要以上のアクセス権限を与えると、情報漏洩のリスクが高まる。対策: 最小権限の原則に基づき、必要最小限の権限を付与。SSOを導入する際は、これらのリスクを考慮し、適切なセキュリティ対策を実施することが重要です。"
        }
      ]
    },
    {
      "id": 5,
      "title": "アクセス制御（ACLとRBAC）",
      "sections": [
        {
          "type": "text",
          "content": "**アクセス制御（Access Control）**とは、システムやデータへのアクセスを制限し、許可されたユーザーのみがアクセスできるようにする仕組みです。アクセス制御により、①機密情報の漏洩防止、②不正な変更・削除の防止、③システムの安定性維持、を実現できます。アクセス制御の方式は、①**任意アクセス制御（DAC: Discretionary Access Control）**: データの所有者が、他のユーザーのアクセス権限を決定、②**強制アクセス制御（MAC: Mandatory Access Control）**: システム管理者が、セキュリティレベルに基づいてアクセス権限を決定、③**ロールベースアクセス制御（RBAC: Role-Based Access Control）**: ユーザーの役割（ロール）に基づいてアクセス権限を決定、の3種類があります。"
        },
        {
          "type": "text",
          "content": "**アクセス制御リスト（ACL: Access Control List）**とは、各リソース（ファイル、フォルダ、データベース）に対して、どのユーザーがどのような操作（読み取り、書き込み、実行、削除）を実行できるかを定義したリストです。ACLは、任意アクセス制御（DAC）の実装方式の1つです。ACLは、①**ユーザーベースACL**: 個々のユーザーに対してアクセス権限を設定、②**グループベースACL**: ユーザーグループに対してアクセス権限を設定、の2種類があります。グループベースACLは、ユーザー数が多い場合、管理が容易になります。"
        },
        {
          "type": "example",
          "title": "ACLの具体例：ファイルサーバのアクセス制御",
          "content": "【シナリオ】\nある企業のファイルサーバには、①営業部フォルダ、②経理部フォルダ、③人事部フォルダ、があります。各フォルダに対して、ACLでアクセス権限を設定します。\n\n【ACLの設定例】\n①営業部フォルダ:\n  - 営業部グループ: 読み取り、書き込み、実行（フルアクセス）\n  - 経理部グループ: 読み取りのみ（営業データを参照できるが、変更・削除はできない）\n  - 人事部グループ: アクセス拒否\n  - 管理者: フルアクセス\n\n②経理部フォルダ:\n  - 経理部グループ: フルアクセス\n  - 営業部グループ: アクセス拒否\n  - 人事部グループ: アクセス拒否\n  - 管理者: フルアクセス\n\n③人事部フォルダ:\n  - 人事部グループ: フルアクセス\n  - 営業部グループ: アクセス拒否\n  - 経理部グループ: アクセス拒否\n  - 管理者: フルアクセス\n\n【アクセス権限の種類】\n①読み取り（Read）: ファイルの内容を表示、コピー\n②書き込み（Write）: ファイルの内容を変更、新規ファイルの作成\n③実行（Execute）: プログラムの実行、フォルダへの移動\n④削除（Delete）: ファイル・フォルダの削除\n⑤フルアクセス（Full Control）: 全ての操作が可能、ACLの変更も可能\n\n【ACLの確認】\n営業部の社員Aが経理部フォルダにアクセスしようとすると、ACLにより「アクセス拒否」のエラーが表示されます。経理部の社員Bが営業部フォルダにアクセスすると、読み取りのみ可能（ファイルを開いて参照できるが、編集・削除はできない）。"
        },
        {
          "type": "text",
          "content": "**ロールベースアクセス制御（RBAC: Role-Based Access Control）**とは、ユーザーの役割（ロール）に基づいてアクセス権限を決定する方式です。ユーザーにロールを割り当て、ロールに対してアクセス権限を設定します。RBACの利点は、①管理が容易: ユーザー数が多くても、ロール単位で権限を管理できる、②柔軟性: ユーザーの異動や役割変更に対応しやすい（ロールを変更するだけ）、③最小権限の原則: 必要最小限の権限を付与できる、です。RBACは、大規模な企業システムやクラウドサービス（AWS IAM、Azure RBAC）で広く使われています。"
        },
        {
          "type": "example",
          "title": "RBACの具体例：ECサイトの管理システム",
          "content": "【シナリオ】\nECサイトの管理システムには、①システム管理者、②商品管理者、③注文管理者、④カスタマーサポート、の4つのロールがあります。各ロールに対して、アクセス権限を設定します。\n\n【ロールとアクセス権限】\n①システム管理者（Admin）:\n  - 全ての機能にアクセス可能（ユーザー管理、商品管理、注文管理、システム設定）\n  - ユーザーの追加・削除、ロールの変更が可能\n\n②商品管理者（Product Manager）:\n  - 商品の追加・編集・削除が可能\n  - 商品カテゴリの管理が可能\n  - 注文管理、ユーザー管理はアクセス不可\n\n③注文管理者（Order Manager）:\n  - 注文の確認・ステータス変更が可能\n  - 注文のキャンセル、配送先の変更が可能\n  - 商品管理、ユーザー管理はアクセス不可\n\n④カスタマーサポート（Support）:\n  - 顧客からの問い合わせの確認が可能\n  - 注文の参照のみ可能（変更・削除は不可）\n  - 商品管理、ユーザー管理はアクセス不可\n\n【ユーザーへのロール割り当て】\n①田中太郎: システム管理者（Admin）\n②佐藤花子: 商品管理者（Product Manager）\n③鈴木次郎: 注文管理者（Order Manager）\n④山田美咲: カスタマーサポート（Support）\n\n【ロールの変更】\n佐藤花子が退職し、後任として田中二郎が商品管理者になった場合、①佐藤花子のアカウントを削除、②田中二郎のアカウントを作成し、商品管理者（Product Manager）ロールを割り当て、という操作のみで、アクセス権限を適切に設定できます。個々の権限を設定し直す必要がないため、管理が容易です。\n\n【最小権限の原則】\nカスタマーサポートには、問い合わせ対応に必要な権限のみを付与します（注文の参照のみ）。注文の変更・削除はできないため、誤操作や不正な変更を防げます。"
        },
        {
          "type": "table",
          "headers": ["アクセス制御方式", "権限の決定方法", "利点", "欠点", "具体例"],
          "rows": [
            ["DAC（任意アクセス制御）", "データの所有者が決定", "柔軟性が高い、個別に細かく設定可能", "管理が煩雑（ユーザー数が多いと）、セキュリティが緩い", "ファイルサーバのACL"],
            ["MAC（強制アクセス制御）", "システム管理者がセキュリティレベルで決定", "セキュリティが高い、一貫性がある", "柔軟性が低い、導入コストが高い", "軍事システム、政府機関"],
            ["RBAC（ロールベースアクセス制御）", "ユーザーの役割（ロール）に基づく", "管理が容易、柔軟性とセキュリティのバランスが良い", "ロール設計が重要、複雑な権限は表現しづらい", "企業の業務システム、AWS IAM"]
          ]
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "アクセス制御のベストプラクティス",
          "content": "①**最小権限の原則（Principle of Least Privilege）**: ユーザーには、業務遂行に必要最小限の権限のみを付与します。必要以上の権限を与えると、誤操作や不正アクセスのリスクが高まります。\n②**職務分離（Separation of Duties）**: 重要な処理（例: 支払い承認）を複数の人が関与するようにし、1人が全ての権限を持たないようにします。不正を防止できます。\n③**定期的な権限の見直し**: ユーザーの異動や退職に伴い、不要になった権限を削除します。放置すると、元社員のアカウントが悪用されるリスクがあります。\n④**アクセスログの記録**: 誰がいつ何にアクセスしたかを記録し、不正アクセスを検知できるようにします。\n⑤**多層防御（Defense in Depth）**: アクセス制御だけでなく、暗号化、ファイアウォール、侵入検知システムなど、複数のセキュリティ対策を組み合わせます。"
        }
      ]
    }
  ]
}
