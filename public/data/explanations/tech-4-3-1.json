{
  "topicId": "tech-4-3-1",
  "title": "アルゴリズムの基礎",
  "pages": [
    {
      "id": 1,
      "title": "アルゴリズムとは何か",
      "sections": [
        {
          "type": "text",
          "content": "**アルゴリズム（Algorithm）**とは、問題を解決するための手順や計算方法を、明確に定義したものです。料理のレシピに例えると、材料（入力データ）を使って、手順通りに調理（処理）することで、料理（出力結果）を作り出すようなものです。アルゴリズムは、コンピュータだけでなく、人間が日常的に行う問題解決の手順も含まれます。例えば、「朝起きてから学校に行くまでの手順」もアルゴリズムの一種です。"
        },
        {
          "type": "table",
          "headers": ["要素", "説明", "料理のレシピの例"],
          "rows": [
            ["入力（Input）", "処理する前のデータ", "材料（野菜、肉、調味料）"],
            ["処理（Process）", "データを加工する手順", "切る、炒める、煮る"],
            ["出力（Output）", "処理後のデータ", "完成した料理"]
          ]
        },
        {
          "type": "text",
          "content": "アルゴリズムが満たすべき**5つの条件**があります。①**入力**：0個以上の入力がある、②**出力**：1個以上の出力がある、③**明確性**：各手順が明確で曖昧さがない、④**有限性**：有限の手順で終了する、⑤**有効性**：各手順が実行可能である。これらの条件を満たすことで、誰が実行しても同じ結果が得られます。"
        },
        {
          "type": "example",
          "title": "具体例：2つの数の最大値を求めるアルゴリズム",
          "content": "【問題】\n2つの数AとBがあるとき、大きい方の数を求めたい。\n\n【アルゴリズム（手順）】\n①AとBを比較する\n②もしA > Bならば、「Aが最大値」と出力する\n③そうでなければ、「Bが最大値」と出力する\n④終了\n\n【具体例】\nA = 10、B = 5 の場合：\n①10と5を比較\n②10 > 5 は真（True）なので、「10が最大値」と出力\n③終了\n\nこの手順は、①入力（A、B）がある、②出力（最大値）がある、③各手順が明確、④4ステップで終了（有限性）、⑤各手順が実行可能、の5つの条件を満たしています。"
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "アルゴリズムの重要性",
          "content": "同じ問題を解決するにも、アルゴリズムの良し悪しで、処理時間や必要なメモリ量が大きく変わります。例えば、1万件のデータから特定の値を探す場合、アルゴリズムAは0.01秒で終わるが、アルゴリズムBは10秒かかることもあります。良いアルゴリズムを選択・設計することで、システムの性能を大幅に改善できます。基本情報技術者試験では、アルゴリズムの基本概念、フローチャート、擬似言語の読み書きが出題されます。"
        },
        {
          "type": "table",
          "headers": ["アルゴリズムの例", "入力", "処理", "出力"],
          "rows": [
            ["最大値を求める", "数値のリスト", "各数値を比較", "最大値"],
            ["合計を求める", "数値のリスト", "全ての数値を足す", "合計値"],
            ["平均を求める", "数値のリスト", "合計÷個数", "平均値"],
            ["データを探す", "データのリスト、探す値", "リストを順番に確認", "見つかった位置（または見つからない）"]
          ]
        }
      ]
    },
    {
      "id": 2,
      "title": "フローチャート（流れ図）の基礎",
      "sections": [
        {
          "type": "text",
          "content": "**フローチャート（Flowchart、流れ図）**とは、アルゴリズムの処理の流れを、図形と矢印で視覚的に表現したものです。フローチャートを使うことで、複雑なアルゴリズムでも、処理の流れを一目で理解できます。フローチャートには、処理の種類に応じた**記号（シンボル）**があり、日本工業規格（JIS）で標準化されています。基本的な記号を覚えることで、フローチャートを読み書きできるようになります。"
        },
        {
          "type": "table",
          "headers": ["記号", "名称", "意味", "使用例"],
          "rows": [
            ["楕円（○）", "端子", "処理の開始・終了", "「開始」「終了」"],
            ["長方形（□）", "処理", "計算、代入などの処理", "「合計 ← 合計 + 数値」「カウンタ ← カウンタ + 1」"],
            ["ひし形（◇）", "判断", "条件分岐（Yes/No）", "「A > B?」「カウンタ < 10?」"],
            ["平行四辺形（▱）", "入出力", "データの入力・出力", "「A、Bを入力」「結果を出力」"],
            ["矢印（→）", "流れ線", "処理の流れ", "記号と記号をつなぐ"]
          ]
        },
        {
          "type": "example",
          "title": "具体例：2つの数の最大値を求めるフローチャート",
          "content": "【問題】\n2つの数AとBを入力し、大きい方の数を出力する。\n\n【フローチャート】\n①開始（楕円）\n②「A、Bを入力」（平行四辺形）\n③「A > B?」（ひし形）\n  - Yesの場合 → ④「最大値 ← A」（長方形）→ ⑥へ\n  - Noの場合 → ⑤「最大値 ← B」（長方形）→ ⑥へ\n⑥「最大値を出力」（平行四辺形）\n⑦終了（楕円）\n\n【具体的な流れ（A=10、B=5の場合）】\n①開始\n②A=10、B=5 を入力\n③10 > 5? → Yes\n④最大値 ← 10\n⑥最大値=10 を出力\n⑦終了\n\nこのフローチャートにより、どんな2つの数を入力しても、正しく最大値を求められます。"
        },
        {
          "type": "highlight",
          "icon": "📌",
          "title": "フローチャートの利点",
          "content": "フローチャートの利点は、①視覚的で理解しやすい：文章より図の方が処理の流れを把握しやすい、②処理の抜け漏れを防ぐ：全ての分岐をチェックできる、③複数人で共有しやすい：誰が見ても同じ理解ができる、の3点です。プログラムを書く前に、フローチャートで処理の流れを整理することで、バグを減らし、効率的にプログラミングできます。基本情報技術者試験では、フローチャートを読み取る問題や、穴埋め問題が出題されます。"
        },
        {
          "type": "text",
          "content": "フローチャートを書く際の**注意点**：①流れは上から下、左から右が基本、②流れ線には矢印を付ける（流れの方向を明示）、③判断記号（ひし形）からは2本以上の流れ線が出る（YesとNo）、④各記号の意味を正しく使い分ける、⑤無限ループ（終わらない処理）にならないようにする、の5点です。これらを守ることで、誰が見ても理解できるフローチャートを作成できます。"
        }
      ]
    },
    {
      "id": 3,
      "title": "擬似言語（構造化プログラミングの3つの基本制御構造）",
      "sections": [
        {
          "type": "text",
          "content": "**擬似言語（Pseudocode）**とは、プログラムのアルゴリズムを、自然言語（日本語や英語）とプログラミング言語の中間のような形式で記述したものです。特定のプログラミング言語に依存せず、アルゴリズムの本質を表現できます。基本情報技術者試験では、試験センターが定めた擬似言語の記法が使用されます。擬似言語を理解することで、どのプログラミング言語でも応用できる力が身につきます。"
        },
        {
          "type": "text",
          "content": "**構造化プログラミング**では、すべてのプログラムは**3つの基本制御構造**の組み合わせで表現できます。①**順次構造（Sequence）**：処理を順番に実行、②**選択構造（Selection、分岐）**：条件によって処理を分岐、③**繰返し構造（Iteration、反復）**：条件を満たす間、処理を繰り返す、の3つです。これらを組み合わせることで、どんな複雑な処理も記述できます。"
        },
        {
          "type": "table",
          "headers": ["制御構造", "説明", "擬似言語の例", "フローチャート"],
          "rows": [
            ["順次構造", "処理を順番に実行", "A ← 10\nB ← 20\n合計 ← A + B", "長方形が縦に並ぶ"],
            ["選択構造", "条件によって処理を分岐", "if (A > B)\n  最大値 ← A\nelse\n  最大値 ← B\nendif", "ひし形（判断）から2本の流れ線"],
            ["繰返し構造", "条件を満たす間、処理を繰り返す", "while (カウンタ < 10)\n  処理\n  カウンタ ← カウンタ + 1\nendwhile", "ひし形（判断）から戻る流れ線"]
          ]
        },
        {
          "type": "example",
          "title": "具体例：順次構造（合計を求める）",
          "content": "【問題】\n2つの数AとBを入力し、その合計を出力する。\n\n【擬似言語】\n```\n// 変数の初期化\nA ← 0\nB ← 0\n合計 ← 0\n\n// 入力\nAを入力\nBを入力\n\n// 計算（順次実行）\n合計 ← A + B\n\n// 出力\n合計を出力\n```\n\n【具体例（A=10、B=5）】\n①A ← 10（Aに10を代入）\n②B ← 5（Bに5を代入）\n③合計 ← 10 + 5（合計に15を代入）\n④合計=15 を出力\n\n順次構造は、上から順番に処理を実行します。各行が1つの処理に対応し、シンプルで理解しやすいです。"
        },
        {
          "type": "example",
          "title": "具体例：選択構造（if文）",
          "content": "【問題】\n点数を入力し、60点以上なら「合格」、60点未満なら「不合格」と出力する。\n\n【擬似言語】\n```\n点数 ← 0\n\n// 入力\n点数を入力\n\n// 条件分岐\nif (点数 >= 60)\n  「合格」を出力\nelse\n  「不合格」を出力\nendif\n```\n\n【具体例1（点数=75）】\n①点数 ← 75\n②75 >= 60 は真（True）なので、if文の中を実行\n③「合格」を出力\n\n【具体例2（点数=45）】\n①点数 ← 45\n②45 >= 60 は偽（False）なので、else文の中を実行\n③「不合格」を出力\n\n選択構造により、条件によって処理を分岐できます。基本情報技術者試験では、if-else文やcase文（switch文）が出題されます。"
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "擬似言語の記法（基本情報技術者試験）",
          "content": "基本情報技術者試験で使用される擬似言語の主な記法：①代入：変数 ← 値（例：A ← 10）、②比較：=（等しい）、!=（等しくない）、>、<、>=、<=、③論理演算：and（かつ）、or（または）、not（否定）、④if文：if (条件) 処理 else 処理 endif、⑤while文：while (条件) 処理 endwhile、⑥for文：for (変数 ← 初期値, 終了値, 増分) 処理 endfor。これらの記法を覚えることで、試験問題の擬似言語を読み解けます。"
        }
      ]
    },
    {
      "id": 4,
      "title": "繰返し構造と基本的なアルゴリズムパターン",
      "sections": [
        {
          "type": "text",
          "content": "**繰返し構造（Iteration）**は、同じ処理を繰り返し実行する制御構造です。繰返し構造には、①**前判定（while文）**：条件をチェックしてから処理を実行、②**後判定（do-while文）**：処理を実行してから条件をチェック、③**回数指定（for文）**：指定した回数だけ繰り返す、の3種類があります。基本情報技術者試験では、while文とfor文が頻出します。"
        },
        {
          "type": "example",
          "title": "具体例：繰返し構造（while文）- 1から10までの合計",
          "content": "【問題】\n1から10までの整数の合計を求める。\n\n【擬似言語（while文）】\n```\n// 変数の初期化\n合計 ← 0\nカウンタ ← 1\n\n// 繰り返し処理（カウンタが10以下の間）\nwhile (カウンタ <= 10)\n  合計 ← 合計 + カウンタ  // 合計に現在のカウンタを加算\n  カウンタ ← カウンタ + 1  // カウンタを1増やす\nendwhile\n\n// 出力\n合計を出力  // 合計=55\n```\n\n【処理の流れ】\n初期状態：合計=0、カウンタ=1\n\n1周目：カウンタ=1 <= 10（真）→ 合計=0+1=1、カウンタ=2\n2周目：カウンタ=2 <= 10（真）→ 合計=1+2=3、カウンタ=3\n3周目：カウンタ=3 <= 10（真）→ 合計=3+3=6、カウンタ=4\n...\n10周目：カウンタ=10 <= 10（真）→ 合計=45+10=55、カウンタ=11\n11周目：カウンタ=11 <= 10（偽）→ ループ終了\n\n結果：合計=55\n\nこのアルゴリズムでは、カウンタ変数で繰り返し回数を管理し、合計変数で累計を保持しています。"
        },
        {
          "type": "example",
          "title": "具体例：繰返し構造（for文）- 1から10までの合計",
          "content": "【問題】\n同じ問題をfor文で解く。\n\n【擬似言語（for文）】\n```\n// 変数の初期化\n合計 ← 0\n\n// 繰り返し処理（カウンタ1から10まで、1ずつ増加）\nfor (カウンタ ← 1, 10, 1)\n  合計 ← 合計 + カウンタ\nendfor\n\n// 出力\n合計を出力  // 合計=55\n```\n\n【for文の構文】\nfor (変数 ← 初期値, 終了値, 増分)\n  処理\nendfor\n\n①初期値：カウンタの開始値（1）\n②終了値：カウンタの終了値（10）\n③増分：カウンタの増加量（1）\n\nfor文は、繰り返し回数が決まっている場合に使用します。while文より簡潔に書けます。"
        },
        {
          "type": "table",
          "headers": ["アルゴリズムパターン", "説明", "使用する変数"],
          "rows": [
            ["合計（累計計算）", "複数の値を足し合わせる", "合計（初期値0）、カウンタ"],
            ["カウント（個数を数える）", "条件を満たすデータの個数を数える", "カウント（初期値0）"],
            ["最大値探索", "複数の値の中から最大値を見つける", "最大値（初期値：1番目のデータ）"],
            ["平均値計算", "合計÷個数", "合計（初期値0）、カウント（初期値0）"]
          ]
        },
        {
          "type": "example",
          "title": "具体例：最大値探索アルゴリズム",
          "content": "【問題】\n配列A[1]～A[5]に格納された5個の整数から、最大値を求める。\n配列A = [12, 35, 8, 42, 19]\n\n【擬似言語】\n```\n// 変数の初期化\n最大値 ← A[1]  // 最初の要素を仮の最大値とする\n\n// 繰り返し処理（2番目から5番目まで比較）\nfor (i ← 2, 5, 1)\n  if (A[i] > 最大値)\n    最大値 ← A[i]  // より大きい値が見つかったら更新\n  endif\nendfor\n\n// 出力\n最大値を出力  // 最大値=42\n```\n\n【処理の流れ】\n初期状態：最大値=A[1]=12\n\ni=2：A[2]=35 > 12（真）→ 最大値=35\ni=3：A[3]=8 > 35（偽）→ 最大値=35（変更なし）\ni=4：A[4]=42 > 35（真）→ 最大値=42\ni=5：A[5]=19 > 42（偽）→ 最大値=42（変更なし）\n\n結果：最大値=42\n\nこのアルゴリズムでは、最初の要素を仮の最大値とし、2番目以降の要素と比較して、より大きい値が見つかれば更新します。"
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "変数の役割を理解する",
          "content": "アルゴリズムでは、変数の役割を明確にすることが重要です。①カウンタ変数：繰り返し回数を管理（例：i、カウンタ）、②累計変数：値を累積（例：合計、カウント）、③最大値・最小値変数：現在の最大値・最小値を保持、④作業変数：一時的にデータを保持（例：temp）。試験問題では、変数の初期値、更新タイミング、最終値を正確に追跡する必要があります。"
        }
      ]
    },
    {
      "id": 5,
      "title": "実践的なアルゴリズム例と配列の活用",
      "sections": [
        {
          "type": "text",
          "content": "**配列（Array）**とは、同じ型のデータを複数個、連続したメモリ領域に格納するデータ構造です。配列を使うことで、大量のデータを効率的に処理できます。基本情報技術者試験では、配列を使ったアルゴリズムが頻出します。配列の要素には、添字（インデックス）でアクセスします。例えば、A[1]は配列Aの1番目の要素、A[i]はi番目の要素を表します。"
        },
        {
          "type": "example",
          "title": "具体例：平均値計算アルゴリズム",
          "content": "【問題】\n配列A[1]～A[10]に格納された10個のテストの点数から、平均点を求める。\n配列A = [75, 82, 68, 91, 55, 78, 88, 63, 72, 84]\n\n【擬似言語】\n```\n// 変数の初期化\n合計 ← 0\n個数 ← 10\n平均 ← 0\n\n// 繰り返し処理（全ての点数を合計）\nfor (i ← 1, 10, 1)\n  合計 ← 合計 + A[i]\nendfor\n\n// 平均を計算\n平均 ← 合計 / 個数\n\n// 出力\n平均を出力\n```\n\n【処理の流れ】\ni=1：合計=0+75=75\ni=2：合計=75+82=157\ni=3：合計=157+68=225\n...\ni=10：合計=681+84=765\n\n平均=765÷10=76.5\n\n結果：平均=76.5点\n\nこのアルゴリズムでは、まず全ての点数を合計し、最後に個数で割って平均を求めます。"
        },
        {
          "type": "example",
          "title": "具体例：条件付きカウント（60点以上の人数を数える）",
          "content": "【問題】\n配列A[1]～A[10]に格納された10個のテストの点数から、60点以上の人数を数える。\n配列A = [75, 82, 68, 91, 55, 78, 88, 63, 72, 84]\n\n【擬似言語】\n```\n// 変数の初期化\n合格者数 ← 0\n\n// 繰り返し処理（全ての点数をチェック）\nfor (i ← 1, 10, 1)\n  if (A[i] >= 60)\n    合格者数 ← 合格者数 + 1  // 60点以上ならカウント\n  endif\nendfor\n\n// 出力\n合格者数を出力\n```\n\n【処理の流れ】\ni=1：A[1]=75 >= 60（真）→ 合格者数=0+1=1\ni=2：A[2]=82 >= 60（真）→ 合格者数=1+1=2\ni=3：A[3]=68 >= 60（真）→ 合格者数=2+1=3\ni=4：A[4]=91 >= 60（真）→ 合格者数=3+1=4\ni=5：A[5]=55 >= 60（偽）→ 合格者数=4（変更なし）\ni=6：A[6]=78 >= 60（真）→ 合格者数=4+1=5\n...\ni=10：A[10]=84 >= 60（真）→ 合格者数=8+1=9\n\n結果：合格者数=9人\n\nこのアルゴリズムでは、if文で条件をチェックし、条件を満たす場合のみカウンタを増やします。"
        },
        {
          "type": "example",
          "title": "具体例：データの入れ替え（スワップ）",
          "content": "【問題】\n変数AとBの値を入れ替える。\n初期状態：A=10、B=20\n目標：A=20、B=10\n\n【間違った方法】\n```\nA ← B  // A=20になる\nB ← A  // B=20になってしまう（Aはすでに20）\n```\nこの方法では、Aの値（10）が失われてしまいます。\n\n【正しい方法（作業変数を使う）】\n```\n// 作業変数tempを用意\ntemp ← A   // temp=10（Aの値を退避）\nA ← B      // A=20（BをAに代入）\nB ← temp   // B=10（退避したAの値をBに代入）\n```\n\n【処理の流れ】\n初期状態：A=10、B=20、temp=未定義\n①temp ← 10（Aの値を退避）\n②A ← 20（BをAに代入）\n③B ← 10（退避した値をBに代入）\n最終状態：A=20、B=10\n\nデータの入れ替えは、ソートアルゴリズム（並べ替え）などで頻繁に使用される基本操作です。"
        },
        {
          "type": "table",
          "headers": ["アルゴリズムの種類", "目的", "キーとなる処理"],
          "rows": [
            ["合計計算", "複数の値を足し合わせる", "合計 ← 合計 + 値"],
            ["カウント", "条件を満たすデータを数える", "if (条件) カウント ← カウント + 1"],
            ["最大値探索", "最大の値を見つける", "if (値 > 最大値) 最大値 ← 値"],
            ["平均値計算", "合計を個数で割る", "平均 ← 合計 / 個数"],
            ["データ入れ替え", "2つの変数の値を交換", "temp使用、3ステップで交換"]
          ]
        },
        {
          "type": "highlight",
          "icon": "📌",
          "title": "基本情報技術者試験での出題ポイント",
          "content": "試験では、①アルゴリズムの流れを追跡して、変数の値を求める問題、②フローチャートや擬似言語の穴埋め問題、③アルゴリズムの誤りを指摘する問題、④処理時間や計算量を求める問題、が出題されます。対策として、①基本的なアルゴリズムパターン（合計、最大値、平均）を理解する、②変数の初期値、更新タイミング、最終値を正確に追跡する練習をする、③フローチャートと擬似言語の対応関係を理解する、④ループの回数を正確に数える、ことが重要です。繰り返し練習することで、アルゴリズムを読み解く力が身につきます。"
        }
      ]
    }
  ]
}
