{
  "topicId": "mgmt-1-1-3",
  "title": "スケジュール管理",
  "pages": [
    {
      "id": 1,
      "title": "プロジェクトスケジュール管理の基礎とアローダイアグラム",
      "sections": [
        {
          "type": "text",
          "content": "**プロジェクトスケジュール管理**とは、プロジェクトの作業を予定通りに完了させるために、作業の順序、所要時間、リソース配分を計画・管理する活動です。スケジュール管理により、①プロジェクトの完了日を予測、②作業の遅延を早期に検出、③リソースの効率的な配分、④ステークホルダへの進捗報告、が可能になります。スケジュール管理の主要な手法として、①**アローダイアグラム（PERT図）**、②**プレシデンスダイアグラム法（PDM）**、③**ガントチャート**、があります。"
        },
        {
          "type": "text",
          "content": "**アローダイアグラム（PERT図：Program Evaluation and Review Technique）**とは、プロジェクトの作業を矢印（→）で表し、作業の順序関係と所要時間を図示する手法です。アローダイアグラムの構成要素は、①**作業（アクティビティ）**：矢印（→）で表現、矢印の上に作業名、下に所要時間を記述、②**結合点（イベント、ノード）**：丸（○）で表現、作業の開始点・終了点を示す、③**ダミー作業（点線矢印）**：所要時間0の仮想的な作業、作業の順序関係を表現するために使用、の3つです。"
        },
        {
          "type": "example",
          "title": "アローダイアグラムの具体例：Webシステム開発プロジェクト",
          "content": "【プロジェクト概要】\nWebシステムを開発するプロジェクトで、以下の作業があります。\n\n【作業リスト】\nA: 要件定義（5日）\nB: データベース設計（3日）- Aの後に実施\nC: 画面設計（4日）- Aの後に実施\nD: データベース構築（2日）- Bの後に実施\nE: 画面実装（6日）- Cの後に実施\nF: 結合テスト（3日）- DとEの後に実施\nG: 本番移行（2日）- Fの後に実施\n\n【アローダイアグラムの描き方】\n①開始点（○）から、作業A（要件定義、5日）を矢印で描く\n②作業Aの終了点から、作業B（データベース設計、3日）と作業C（画面設計、4日）を分岐して描く（並行作業）\n③作業Bの終了点から、作業D（データベース構築、2日）を描く\n④作業Cの終了点から、作業E（画面実装、6日）を描く\n⑤作業DとEが両方完了してから作業Fを開始するため、DとEの終了点を結合点に集約し、作業F（結合テスト、3日）を描く\n⑥作業Fの終了点から、作業G（本番移行、2日）を描き、終了点（○）に到達\n\n【アローダイアグラム（簡略表記）】\n開始 →[A:5日]→ ○ →[B:3日]→[D:2日]→ ○ →[F:3日]→[G:2日]→ 終了\n                  ↓                    ↑\n                [C:4日]→[E:6日]→ ○ →（ダミー）\n\n※ダミー作業：DとEが両方完了してからFを開始するため、作業Eの終了点から結合点へダミー作業（点線矢印、所要時間0）を引く\n\n【所要時間の計算】\nアローダイアグラムでは、開始から終了までの複数のパス（経路）があります。\n①パス1（上の経路）: A(5) → B(3) → D(2) → F(3) → G(2) = 15日\n②パス2（下の経路）: A(5) → C(4) → E(6) → F(3) → G(2) = 20日\n\n最も時間がかかるパス（20日）が、プロジェクト全体の所要時間になります。このパスを**クリティカルパス**と呼びます。"
        },
        {
          "type": "table",
          "headers": ["構成要素", "表記", "説明"],
          "rows": [
            ["作業（アクティビティ）", "矢印（→）", "作業を表現。矢印の上に作業名、下に所要時間を記述"],
            ["結合点（イベント、ノード）", "丸（○）", "作業の開始点・終了点を表現。番号を付ける"],
            ["ダミー作業", "点線矢印（- - →）", "所要時間0の仮想的な作業。順序関係を表現"]
          ]
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "ダミー作業の役割",
          "content": "ダミー作業は、作業の順序関係を正しく表現するために使用します。例えば、「作業DとEが両方完了してから作業Fを開始する」という関係を表現する場合、DとEの終了点を結合点に集約し、結合点からFを開始します。この時、DとEの終了点が異なる場合、一方からダミー作業（点線矢印）を引いて結合点に接続します。ダミー作業の所要時間は0日です。ダミー作業を使わずにアローダイアグラムを描くと、作業の順序関係が正しく表現できない場合があります。"
        }
      ]
    },
    {
      "id": 2,
      "title": "クリティカルパスと余裕時間（フロート）の計算",
      "sections": [
        {
          "type": "text",
          "content": "**クリティカルパス（Critical Path）**とは、プロジェクトの開始から終了までの経路（パス）のうち、所要時間が最も長い経路のことです。クリティカルパスの所要時間が、プロジェクト全体の所要時間（最短工期）になります。クリティカルパス上の作業は、①遅延すると、プロジェクト全体が遅延する、②余裕時間がない（フロート=0）、という特徴があります。プロジェクトマネージャは、クリティカルパス上の作業を重点的に管理し、遅延を防ぐ必要があります。"
        },
        {
          "type": "text",
          "content": "クリティカルパスを求めるために、各結合点の**最早結合点時刻（Earliest Event Time）**と**最遅結合点時刻（Latest Event Time）**を計算します。①**最早結合点時刻**：その結合点に到達できる最も早い時刻（開始からの最長経路の所要時間）、②**最遅結合点時刻**：プロジェクト全体を遅延させずに、その結合点に到達できる最も遅い時刻（終了からの逆算）、を表します。最早結合点時刻と最遅結合点時刻が等しい結合点を結ぶ作業が、クリティカルパスになります。"
        },
        {
          "type": "example",
          "title": "クリティカルパスの計算例：Webシステム開発プロジェクト（続き）",
          "content": "【前提】\n前のページで示したWebシステム開発プロジェクトのアローダイアグラムを使用します。\n作業: A(5日)→B(3日)→D(2日)→F(3日)→G(2日)\n     A(5日)→C(4日)→E(6日)→F(3日)→G(2日)\n\n【結合点の番号付け】\n結合点0: 開始\n結合点1: Aの終了\n結合点2: Bの終了\n結合点3: Cの終了\n結合点4: DとEの終了（Fの開始）\n結合点5: Fの終了\n結合点6: Gの終了（終了）\n\n【最早結合点時刻の計算（前向き計算）】\n結合点0（開始）: 0日\n結合点1（Aの終了）: 0 + 5 = 5日\n結合点2（Bの終了）: 5 + 3 = 8日\n結合点3（Cの終了）: 5 + 4 = 9日\n結合点4（DとEの終了）:\n  - パス1（A→B→D）: 5 + 3 + 2 = 10日\n  - パス2（A→C→E）: 5 + 4 + 6 = 15日\n  → 最大値を選択: 15日（パス2の方が長い）\n結合点5（Fの終了）: 15 + 3 = 18日\n結合点6（Gの終了、終了）: 18 + 2 = 20日\n\n【最遅結合点時刻の計算（後ろ向き計算）】\n結合点6（終了）: 20日（プロジェクト全体の所要時間）\n結合点5（Fの終了）: 20 - 2 = 18日\n結合点4（DとEの終了）: 18 - 3 = 15日\n結合点3（Cの終了）: 15 - 6 = 9日\n結合点2（Bの終了）: 15 - 2 = 13日\n結合点1（Aの終了）:\n  - パス1（B→D→F→G）: 18 - 3 - 2 - 3 = 10日 → 逆算すると 10 - 5 = 5日\n  - パス2（C→E→F→G）: 18 - 3 - 6 - 4 = 5日 → 逆算すると 5 - 0 = 5日\n  → 最小値を選択: 5日\n結合点0（開始）: 5 - 5 = 0日\n\n【クリティカルパスの判定】\n最早結合点時刻 = 最遅結合点時刻 の結合点を結ぶ作業がクリティカルパス。\n結合点0: 0 = 0 ✓\n結合点1: 5 = 5 ✓\n結合点3: 9 = 9 ✓\n結合点4: 15 = 15 ✓\n結合点5: 18 = 18 ✓\n結合点6: 20 = 20 ✓\n\nクリティカルパス: 0→1（作業A）→3（作業C）→4（作業E）→5（作業F）→6（作業G）\nつまり、A → C → E → F → G がクリティカルパスです。\n所要時間: 5 + 4 + 6 + 3 + 2 = 20日"
        },
        {
          "type": "text",
          "content": "**余裕時間（フロート、スラック）**とは、作業を遅らせてもプロジェクト全体に影響を与えない時間のことです。余裕時間の計算式は、**余裕時間 = 最遅結合点時刻（終点） - 最早結合点時刻（始点） - 作業の所要時間**です。クリティカルパス上の作業は、余裕時間が0です。余裕時間が大きい作業は、遅延してもプロジェクト全体への影響が少ないため、優先度を下げることができます。"
        },
        {
          "type": "example",
          "title": "余裕時間の計算例：作業B（データベース設計）",
          "content": "【作業B（データベース設計）】\n始点: 結合点1（最早結合点時刻=5日、最遅結合点時刻=5日）\n終点: 結合点2（最早結合点時刻=8日、最遅結合点時刻=13日）\n所要時間: 3日\n\n【余裕時間の計算】\n余裕時間 = 最遅結合点時刻（終点） - 最早結合点時刻（始点） - 作業の所要時間\n         = 13 - 5 - 3\n         = 5日\n\n【意味】\n作業Bは、最大5日遅らせても、プロジェクト全体（20日）に影響を与えません。\n例えば、作業Bを5日遅らせて8日かかっても、結合点2の最早結合点時刻は5+8=13日になり、最遅結合点時刻（13日）と等しくなります。この場合、作業B→Dもクリティカルパスになります。\n\n【作業D（データベース構築）】\n始点: 結合点2（最早結合点時刻=8日、最遅結合点時刻=13日）\n終点: 結合点4（最早結合点時刻=15日、最遅結合点時刻=15日）\n所要時間: 2日\n\n余裕時間 = 15 - 8 - 2 = 5日\n\n【クリティカルパス上の作業（例: 作業A）】\n始点: 結合点0（最早結合点時刻=0日、最遅結合点時刻=0日）\n終点: 結合点1（最早結合点時刻=5日、最遅結合点時刻=5日）\n所要時間: 5日\n\n余裕時間 = 5 - 0 - 5 = 0日\n\nクリティカルパス上の作業は、余裕時間が0日です。1日でも遅れると、プロジェクト全体が遅延します。"
        },
        {
          "type": "table",
          "headers": ["作業", "所要時間", "余裕時間", "クリティカルパス"],
          "rows": [
            ["A（要件定義）", "5日", "0日", "○"],
            ["B（データベース設計）", "3日", "5日", "×"],
            ["C（画面設計）", "4日", "0日", "○"],
            ["D（データベース構築）", "2日", "5日", "×"],
            ["E（画面実装）", "6日", "0日", "○"],
            ["F（結合テスト）", "3日", "0日", "○"],
            ["G（本番移行）", "2日", "0日", "○"]
          ]
        },
        {
          "type": "highlight",
          "icon": "🔧",
          "title": "クリティカルパス管理の重要性",
          "content": "プロジェクトマネージャは、クリティカルパス上の作業を重点的に管理する必要があります。①クリティカルパス上の作業は、1日でも遅れるとプロジェクト全体が遅延する、②クリティカルパス上の作業にリソース（人員、予算）を優先的に配分する、③クリティカルパス上の作業の進捗を毎日確認し、遅延の兆候を早期に検出する、④クリティカルパス上の作業が遅延した場合、スケジュール短縮手法（クラッシング、ファストトラッキング）を適用する、などの対策が必要です。一方、余裕時間が大きい作業（例: 作業B、D）は、遅延してもプロジェクト全体への影響が少ないため、リソースを減らしたり、優先度を下げることができます。"
        }
      ]
    },
    {
      "id": 3,
      "title": "プレシデンスダイアグラム法（PDM）とガントチャート",
      "sections": [
        {
          "type": "text",
          "content": "**プレシデンスダイアグラム法（PDM: Precedence Diagramming Method）**とは、作業を四角（□）で表し、作業間の順序関係を矢印（→）で結ぶ手法です。PDMは、アローダイアグラムと比べて、①ダミー作業が不要、②作業間の関係をより柔軟に表現できる（FS、SS、FF、SF）、という利点があります。PDMでは、作業を**ノード（四角）**で表現し、作業間の順序関係を**矢印（エッジ）**で表現します。"
        },
        {
          "type": "text",
          "content": "PDMでは、作業間の関係を4種類で表現できます。①**FS（Finish to Start）**：前の作業が終了してから、次の作業を開始（最も一般的）、②**SS（Start to Start）**：前の作業が開始したら、次の作業を開始、③**FF（Finish to Finish）**：前の作業が終了したら、次の作業を終了、④**SF（Start to Finish）**：前の作業が開始したら、次の作業を終了（まれ）、の4種類があります。アローダイアグラムでは、FSのみ表現できますが、PDMでは、SS、FF、SFも表現できます。"
        },
        {
          "type": "example",
          "title": "PDMの具体例：Webシステム開発プロジェクト",
          "content": "【前提】\n前のページと同じWebシステム開発プロジェクトをPDMで表現します。\n\n【PDMの描き方】\n①各作業を四角（□）で描き、作業名と所要時間を記述\n  [A: 要件定義, 5日]\n  [B: データベース設計, 3日]\n  [C: 画面設計, 4日]\n  [D: データベース構築, 2日]\n  [E: 画面実装, 6日]\n  [F: 結合テスト, 3日]\n  [G: 本番移行, 2日]\n\n②作業間の順序関係を矢印（→）で結ぶ\n  [A] → [B] （FS: Aが終了してからBを開始）\n  [A] → [C] （FS: Aが終了してからCを開始）\n  [B] → [D] （FS: Bが終了してからDを開始）\n  [C] → [E] （FS: Cが終了してからEを開始）\n  [D] → [F] （FS: DとEが両方終了してからFを開始）\n  [E] → [F] （FS: DとEが両方終了してからFを開始）\n  [F] → [G] （FS: Fが終了してからGを開始）\n\n【PDM（簡略表記）】\n[A:5日] → [B:3日] → [D:2日] ↘\n       ↘                      [F:3日] → [G:2日]\n         [C:4日] → [E:6日] ↗\n\n【アローダイアグラムとの違い】\n①ダミー作業が不要: DとEが両方完了してからFを開始する場合、アローダイアグラムではダミー作業が必要ですが、PDMでは、DとEからFへ矢印を引くだけで表現できます。\n②作業がノード（四角）で表現: アローダイアグラムでは作業が矢印で表現されますが、PDMでは作業がノード（四角）で表現されます。\n\n【SS（Start to Start）の例】\n例えば、「作業C（画面設計）が開始したら、作業E（画面実装）を開始できる（画面設計が完了するのを待たずに、一部の画面から実装を開始）」という関係を表現する場合、\n[C] →SS [E] （SS: Cが開始したらEを開始）\nと記述します。この場合、Cの開始から3日後にEを開始できます（Cの所要時間は4日なので、CとEは1日重なります）。"
        },
        {
          "type": "table",
          "headers": ["関係の種類", "記号", "説明", "具体例"],
          "rows": [
            ["Finish to Start", "FS", "前の作業が終了してから、次の作業を開始", "設計が終了してから、プログラミングを開始"],
            ["Start to Start", "SS", "前の作業が開始したら、次の作業を開始", "設計が開始したら、プログラミングを開始（一部の設計が完了したら実装開始）"],
            ["Finish to Finish", "FF", "前の作業が終了したら、次の作業を終了", "プログラミングが終了したら、テスト計画を終了"],
            ["Start to Finish", "SF", "前の作業が開始したら、次の作業を終了（まれ）", "新システムが開始したら、旧システムを終了"]
          ]
        },
        {
          "type": "text",
          "content": "**ガントチャート（Gantt Chart）**とは、プロジェクトの作業を横棒グラフで表現し、作業の開始日、終了日、所要時間、進捗状況を視覚的に示すツールです。ガントチャートは、①縦軸に作業名、②横軸に日付（または週、月）、③各作業を横棒で表現（左端が開始日、右端が終了日、長さが所要時間）、④現在日を縦線で表示、⑤作業の進捗状況を色で表示（例: 完了=緑、進行中=黄、未着手=グレー）、という構成です。"
        },
        {
          "type": "example",
          "title": "ガントチャートの具体例：Webシステム開発プロジェクト",
          "content": "【前提】\n前のページと同じWebシステム開発プロジェクトをガントチャートで表現します。開始日を4月1日とします。\n\n【ガントチャート（簡略表記）】\n作業名           | 4/1-4/5 | 4/6-4/10 | 4/11-4/15 | 4/16-4/20 | 4/21-4/25\n-----------------+---------+----------+-----------+-----------+----------\nA: 要件定義(5日) |█████   |          |           |           |\nB: DB設計(3日)   |     ███|          |           |           |\nC: 画面設計(4日) |     ████|         |           |           |\nD: DB構築(2日)   |        |██        |           |           |\nE: 画面実装(6日) |        |  ██████  |           |           |\nF: 結合テスト(3日)|        |          |███        |           |\nG: 本番移行(2日) |        |          |   ██      |           |\n\n【詳細な説明】\n①作業A（要件定義）: 4/1～4/5（5日間）\n②作業B（データベース設計）: 4/6～4/8（3日間、Aの終了後に開始）\n③作業C（画面設計）: 4/6～4/9（4日間、Aの終了後に開始、Bと並行）\n④作業D（データベース構築）: 4/9～4/10（2日間、Bの終了後に開始）\n⑤作業E（画面実装）: 4/10～4/15（6日間、Cの終了後に開始）\n⑥作業F（結合テスト）: 4/16～4/18（3日間、DとEの終了後に開始）\n⑦作業G（本番移行）: 4/19～4/20（2日間、Fの終了後に開始）\n\n【ガントチャートの利点】\n①視覚的に分かりやすい: 横棒グラフで作業の開始日、終了日、所要時間が一目で分かる\n②並行作業が分かる: BとC、DとEが並行して実行されることが分かる\n③進捗管理がしやすい: 現在日（例: 4/10）を縦線で表示し、各作業の進捗状況（完了、進行中、遅延）を色で示す\n④ステークホルダへの報告に適している: 経営層や顧客に進捗状況を報告する際、ガントチャートを使うと分かりやすい\n\n【アローダイアグラム・PDMとの違い】\n①ガントチャートは、作業の順序関係（依存関係）が分かりにくい → クリティカルパスが分からない\n②アローダイアグラム・PDMは、作業の順序関係とクリティカルパスが分かりやすい → 日付や進捗状況が分かりにくい\n\n実務では、①スケジュール計画時にアローダイアグラム・PDMを使ってクリティカルパスを特定、②進捗管理時にガントチャートを使って日々の進捗を確認、という使い分けをします。"
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "ガントチャートの限界とアローダイアグラムの併用",
          "content": "ガントチャートは、視覚的に分かりやすく、進捗管理に適していますが、作業の順序関係（依存関係）が分かりにくいという欠点があります。例えば、「作業Eが遅延した場合、どの作業に影響するか」がガントチャートからは読み取りにくいです。一方、アローダイアグラム・PDMは、作業の順序関係とクリティカルパスが明確です。実務では、①プロジェクト計画時にアローダイアグラム・PDMを使ってクリティカルパスを特定し、重点管理する作業を決定、②日々の進捗管理にはガントチャートを使用、③作業が遅延した場合、アローダイアグラム・PDMで影響範囲を確認、という流れで両方を併用します。"
        }
      ]
    },
    {
      "id": 4,
      "title": "スケジュール短縮手法（クラッシングとファストトラッキング）",
      "sections": [
        {
          "type": "text",
          "content": "プロジェクトの進行中に、「納期を1ヶ月前倒ししたい」「クリティカルパス上の作業が遅延したため、スケジュールを短縮したい」という要求が発生することがあります。この場合、**スケジュール短縮手法**を適用します。代表的な手法として、①**クラッシング（Crashing）**：リソース（人員、予算）を追加してスケジュールを短縮、②**ファストトラッキング（Fast Tracking）**：本来は順次実行する作業を並行実行してスケジュールを短縮、の2つがあります。"
        },
        {
          "type": "text",
          "content": "**クラッシング（Crashing）**とは、クリティカルパス上の作業にリソース（人員、予算）を追加投入して、作業の所要時間を短縮する手法です。例えば、「プログラマを2人から4人に増員する」「残業や休日出勤を実施する」「外部委託を追加する」などの方法で、作業時間を短縮します。クラッシングの注意点は、①コストが増加する（人員増加、残業代、外部委託費）、②効果が逓減する（人員を2倍にしても、作業時間が半分にならない場合がある）、③品質が低下するリスクがある（急いで作業するとバグが増える）、です。"
        },
        {
          "type": "example",
          "title": "クラッシングの具体例：Webシステム開発プロジェクト",
          "content": "【背景】\nWebシステム開発プロジェクトで、クリティカルパスは A(5日) → C(4日) → E(6日) → F(3日) → G(2日) = 20日です。\n顧客から「納期を18日に短縮してほしい」という要求がありました。2日間の短縮が必要です。\n\n【クラッシングの検討】\n①クリティカルパス上の作業を短縮する必要がある（クリティカルパス以外の作業を短縮しても、プロジェクト全体の所要時間は変わらない）\n②各作業のクラッシング可能時間とコストを見積もる\n\n【各作業のクラッシング見積もり】\n作業A（要件定義, 5日）:\n  - 短縮可能時間: 1日（プログラマを1人追加）\n  - 追加コスト: 5万円/日 × 1日 = 5万円\n\n作業C（画面設計, 4日）:\n  - 短縮可能時間: 1日（デザイナーを1人追加）\n  - 追加コスト: 4万円/日 × 1日 = 4万円\n\n作業E（画面実装, 6日）:\n  - 短縮可能時間: 2日（プログラマを2人から4人に増員）\n  - 追加コスト: 5万円/日 × 2人 × 2日 = 20万円\n\n作業F（結合テスト, 3日）:\n  - 短縮可能時間: 1日（テスト担当者を1人追加）\n  - 追加コスト: 3万円/日 × 1日 = 3万円\n\n作業G（本番移行, 2日）:\n  - 短縮不可（サーバの設定作業は人員を増やしても短縮できない）\n\n【クラッシングの選択】\n目標: 2日間の短縮、コストを最小化\n\n最もコスト効率の良い作業から短縮:\n①作業F（結合テスト）を1日短縮 → コスト3万円、合計1日短縮\n②作業C（画面設計）を1日短縮 → コスト4万円、合計2日短縮\n\n合計コスト: 3万円 + 4万円 = 7万円\n短縮後のスケジュール: A(5日) → C(3日) → E(6日) → F(2日) → G(2日) = 18日\n\n【別の選択肢】\n作業E（画面実装）を2日短縮 → コスト20万円、合計2日短縮\n\n比較:\n選択肢1: 作業F(1日) + 作業C(1日) = 7万円\n選択肢2: 作業E(2日) = 20万円\n\n→ 選択肢1の方がコスト効率が良い。"
        },
        {
          "type": "text",
          "content": "**ファストトラッキング（Fast Tracking）**とは、本来は順次実行する作業（FS: Finish to Start）を、並行実行（SS: Start to Start、または一部重複）してスケジュールを短縮する手法です。例えば、「設計が完了してからプログラミングを開始」という順序を、「設計の一部が完了したらプログラミングを開始」に変更します。ファストトラッキングの注意点は、①リスクが増加する（設計が変更されると、プログラミングのやり直しが発生）、②手戻り（やり直し）が発生するとコストが増加、③コミュニケーションコストが増加（並行作業のため、設計チームとプログラミングチームの調整が必要）、です。"
        },
        {
          "type": "example",
          "title": "ファストトラッキングの具体例：Webシステム開発プロジェクト",
          "content": "【背景】\nWebシステム開発プロジェクトで、作業C（画面設計, 4日）→ 作業E（画面実装, 6日）という順序になっています。\n現在のスケジュール: Cが完了してからEを開始 → 合計10日\n\n【ファストトラッキングの適用】\n作業C（画面設計）の一部（2日分）が完了したら、作業E（画面実装）を開始する。\n\n新しいスケジュール:\n①作業Cの1～2日目: 画面設計（トップページ、商品一覧ページ）\n②作業Cの3日目: 画面設計（商品詳細ページ）+ 作業Eの1日目: 画面実装（トップページ）\n③作業Cの4日目: 画面設計（カートページ）+ 作業Eの2日目: 画面実装（商品一覧ページ）\n④作業Eの3～6日目: 画面実装（商品詳細ページ、カートページ、注文確認ページ、注文完了ページ）\n\n合計: 4日（C） + 4日（Eの残り） = 8日（2日短縮）\n\n【リスク】\n①設計変更のリスク: 作業Cの3日目に「トップページのデザインを変更したい」という要求が発生した場合、作業Eの1日目（トップページの実装）がやり直しになる → 手戻りコストが発生\n②コミュニケーションコスト: 設計チームと実装チームが密に連携する必要がある（毎日、設計の進捗を共有し、実装に反映）\n\n【ファストトラッキングの判断基準】\n①設計が安定している（変更が少ない）場合 → ファストトラッキングは有効\n②設計が不安定（要求が頻繁に変わる）場合 → ファストトラッキングはリスクが高い（手戻りコストが大きい）\n\n実務では、「設計の一部（例: 主要な画面2～3個）が確定したら実装を開始し、残りの画面は設計完了後に実装」という部分的なファストトラッキングを適用することが多いです。"
        },
        {
          "type": "table",
          "headers": ["手法", "概要", "メリット", "デメリット"],
          "rows": [
            ["クラッシング", "リソース（人員、予算）を追加投入して作業時間を短縮", "①確実に短縮できる、②リスクが比較的低い", "①コストが増加、②効果が逓減、③品質低下のリスク"],
            ["ファストトラッキング", "順次実行する作業を並行実行して短縮", "①コストが増加しない（人員追加なし）、②大幅な短縮が可能", "①リスクが増加、②手戻りコストが発生する可能性、③コミュニケーションコスト増"]
          ]
        },
        {
          "type": "highlight",
          "icon": "📌",
          "title": "クラッシングとファストトラッキングの使い分け",
          "content": "クラッシングとファストトラッキングは、それぞれメリット・デメリットがあります。実務では、以下のように使い分けます。①予算に余裕がある場合 → クラッシング（人員追加）、②予算が限られている場合 → ファストトラッキング（並行実行）、③短縮幅が小さい（1～2日）場合 → クラッシング（リスクが低い）、④短縮幅が大きい（1週間以上）場合 → ファストトラッキング（大幅な短縮が可能）、⑤設計が安定している場合 → ファストトラッキング（手戻りリスクが低い）、⑥設計が不安定な場合 → クラッシング（手戻りを避ける）。また、両方を組み合わせることもあります（例: クリティカルパス上の作業Aはクラッシングで1日短縮、作業Bと作業Cをファストトラッキングで並行実行して2日短縮、合計3日短縮）。"
        }
      ]
    },
    {
      "id": 5,
      "title": "スケジュール管理の実践と進捗管理",
      "sections": [
        {
          "type": "text",
          "content": "プロジェクトのスケジュール管理は、計画（Planning）と管理（Controlling）の2つのフェーズに分かれます。①**計画フェーズ**：WBSで作業を洗い出し、アローダイアグラム・PDMでクリティカルパスを特定、ガントチャートでスケジュールを可視化、②**管理フェーズ**：日々の進捗を確認し、遅延が発生した場合は、スケジュール短縮手法（クラッシング、ファストトラッキング）を適用、という流れです。"
        },
        {
          "type": "text",
          "content": "**進捗管理**では、①**計画値（Planned Value, PV）**：計画時点で完了しているはずの作業量、②**実績値（Earned Value, EV）**：実際に完了した作業量、③**実コスト（Actual Cost, AC）**：実際に消費したコスト、の3つの指標を使って、進捗状況を定量的に評価します（EVM: Earned Value Management）。進捗率（%）= EV / PV × 100、コスト効率指数（CPI）= EV / AC、スケジュール効率指数（SPI）= EV / PV、を計算します。SPI < 1.0 の場合、スケジュールが遅延しています。"
        },
        {
          "type": "example",
          "title": "進捗管理の具体例：Webシステム開発プロジェクト",
          "content": "【前提】\nWebシステム開発プロジェクトで、プロジェクト全体の作業量を100人日、予算を1,000万円と見積もりました。\n計画では、10日目（プロジェクト開始から10日後）に、50人日（50%）の作業が完了しているはずです。\n\n【10日目の実績】\n①計画値（PV）: 50人日（計画では50%完了のはず）\n②実績値（EV）: 40人日（実際には40%しか完了していない）\n③実コスト（AC）: 500万円（実際に消費したコスト）\n\n【進捗率の計算】\n進捗率 = EV / PV × 100 = 40 / 50 × 100 = 80%\n\n意味: 計画では50%完了のはずが、実際には40%しか完了していない → 進捗率は80%（計画に対して20%遅れている）\n\n【スケジュール効率指数（SPI）の計算】\nSPI = EV / PV = 40 / 50 = 0.8\n\n意味: SPI < 1.0 → スケジュールが遅延している\nSPI = 0.8 → 計画の80%のスピードで進んでいる（20%遅れている）\n\n【コスト効率指数（CPI）の計算】\nCPI = EV / AC = 40人日 / 500万円\n※ 1人日のコストを計算: 1,000万円 / 100人日 = 10万円/人日\nEV = 40人日 × 10万円/人日 = 400万円\nCPI = 400万円 / 500万円 = 0.8\n\n意味: CPI < 1.0 → コストが超過している\nCPI = 0.8 → 100万円分のコスト超過（500万円 - 400万円 = 100万円）\n\n【対策】\n①スケジュール遅延（SPI = 0.8）への対策:\n  - クリティカルパス上の作業にリソースを追加投入（クラッシング）\n  - 並行実行できる作業を探す（ファストトラッキング）\n  - 顧客と交渉して納期を延期（最終手段）\n\n②コスト超過（CPI = 0.8）への対策:\n  - コストが超過している原因を分析（残業が多い、外部委託費が高い、など）\n  - 不要な作業を削減（スコープの見直し）\n  - 余裕時間がある作業のリソースを削減"
        },
        {
          "type": "table",
          "headers": ["指標", "計算式", "意味（< 1.0の場合）"],
          "rows": [
            ["進捗率", "EV / PV × 100", "計画に対する進捗の割合"],
            ["SPI（スケジュール効率指数）", "EV / PV", "スケジュールが遅延している"],
            ["CPI（コスト効率指数）", "EV / AC", "コストが超過している"]
          ]
        },
        {
          "type": "example",
          "title": "実践的なスケジュール管理の流れ（週次サイクル）",
          "content": "【プロジェクト開始時（計画フェーズ）】\n①WBSで作業を洗い出す（例: A～Gの7個の作業）\n②各作業の所要時間を見積もる（例: A=5日、B=3日、...）\n③アローダイアグラム・PDMを描き、クリティカルパスを特定（例: A→C→E→F→G）\n④ガントチャートを作成し、開始日・終了日を決定（例: 4/1～4/20）\n⑤クリティカルパス上の作業を重点管理する計画を立てる\n\n【毎週月曜日（進捗確認）】\n①先週の実績を確認（例: 作業Aは計画5日のところ、実際には6日かかった → 1日遅延）\n②ガントチャートを更新（例: 作業Aの終了日を4/5から4/6に変更）\n③遅延の影響範囲を確認（例: 作業Aが1日遅延 → クリティカルパス上の作業なので、プロジェクト全体が1日遅延）\n④対策を検討（例: 作業C（画面設計）にリソースを追加投入し、1日短縮）\n⑤EVMで進捗率・SPI・CPIを計算（例: SPI=0.9 → 10%遅れている）\n⑥週次報告書を作成し、ステークホルダ（顧客、経営層）に報告\n\n【毎週金曜日（翌週の計画）】\n①翌週の作業を確認（例: 作業B、Cを実施予定）\n②リソースの配分を調整（例: 作業Cは重要なので、デザイナーを2人配置）\n③リスクを洗い出し（例: 作業Cで「顧客の要求が不明確」というリスク → 月曜日に顧客とミーティング）\n\n【毎日（デイリー進捗確認）】\n①朝会（10分）で、昨日やったこと、今日やること、困っていることを共有\n②クリティカルパス上の作業の進捗を確認\n③問題が発生した場合、即座に対応（例: 「サーバが遅い」→ サーバを増強）\n\nこのサイクルを繰り返すことで、スケジュールを管理し、遅延を最小限に抑えます。"
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "スケジュール管理の成功のポイント",
          "content": "スケジュール管理を成功させるためのポイントは、①クリティカルパスを常に把握する（クリティカルパス上の作業は1日でも遅れるとプロジェクト全体が遅延）、②進捗を定量的に評価する（EVM: 進捗率、SPI、CPIを毎週計算）、③遅延の兆候を早期に検出する（毎日の朝会で問題を共有）、④遅延が発生したら即座に対策を実施する（クラッシング、ファストトラッキング）、⑤ステークホルダとコミュニケーションを密にする（週次報告、月次報告）、⑥リスクを事前に洗い出し、対策を準備する（例: 「要求が不明確」→ 顧客とミーティングを頻繁に実施）、です。スケジュール管理は、プロジェクトマネージャの最も重要な責務の1つです。"
        }
      ]
    }
  ]
}
