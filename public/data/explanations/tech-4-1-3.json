{
  "topicId": "tech-4-1-3",
  "title": "モデリング",
  "pages": [
    {
      "id": 1,
      "title": "DFD（データフロー図）とE-R図",
      "sections": [
        {
          "type": "text",
          "content": "**モデリング（Modeling）**とは、システムの構造や振る舞いを図で表現する手法です。モデリングにより、システムの仕様を視覚的に理解でき、開発者と顧客のコミュニケーションが円滑になります。主なモデリング手法として、①**DFD（データフロー図）**、②**E-R図**、③**UML（統一モデリング言語）**、があります。UMLには、ユースケース図、クラス図、シーケンス図、アクティビティ図などが含まれます。"
        },
        {
          "type": "text",
          "content": "**DFD（Data Flow Diagram、データフロー図）**とは、システム内のデータの流れを図で表現する手法です。DFDは、構造化分析で使用され、①どこからデータが来るか、②データがどのように処理されるか、③処理されたデータがどこへ行くか、④データがどこに保存されるか、を明確にします。DFDの構成要素は、①**データフロー（矢印）**、②**プロセス（丸）**、③**データストア（平行線）**、④**外部エンティティ（四角）**、の4つです。"
        },
        {
          "type": "example",
          "title": "DFDの具体例：ECサイトの注文処理",
          "content": "【システム概要】\nECサイトで、顧客が商品を注文し、注文データがデータベースに保存され、管理者が注文を確認する。\n\n【DFDの構成要素】\n①外部エンティティ（四角）：顧客、管理者\n②プロセス（丸）：注文処理、在庫確認\n③データストア（平行線）：注文DB、商品DB\n④データフロー（矢印）：注文データ、在庫情報\n\n【DFDの流れ】\n①顧客 → (注文データ) → [注文処理]\n②[注文処理] → (注文データ) → 《注文DB》（データストア）\n③[注文処理] → (商品ID) → [在庫確認]\n④[在庫確認] → (在庫情報) → 《商品DB》（データストア）\n⑤《商品DB》 → (在庫情報) → [在庫確認]\n⑥[在庫確認] → (在庫OK/NG) → [注文処理]\n⑦[注文処理] → (注文確認メール) → 顧客\n⑧《注文DB》 → (注文リスト) → 管理者\n\n【DFDの利点】\n①データの流れが明確になり、システムの全体像を把握できる\n②処理の順序やデータの保存場所が明確になる\n③顧客とのコミュニケーションがしやすい（図で説明できる）"
        },
        {
          "type": "text",
          "content": "**E-R図（Entity-Relationship Diagram、実体関連図）**とは、データベースの設計で使用される図で、①**エンティティ（Entity、実体）**：データベースに保存する対象（例: 顧客、商品、注文）、②**属性（Attribute）**：エンティティの特性（例: 顧客の氏名、メールアドレス）、③**リレーションシップ（Relationship、関連）**：エンティティ間の関係（例: 顧客が注文を行う）、を表現します。E-R図により、データベースのテーブル構造を設計できます。"
        },
        {
          "type": "example",
          "title": "E-R図の具体例：ECサイトのデータベース設計",
          "content": "【エンティティ】\n①顧客（Customer）: 顧客ID、氏名、メールアドレス、住所\n②商品（Product）: 商品ID、商品名、価格、在庫数\n③注文（Order）: 注文ID、注文日時、合計金額、顧客ID\n④注文明細（OrderDetail）: 注文明細ID、注文ID、商品ID、数量、単価\n\n【リレーションシップ】\n①顧客 と 注文：1対多（1人の顧客が複数の注文を行う）\n②注文 と 注文明細：1対多（1つの注文に複数の商品が含まれる）\n③商品 と 注文明細：1対多（1つの商品が複数の注文明細に含まれる）\n\n【E-R図の記法】\n- エンティティ: 長方形で表現（例: [顧客]）\n- 属性: エンティティの中に記述（例: 顧客ID、氏名）\n- リレーションシップ: 線で接続し、カーディナリティを記述（1対1、1対多、多対多）\n  - 1対多の場合: 1側に「1」、多側に「∞」または「*」を記述\n\n【E-R図の利点】\n①データベースのテーブル構造を設計できる\n②エンティティ間の関係が明確になる\n③正規化（データの重複を排除）の検討ができる"
        }
      ]
    },
    {
      "id": 2,
      "title": "UML概要とユースケース図",
      "sections": [
        {
          "type": "text",
          "content": "**UML（Unified Modeling Language、統一モデリング言語）**とは、オブジェクト指向のシステム設計で使用される標準的な図の記法です。UMLには、構造図（静的な構造を表現）と振る舞い図（動的な振る舞いを表現）の2種類があり、合計14種類の図が定義されています。基本情報技術者試験でよく出題されるのは、①**ユースケース図**、②**クラス図**、③**シーケンス図**、④**アクティビティ図**、の4つです。"
        },
        {
          "type": "text",
          "content": "**ユースケース図（Use Case Diagram）**とは、システムの機能（ユースケース）と、それを利用するユーザー（アクター）の関係を表現する図です。ユースケース図により、システムが「誰に」「何を」提供するかを明確にできます。ユースケース図の構成要素は、①**アクター（Actor）**：システムを利用するユーザーや外部システム（棒人間で表現）、②**ユースケース（Use Case）**：システムの機能（楕円で表現）、③**関連（Association）**：アクターとユースケースの関係（実線で表現）、の3つです。"
        },
        {
          "type": "example",
          "title": "ユースケース図の具体例：ECサイト",
          "content": "【アクター】\n①顧客（Customer）: ECサイトを利用する一般ユーザー\n②管理者（Admin）: 商品や注文を管理する管理者\n\n【ユースケース】\n①商品検索: 顧客が商品を検索する\n②商品詳細表示: 顧客が商品の詳細を見る\n③カート追加: 顧客が商品をカートに追加する\n④注文: 顧客が注文する\n⑤商品管理: 管理者が商品を追加・編集・削除する\n⑥注文管理: 管理者が注文を確認・発送する\n\n【ユースケース図の記法】\n```\n[顧客（棒人間）] ---- (商品検索)\n[顧客（棒人間）] ---- (商品詳細表示)\n[顧客（棒人間）] ---- (カート追加)\n[顧客（棒人間）] ---- (注文)\n[管理者（棒人間）] ---- (商品管理)\n[管理者（棒人間）] ---- (注文管理)\n```\n\n【ユースケース図の利点】\n①システムの機能を一覧できる\n②顧客とのコミュニケーションがしやすい（機能を確認できる）\n③要件定義の段階で、必要な機能を洗い出せる"
        },
        {
          "type": "table",
          "headers": ["UML図の種類", "分類", "用途"],
          "rows": [
            ["ユースケース図", "振る舞い図", "システムの機能とユーザーの関係を表現"],
            ["クラス図", "構造図", "クラスの構造と関係を表現"],
            ["シーケンス図", "振る舞い図", "オブジェクト間のメッセージのやり取りを時系列で表現"],
            ["アクティビティ図", "振る舞い図", "処理の流れ（フローチャート）を表現"]
          ]
        }
      ]
    },
    {
      "id": 3,
      "title": "クラス図",
      "sections": [
        {
          "type": "text",
          "content": "**クラス図（Class Diagram）**とは、オブジェクト指向設計で使用される図で、クラスの構造（属性、メソッド）と、クラス間の関係（継承、集約、関連）を表現します。クラス図により、プログラムの設計を視覚的に理解できます。クラス図の構成要素は、①**クラス**：長方形を3つに分割し、上から「クラス名」「属性」「メソッド」を記述、②**関係**：継承（実線の三角形）、集約（白抜きのひし形）、コンポジション（黒塗りのひし形）、関連（実線）、の2つです。"
        },
        {
          "type": "example",
          "title": "クラス図の具体例：ECサイトの設計",
          "content": "【クラス】\n①顧客（Customer）:\n  属性: 顧客ID、氏名、メールアドレス、住所\n  メソッド: 注文する()、カートに追加する()\n\n②商品（Product）:\n  属性: 商品ID、商品名、価格、在庫数\n  メソッド: 在庫を減らす()、在庫を増やす()\n\n③注文（Order）:\n  属性: 注文ID、注文日時、合計金額\n  メソッド: 合計金額を計算する()、注文を確定する()\n\n④注文明細（OrderDetail）:\n  属性: 注文明細ID、数量、単価\n  メソッド: 小計を計算する()\n\n【クラス間の関係】\n①顧客 と 注文：関連（1対多）\n  - 1人の顧客が複数の注文を行う\n  - 顧客クラスから注文クラスへの実線の矢印、多重度「1」と「*」を記述\n\n②注文 と 注文明細：コンポジション（1対多）\n  - 1つの注文に複数の注文明細が含まれる\n  - 注文が削除されると、注文明細も削除される（強い依存関係）\n  - 注文クラスから注文明細クラスへ、黒塗りのひし形で接続\n\n③商品 と 注文明細：関連（1対多）\n  - 1つの商品が複数の注文明細に含まれる\n  - 商品クラスから注文明細クラスへの実線の矢印\n\n【クラス図の記法】\n```\n┌─────────────┐\n│ Customer    │ (クラス名)\n├─────────────┤\n│ - 顧客ID    │ (属性、-はprivate)\n│ - 氏名      │\n│ - メールアドレス │\n├─────────────┤\n│ + 注文する() │ (メソッド、+はpublic)\n│ + カートに追加する() │\n└─────────────┘\n```\n\n【クラス図の利点】\n①プログラムの設計を視覚的に理解できる\n②クラス間の関係が明確になる\n③設計のレビューがしやすい"
        },
        {
          "type": "table",
          "headers": ["クラス間の関係", "記法", "意味"],
          "rows": [
            ["継承（Inheritance）", "実線の三角形（子→親）", "子クラスが親クラスの属性・メソッドを継承"],
            ["関連（Association）", "実線の矢印", "クラス間の関係（例: 顧客が注文を行う）"],
            ["集約（Aggregation）", "白抜きのひし形", "部品が全体に弱く依存（全体が削除されても部品は残る）"],
            ["コンポジション（Composition）", "黒塗りのひし形", "部品が全体に強く依存（全体が削除されると部品も削除）"]
          ]
        }
      ]
    },
    {
      "id": 4,
      "title": "シーケンス図",
      "sections": [
        {
          "type": "text",
          "content": "**シーケンス図（Sequence Diagram）**とは、オブジェクト間のメッセージのやり取りを時系列で表現する図です。シーケンス図により、システムの動的な振る舞い（処理の流れ）を理解できます。シーケンス図の構成要素は、①**オブジェクト（四角）**：処理に参加するオブジェクト、②**ライフライン（縦の点線）**：オブジェクトの生存期間、③**メッセージ（矢印）**：オブジェクト間のメソッド呼び出し、④**活性区間（細い長方形）**：オブジェクトが処理を実行している期間、の4つです。"
        },
        {
          "type": "example",
          "title": "シーケンス図の具体例：ECサイトの注文処理",
          "content": "【シナリオ】\n顧客が商品を注文し、在庫を確認し、注文が確定される。\n\n【参加オブジェクト】\n①顧客（Customer）\n②注文画面（OrderScreen）\n③注文コントローラ（OrderController）\n④商品（Product）\n⑤注文（Order）\n\n【シーケンス図の流れ（時系列、上から下へ）】\n①顧客 → 注文画面: 注文ボタンをクリック\n②注文画面 → 注文コントローラ: createOrder(商品ID, 数量)\n③注文コントローラ → 商品: checkStock(商品ID, 数量)\n④商品 → 商品: 在庫数 >= 数量 か確認\n⑤商品 → 注文コントローラ: 在庫OK（戻り値）\n⑥注文コントローラ → 注文: new Order(顧客ID, 商品ID, 数量)\n⑦注文 → 注文コントローラ: 注文インスタンス（戻り値）\n⑧注文コントローラ → 商品: reduceStock(商品ID, 数量)\n⑨商品 → 商品: 在庫数を減らす\n⑩注文コントローラ → 注文画面: 注文ID（戻り値）\n⑪注文画面 → 顧客: 注文完了画面を表示\n\n【シーケンス図の記法】\n```\n[顧客]       [注文画面]    [注文コントローラ]   [商品]    [注文]\n  |             |                |                 |         |\n  |-- 注文 ---->|                |                 |         |\n  |             |-- createOrder ->|                |         |\n  |             |                |-- checkStock -->|         |\n  |             |                |<-- 在庫OK ------|         |\n  |             |                |-- new Order --->|-------->|\n  |             |                |<-- 注文インスタンス ------|         |\n  |             |                |-- reduceStock ->|         |\n  |             |<-- 注文ID -----|                |         |\n  |<-- 完了 ----|                |                 |         |\n```\n\n【シーケンス図の利点】\n①処理の流れが時系列で明確になる\n②オブジェクト間のメッセージのやり取りが分かる\n③複雑な処理の理解がしやすい"
        }
      ]
    },
    {
      "id": 5,
      "title": "アクティビティ図",
      "sections": [
        {
          "type": "text",
          "content": "**アクティビティ図（Activity Diagram）**とは、処理の流れ（フローチャート）を表現する図です。アクティビティ図は、UMLの振る舞い図の1つで、ビジネスプロセスやアルゴリズムを視覚的に表現できます。アクティビティ図の構成要素は、①**開始ノード（黒丸）**、②**アクティビティ（角丸四角）**：処理、③**判断ノード（ひし形）**：条件分岐、④**フォークノード（太い横線）**：並行処理の開始、⑤**ジョインノード（太い横線）**：並行処理の終了、⑥**終了ノード（黒丸の周りに円）**、の6つです。"
        },
        {
          "type": "example",
          "title": "アクティビティ図の具体例：ECサイトの注文処理",
          "content": "【処理の流れ】\n①開始（黒丸）\n②商品を検索\n③商品が見つかったか？（判断ノード、ひし形）\n  - Yes → 商品詳細を表示\n  - No → 「商品が見つかりません」を表示 → 終了\n④カートに追加\n⑤注文ボタンをクリック\n⑥在庫があるか？（判断ノード、ひし形）\n  - Yes → 在庫を減らす\n  - No → 「在庫不足」を表示 → 終了\n⑦注文を確定\n⑧注文確認メールを送信（並行処理）\n⑨在庫を更新（並行処理）\n⑩並行処理の終了（ジョインノード）\n⑪注文完了画面を表示\n⑫終了（黒丸の周りに円）\n\n【アクティビティ図の記法】\n```\n ● (開始ノード)\n  |\n  v\n[商品を検索]\n  |\n  v\n<商品が見つかったか？> (判断ノード、ひし形)\n  |Yes            |No\n  v               v\n[商品詳細を表示]  [「商品が見つかりません」を表示] → ◉ (終了)\n  |\n  v\n[カートに追加]\n  |\n  v\n[注文ボタンをクリック]\n  |\n  v\n<在庫があるか？> (判断ノード、ひし形)\n  |Yes            |No\n  v               v\n[在庫を減らす]    [「在庫不足」を表示] → ◉ (終了)\n  |\n  v\n[注文を確定]\n  |\n  v\n━━━━━━━━━━━━━━ (フォークノード、並行処理の開始)\n  |                 |\n  v                 v\n[注文確認メールを送信]  [在庫を更新]\n  |                 |\n  v                 v\n━━━━━━━━━━━━━━ (ジョインノード、並行処理の終了)\n  |\n  v\n[注文完了画面を表示]\n  |\n  v\n ◉ (終了ノード)\n```\n\n【並行処理の例】\nフォークノード（太い横線）で並行処理が開始され、「注文確認メールを送信」と「在庫を更新」が同時に実行されます。両方の処理が完了すると、ジョインノード（太い横線）で合流します。\n\n【アクティビティ図の利点】\n①処理の流れが視覚的に分かりやすい\n②条件分岐や並行処理を表現できる\n③ビジネスプロセスの設計に使える"
        },
        {
          "type": "table",
          "headers": ["モデリング手法", "用途", "主な構成要素"],
          "rows": [
            ["DFD", "データの流れを表現", "データフロー、プロセス、データストア、外部エンティティ"],
            ["E-R図", "データベース設計", "エンティティ、属性、リレーションシップ"],
            ["ユースケース図", "システムの機能とユーザーの関係", "アクター、ユースケース、関連"],
            ["クラス図", "クラスの構造と関係", "クラス、属性、メソッド、継承、集約"],
            ["シーケンス図", "オブジェクト間のメッセージのやり取り", "オブジェクト、ライフライン、メッセージ、活性区間"],
            ["アクティビティ図", "処理の流れ（フローチャート）", "開始ノード、アクティビティ、判断ノード、終了ノード"]
          ]
        },
        {
          "type": "highlight",
          "icon": "📌",
          "title": "モデリング手法の使い分け",
          "content": "①データの流れを明確にしたい → DFD\n②データベースを設計したい → E-R図\n③システムの機能を洗い出したい → ユースケース図\n④プログラムの設計を視覚化したい → クラス図\n⑤処理の流れ（時系列）を理解したい → シーケンス図\n⑥処理の流れ（フローチャート）を設計したい → アクティビティ図\n\nプロジェクトの段階に応じて、適切なモデリング手法を選択します（例: 要件定義ではユースケース図、設計ではクラス図とシーケンス図）。"
        }
      ]
    }
  ]
}
