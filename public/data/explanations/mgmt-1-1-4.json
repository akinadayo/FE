{
  "topicId": "mgmt-1-1-4",
  "title": "コスト管理",
  "pages": [
    {
      "id": 1,
      "title": "プロジェクトコスト管理の基礎と見積り手法",
      "sections": [
        {
          "type": "text",
          "content": "**プロジェクトコスト管理**とは、プロジェクトを予算内で完了させるために、コスト(費用)を計画・見積り・管理するプロセスです。プロジェクトのコストは、主に「人件費」(開発者の工数×単価)が大部分を占めます。そのため、開発工数を正確に見積もることが、プロジェクト成功の鍵となります。コスト管理の主な活動は、①**コスト見積り**:必要な工数とコストを予測、②**予算設定**:承認された予算を各作業に配分、③**コスト管理**:実際のコストを追跡し、予算と比較、の3つです。"
        },
        {
          "type": "table",
          "headers": ["活動", "説明", "成果物"],
          "rows": [
            ["コスト見積り", "プロジェクトに必要な工数(人月・人日)とコストを予測", "コスト見積書"],
            ["予算設定", "承認された予算を各作業・フェーズに配分", "コストベースライン(予算計画)"],
            ["コスト管理", "実際のコストを追跡し、予算と比較。差異があれば是正措置", "コスト実績報告書、差異分析レポート"]
          ]
        },
        {
          "type": "text",
          "content": "**開発工数の見積り手法**には、①**類推見積り(Analogous Estimating)**、②**パラメトリック見積り(Parametric Estimating)**、③**ボトムアップ見積り(Bottom-Up Estimating)**、の3つがあります。それぞれ精度と必要な情報量が異なります。"
        },
        {
          "type": "example",
          "title": "類推見積り(Analogous Estimating)の具体例",
          "content": "【定義】\n過去の類似プロジェクトの実績データを参考に、新しいプロジェクトの工数を見積もる手法。\n\n【具体例】\n過去に開発した「在庫管理システム」(規模:3,000行、工数:6人月)と似た「受発注管理システム」を開発する場合、「受発注管理システムは在庫管理システムの1.5倍の規模だろう」と判断し、工数を「6人月 × 1.5 = 9人月」と見積もる。\n\n【利点】\n①素早く見積もれる(プロジェクト初期段階で使える)\n②過去の実績データがあれば、ある程度の精度が得られる\n\n【欠点】\n①類似プロジェクトがない場合、精度が低い\n②新技術を使う場合、過去の実績が参考にならない\n\n【使用場面】\nプロジェクトの初期段階で、詳細な情報がまだない時。概算見積りが必要な時。"
        },
        {
          "type": "example",
          "title": "パラメトリック見積り(Parametric Estimating)の具体例",
          "content": "【定義】\nプロジェクトの特性(パラメータ)と過去の統計データの関係を数式(モデル)で表し、工数を計算する手法。\n\n【具体例】\n過去のデータから「1画面あたりの開発工数 = 2人日」という関係が分かっている場合、新しいシステムが「50画面」なら、工数を「50画面 × 2人日/画面 = 100人日」と見積もる。\n\n【代表的なパラメトリック見積り手法】\n①ファンクションポイント法(FP法):システムの機能の複雑さから工数を計算\n②LOC(Lines Of Code)法:プログラムの行数から工数を計算\n③COCOMO(Constructive Cost Model):プログラムの行数と補正係数から工数を計算\n\n【利点】\n①数式で計算するため、客観的で再現性がある\n②精度が高い(過去のデータが豊富な場合)\n\n【欠点】\n①過去のデータが必要(統計データがないと使えない)\n②数式(モデル)の作成に専門知識が必要\n\n【使用場面】\n過去のプロジェクトデータが蓄積されている組織。標準化された開発プロセスがある場合。"
        },
        {
          "type": "example",
          "title": "ボトムアップ見積り(Bottom-Up Estimating)の具体例",
          "content": "【定義】\nプロジェクトを細かい作業(タスク)に分解し、各タスクの工数を個別に見積もり、合計する手法。\n\n【具体例】\n「ECサイト開発」プロジェクトを、①ユーザー登録機能(5人日)、②商品検索機能(8人日)、③カート機能(6人日)、④注文機能(10人日)、⑤決済機能(12人日)、⑥管理者機能(15人日)、の6つの機能に分解し、各機能の開発工数を見積もる。合計工数 = 5+8+6+10+12+15 = 56人日。\n\n【利点】\n①最も精度が高い(詳細な分析に基づく)\n②各タスクの担当者が見積もるため、現実的\n\n【欠点】\n①時間と手間がかかる(全てのタスクを洗い出す必要がある)\n②プロジェクト初期段階では使えない(詳細が分からないため)\n\n【使用場面】\n要件定義が完了し、詳細な作業が明確になった段階。精度の高い見積りが必要な時。"
        },
        {
          "type": "table",
          "headers": ["見積り手法", "精度", "必要な情報量", "使用場面"],
          "rows": [
            ["類推見積り", "低～中", "少(過去の類似プロジェクトの実績)", "プロジェクト初期段階"],
            ["パラメトリック見積り", "中～高", "中(過去の統計データ、数式)", "標準化された開発プロセスがある場合"],
            ["ボトムアップ見積り", "高", "多(全タスクの詳細な分析)", "要件定義完了後"]
          ]
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "見積り手法の使い分け",
          "content": "プロジェクトの段階に応じて、見積り手法を使い分けます。①プロジェクト構想段階(詳細不明):類推見積りで概算、②要件定義段階(ある程度詳細が分かる):パラメトリック見積り、③設計段階(詳細が確定):ボトムアップ見積り、という流れが一般的です。また、複数の手法を組み合わせて見積り、結果を比較することで精度を高めることもあります。"
        }
      ]
    },
    {
      "id": 2,
      "title": "ファンクションポイント法(FP法)",
      "sections": [
        {
          "type": "text",
          "content": "**ファンクションポイント法(Function Point Method、FP法)**とは、システムの「機能の数と複雑さ」からソフトウェアの規模を測定し、開発工数を見積もる手法です。ファンクションポイント(FP)は、プログラムの行数に依存しないため、プログラミング言語に関係なく使えます。FP法は、①ユーザーから見た機能を評価(内部設計は考慮しない)、②プログラミング言語に依存しない、③要件定義段階で見積もれる、という特徴があります。"
        },
        {
          "type": "example",
          "title": "ファンクションポイント法の計算手順",
          "content": "【手順1: 機能を5種類に分類してカウント】\nシステムの機能を以下の5種類に分類し、それぞれの数をカウントします。\n\n①外部入力(EI: External Input):ユーザーがシステムにデータを入力する機能\n  例: 商品登録画面、注文入力画面\n\n②外部出力(EO: External Output):システムがデータを加工して出力する機能\n  例: 売上レポート、在庫一覧(集計・計算あり)\n\n③外部照会(EQ: External inQuiry):システムがデータを加工せずに出力する機能\n  例: 商品詳細表示、注文履歴表示\n\n④内部論理ファイル(ILF: Internal Logical File):システムが管理するデータファイル\n  例: 商品マスタ、注文データ\n\n⑤外部インターフェースファイル(EIF: External Interface File):外部システムから参照するデータファイル\n  例: 取引先マスタ(他システムから参照)\n\n【手順2: 各機能の複雑さを評価】\n各機能を「単純(Simple)」「普通(Average)」「複雑(Complex)」の3段階で評価し、複雑さ係数を掛けます。\n\n【手順3: 未調整ファンクションポイント(UFP)を計算】\nUFP = Σ(機能数 × 複雑さ係数)\n\n【手順4: 補正係数を適用して調整ファンクションポイント(AFP)を計算】\nAFP = UFP × 補正係数(0.65～1.35)\n補正係数は、システムの特性(データ通信の有無、性能要求、再利用性など14項目)を評価して決定。\n\n【手順5: 開発工数を計算】\n開発工数(人月) = AFP × 生産性(人月/FP)\n生産性は、過去のプロジェクトデータから求める(例: 1FPあたり0.05人月)。"
        },
        {
          "type": "example",
          "title": "ファンクションポイント法の計算例:ECサイト",
          "content": "【ECサイトの機能】\n①外部入力(EI):ユーザー登録(単純)、商品登録(普通)、注文入力(複雑) → 3個\n②外部出力(EO):売上レポート(複雑)、在庫一覧(普通) → 2個\n③外部照会(EQ):商品詳細表示(単純)、注文履歴表示(単純) → 2個\n④内部論理ファイル(ILF):商品マスタ(普通)、注文データ(複雑)、ユーザーデータ(普通) → 3個\n⑤外部インターフェースファイル(EIF):取引先マスタ(単純) → 1個\n\n【複雑さ係数(標準値)】\nEI: 単純3、普通4、複雑6\nEO: 単純4、普通5、複雑7\nEQ: 単純3、普通4、複雑6\nILF: 単純7、普通10、複雑15\nEIF: 単純5、普通7、複雑10\n\n【未調整FP(UFP)の計算】\n①EI: 3(単純ユーザー登録) + 4(普通商品登録) + 6(複雑注文入力) = 13\n②EO: 7(複雑売上レポート) + 5(普通在庫一覧) = 12\n③EQ: 3(単純商品詳細) + 3(単純注文履歴) = 6\n④ILF: 10(普通商品マスタ) + 15(複雑注文データ) + 10(普通ユーザーデータ) = 35\n⑤EIF: 5(単純取引先マスタ) = 5\nUFP = 13 + 12 + 6 + 35 + 5 = 71FP\n\n【調整FP(AFP)の計算】\n補正係数 = 1.0(システムの特性が標準的と仮定)\nAFP = 71 × 1.0 = 71FP\n\n【開発工数の計算】\n過去のデータから、生産性 = 0.05人月/FP とすると、\n開発工数 = 71FP × 0.05人月/FP = 3.55人月 ≒ 3.6人月"
        },
        {
          "type": "table",
          "headers": ["機能種類", "説明", "具体例"],
          "rows": [
            ["外部入力(EI)", "ユーザーがデータを入力", "商品登録、注文入力"],
            ["外部出力(EO)", "データを加工して出力", "売上レポート、在庫一覧"],
            ["外部照会(EQ)", "データを加工せずに出力", "商品詳細、注文履歴"],
            ["内部論理ファイル(ILF)", "システムが管理するデータ", "商品マスタ、注文データ"],
            ["外部インターフェースファイル(EIF)", "外部システムから参照するデータ", "取引先マスタ"]
          ]
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "ファンクションポイント法の利点と欠点",
          "content": "【利点】\n①プログラミング言語に依存しない(Java、Python、C、どの言語でも同じFP値)\n②要件定義段階で見積もれる(プログラムコードを書く前に見積もれる)\n③ユーザーから見た機能で評価するため、理解しやすい\n\n【欠点】\n①計算が複雑(機能の分類、複雑さの評価に専門知識が必要)\n②評価者によって結果がばらつく(主観が入りやすい)\n③非機能要件(性能、セキュリティ)の評価が難しい\n\n【使用場面】\n要件定義段階で、プログラミング言語が決まっていない場合。複数のベンダーから見積もりを取る場合(共通の尺度として使える)。"
        }
      ]
    },
    {
      "id": 3,
      "title": "LOC法とCOCOMO",
      "sections": [
        {
          "type": "text",
          "content": "**LOC法(Lines Of Code法)**とは、プログラムの「行数」からソフトウェアの規模を測定し、開発工数を見積もる手法です。LOC(ライン・オブ・コード)は、プログラムのソースコードの行数を表します。LOC法は、①理解しやすい(行数は誰でも数えられる)、②プログラミング言語に依存する(Java 1000行とPython 1000行では開発工数が異なる)、③詳細設計後でないと見積もれない、という特徴があります。"
        },
        {
          "type": "example",
          "title": "LOC法の計算例",
          "content": "【過去のプロジェクトデータ】\n「在庫管理システム」: 3,000行、開発工数6人月 → 生産性 = 3,000行 ÷ 6人月 = 500行/人月\n\n【新しいプロジェクトの見積り】\n「受発注管理システム」の予想行数: 4,500行\n開発工数 = 4,500行 ÷ 500行/人月 = 9人月\n\n【問題点】\nプログラムの行数は、実際にコードを書いてみないと正確に分からないため、見積り時点では「予想行数」を使う必要があります。予想が外れると、工数見積りも大きく外れます。また、同じ機能でも、プログラマーの書き方によって行数が変わる(簡潔に書けば行数が減る)ため、精度が低くなります。"
        },
        {
          "type": "text",
          "content": "**COCOMO(Constructive Cost Model、コストモ)**とは、LOC法を改良した工数見積り手法で、プログラムの行数と「補正係数」を使って開発工数を計算します。COCOMOは、①Basic COCOMO(基本モデル)、②Intermediate COCOMO(中間モデル)、③Detailed COCOMO(詳細モデル)、の3つのレベルがあります。基本情報技術者試験では、Basic COCOMOが出題されます。"
        },
        {
          "type": "example",
          "title": "Basic COCOMO の計算式と具体例",
          "content": "【Basic COCOMO の計算式】\n開発工数(人月) = a × (KLOC)^b\nKLOC(キロ・ライン・オブ・コード) = プログラムの行数 ÷ 1000\na, b = プロジェクトの種類による係数\n\n【プロジェクトの種類と係数】\n①組込み型(Organic):小規模で経験豊富なチーム、要件が明確\n  a=2.4、b=1.05\n  例: 社内の小規模業務システム\n\n②半分離型(Semi-Detached):中規模、ある程度の経験\n  a=3.0、b=1.12\n  例: ECサイト、一般的な業務システム\n\n③組込み型(Embedded):大規模で複雑、ハードウェアとの連携が必要\n  a=3.6、b=1.20\n  例: 航空機の制御システム、組込みシステム\n\n【計算例: 半分離型のプロジェクト】\n予想行数 = 50,000行 → KLOC = 50\n開発工数 = 3.0 × (50)^1.12 = 3.0 × 74.1 ≒ 222人月 ≒ 18.5人年\n\n【bの意味】\nbが1より大きい → 規模が大きくなるほど、工数が非線形に増加(規模が2倍になっても、工数は2倍以上になる)。これは、規模が大きいプロジェクトでは、コミュニケーションコスト、統合作業が増えるため。"
        },
        {
          "type": "table",
          "headers": ["プロジェクトの種類", "a", "b", "特徴", "具体例"],
          "rows": [
            ["組込み型(Organic)", "2.4", "1.05", "小規模、経験豊富、要件明確", "社内の小規模業務システム"],
            ["半分離型(Semi-Detached)", "3.0", "1.12", "中規模、ある程度の経験", "ECサイト、一般的な業務システム"],
            ["組込み型(Embedded)", "3.6", "1.20", "大規模・複雑、ハードウェア連携", "航空機の制御システム"]
          ]
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "LOC法とCOCOMOの利点と欠点",
          "content": "【LOC法の利点】\n①理解しやすい(行数は誰でも数えられる)\n②過去のデータがあれば、簡単に計算できる\n\n【LOC法の欠点】\n①プログラミング言語に依存する(言語ごとに生産性が異なる)\n②詳細設計後でないと行数が分からない(要件定義段階では使えない)\n③プログラマーの書き方によって行数が変わる(精度が低い)\n\n【COCOMOの利点】\n①プロジェクトの種類(規模、複雑さ)を考慮できる\n②規模が大きくなるほど工数が非線形に増加することを反映(現実的)\n\n【COCOMOの欠点】\n①LOC法と同じく、プログラミング言語に依存\n②係数(a, b)の設定が難しい(組織ごとに調整が必要)"
        }
      ]
    },
    {
      "id": 4,
      "title": "コスト予実管理とEVMの基礎",
      "sections": [
        {
          "type": "text",
          "content": "**コスト予実管理**とは、プロジェクトの実際のコスト(実績)を追跡し、計画(予算)と比較して、差異があれば是正措置を取るプロセスです。コスト予実管理では、①計画値(PV: Planned Value)、②実績値(AC: Actual Cost)、③出来高(EV: Earned Value)、の3つの値を使って、プロジェクトの進捗とコストを管理します。**EVM(Earned Value Management、アーンドバリューマネジメント)**は、この3つの値を使ってプロジェクトの進捗とコストを総合的に評価する手法です。"
        },
        {
          "type": "table",
          "headers": ["指標", "英語", "説明"],
          "rows": [
            ["計画値", "PV(Planned Value)", "現時点で完了しているべき作業のコスト(予算ベース)"],
            ["実績値", "AC(Actual Cost)", "現時点で実際に使ったコスト"],
            ["出来高", "EV(Earned Value)", "現時点で実際に完了した作業のコスト(予算ベース)"]
          ]
        },
        {
          "type": "example",
          "title": "PV、AC、EVの具体例:Webサイト開発プロジェクト",
          "content": "【プロジェクト概要】\nWebサイト開発プロジェクト(総予算:100万円、期間:10週間)\n各週の計画コスト:10万円/週(合計100万円)\n\n【第5週終了時点の状況】\n①計画値(PV):第5週終了時点で完了しているべき作業のコスト\n  PV = 10万円/週 × 5週 = 50万円\n\n②実績値(AC):第5週終了時点で実際に使ったコスト\n  実際に使ったコスト = 60万円(予算オーバー)\n\n③出来高(EV):第5週終了時点で実際に完了した作業のコスト\n  実際に完了した作業 = 全体の40%(本来は50%完了しているべきだが、遅れている)\n  EV = 100万円 × 40% = 40万円\n\n【現状の分析】\nPV = 50万円(計画では50万円分の作業が完了しているべき)\nEV = 40万円(実際には40万円分の作業しか完了していない) → 進捗が遅れている\nAC = 60万円(実際に60万円使った) → コストオーバー\n\n【問題点】\n①進捗が遅れている:50万円分の作業を完了すべきだが、40万円分しか完了していない(進捗率80%)\n②コストオーバー:40万円分の作業に60万円使った(コスト効率が悪い)"
        },
        {
          "type": "text",
          "content": "EVMでは、PV、AC、EVの3つの値から、**コスト差異(CV: Cost Variance)**と**スケジュール差異(SV: Schedule Variance)**を計算し、プロジェクトの状況を評価します。また、**コスト効率指数(CPI: Cost Performance Index)**と**スケジュール効率指数(SPI: Schedule Performance Index)**を計算し、プロジェクトの効率を評価します。"
        },
        {
          "type": "table",
          "headers": ["指標", "計算式", "意味"],
          "rows": [
            ["コスト差異(CV)", "CV = EV - AC", "正の値:予算内、負の値:コストオーバー"],
            ["スケジュール差異(SV)", "SV = EV - PV", "正の値:進捗が早い、負の値:進捗が遅れている"],
            ["コスト効率指数(CPI)", "CPI = EV ÷ AC", "1より大:コスト効率が良い、1より小:コスト効率が悪い"],
            ["スケジュール効率指数(SPI)", "SPI = EV ÷ PV", "1より大:進捗が早い、1より小:進捗が遅れている"]
          ]
        },
        {
          "type": "example",
          "title": "EVM指標の計算例:Webサイト開発プロジェクト(続き)",
          "content": "【第5週終了時点の状況(再掲)】\nPV = 50万円、EV = 40万円、AC = 60万円\n\n【コスト差異(CV)の計算】\nCV = EV - AC = 40万円 - 60万円 = -20万円\n → 負の値 → コストオーバー(20万円予算をオーバー)\n\n【スケジュール差異(SV)の計算】\nSV = EV - PV = 40万円 - 50万円 = -10万円\n → 負の値 → 進捗が遅れている(10万円分の作業が遅れている)\n\n【コスト効率指数(CPI)の計算】\nCPI = EV ÷ AC = 40万円 ÷ 60万円 ≒ 0.67\n → 1より小 → コスト効率が悪い(1円の価値を生み出すのに1.5円使っている)\n\n【スケジュール効率指数(SPI)の計算】\nSPI = EV ÷ PV = 40万円 ÷ 50万円 = 0.8\n → 1より小 → 進捗が遅れている(計画の80%しか完了していない)\n\n【解釈】\nこのプロジェクトは、①進捗が遅れている(SPI=0.8、計画の80%しか完了していない)、②コストオーバー(CPI=0.67、コスト効率が悪い)、という2つの問題を抱えています。このままでは、プロジェクトは予算オーバー・納期遅延のリスクが高いため、是正措置(増員、作業の効率化、要件の見直し)が必要です。"
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "EVMの利点",
          "content": "EVMの最大の利点は、「進捗」と「コスト」を同時に評価できることです。従来の進捗管理では、「作業の50%が完了した」という情報だけでは、コストが予算内かどうか分かりません。EVMでは、EV(完了した作業のコスト)とAC(実際に使ったコスト)を比較することで、「50%の作業を完了するのに、予算の60%を使った」といった、コスト効率も評価できます。また、CPIとSPIを使って、プロジェクト完了時の最終コストと完了時期を予測できます(例: CPI=0.67なら、最終コスト = 予算 ÷ 0.67 = 150万円と予測)。"
        }
      ]
    },
    {
      "id": 5,
      "title": "EVMの実践と完了時コスト予測",
      "sections": [
        {
          "type": "text",
          "content": "EVMでは、プロジェクトの途中経過(PV、EV、AC)から、**完成時総コスト見積り(EAC: Estimate At Completion)**と**残作業コスト見積り(ETC: Estimate To Complete)**を予測できます。これにより、プロジェクトマネージャーは、プロジェクト完了時の最終コストを早期に把握し、必要に応じて是正措置を取ることができます。"
        },
        {
          "type": "table",
          "headers": ["指標", "英語", "計算式", "意味"],
          "rows": [
            ["完成時総コスト見積り", "EAC(Estimate At Completion)", "EAC = BAC ÷ CPI", "プロジェクト完了時の予想総コスト"],
            ["残作業コスト見積り", "ETC(Estimate To Complete)", "ETC = EAC - AC", "残りの作業に必要な予想コスト"],
            ["完成時コスト差異", "VAC(Variance At Completion)", "VAC = BAC - EAC", "予算と完成時総コストの差"]
          ]
        },
        {
          "type": "text",
          "content": "**BAC(Budget At Completion)**は、プロジェクトの総予算(計画値の合計)です。上記のWebサイト開発プロジェクトでは、BAC = 100万円です。"
        },
        {
          "type": "example",
          "title": "EACとETCの計算例:Webサイト開発プロジェクト(続き)",
          "content": "【第5週終了時点の状況(再掲)】\nBAC = 100万円(総予算)\nPV = 50万円、EV = 40万円、AC = 60万円\nCPI = 0.67、SPI = 0.8\n\n【完成時総コスト見積り(EAC)の計算】\nEAC = BAC ÷ CPI = 100万円 ÷ 0.67 ≒ 149万円\n → 現在のコスト効率(CPI=0.67)が続くと仮定すると、プロジェクト完了時の総コストは約149万円になる(予算100万円を49万円オーバー)。\n\n【残作業コスト見積り(ETC)の計算】\nETC = EAC - AC = 149万円 - 60万円 = 89万円\n → 残りの作業に約89万円必要(当初計画では、残り5週間で50万円のはずだったが、大幅に増加)。\n\n【完成時コスト差異(VAC)の計算】\nVAC = BAC - EAC = 100万円 - 149万円 = -49万円\n → 負の値 → プロジェクト完了時に予算を49万円オーバーする見込み。\n\n【是正措置】\nこのままでは予算を49万円オーバーするため、プロジェクトマネージャーは以下の是正措置を検討します。\n①要件の見直し:優先度の低い機能を削減(スコープを縮小)\n②作業の効率化:作業手順を改善、ツールを活用\n③増員:経験豊富な開発者を追加(短期的にはコスト増だが、長期的には効率化)\n④納期の延長:顧客と交渉し、納期を延長(追加コストを抑える)"
        },
        {
          "type": "example",
          "title": "EVMの実践例:進捗とコストの総合評価",
          "content": "【ケース1: 順調なプロジェクト】\nPV = 50万円、EV = 52万円、AC = 48万円\nCV = EV - AC = 52 - 48 = +4万円(予算内)\nSV = EV - PV = 52 - 50 = +2万円(進捗が早い)\nCPI = 52 ÷ 48 ≒ 1.08(コスト効率が良い)\nSPI = 52 ÷ 50 = 1.04(進捗が早い)\n → このプロジェクトは、進捗が早く、コスト効率も良い。順調。\n\n【ケース2: 進捗は良いがコストオーバー】\nPV = 50万円、EV = 55万円、AC = 70万円\nCV = 55 - 70 = -15万円(コストオーバー)\nSV = 55 - 50 = +5万円(進捗が早い)\nCPI = 55 ÷ 70 ≒ 0.79(コスト効率が悪い)\nSPI = 55 ÷ 50 = 1.1(進捗が早い)\n → 進捗は早いが、コストをかけすぎている。作業の効率化が必要。\n\n【ケース3: コストは予算内だが進捗が遅い】\nPV = 50万円、EV = 40万円、AC = 38万円\nCV = 40 - 38 = +2万円(予算内)\nSV = 40 - 50 = -10万円(進捗が遅れている)\nCPI = 40 ÷ 38 ≒ 1.05(コスト効率が良い)\nSPI = 40 ÷ 50 = 0.8(進捗が遅れている)\n → コストは予算内だが、進捗が遅れている。増員やスケジュール調整が必要。\n\n【ケース4: 最悪(進捗もコストも悪い)】\nPV = 50万円、EV = 35万円、AC = 60万円\nCV = 35 - 60 = -25万円(コストオーバー)\nSV = 35 - 50 = -15万円(進捗が遅れている)\nCPI = 35 ÷ 60 ≒ 0.58(コスト効率が非常に悪い)\nSPI = 35 ÷ 50 = 0.7(進捗が大幅に遅れている)\n → 進捗もコストも悪い。プロジェクトの根本的な見直しが必要(要件の削減、納期延長、増員)。"
        },
        {
          "type": "table",
          "headers": ["状況", "CV", "SV", "CPI", "SPI", "評価"],
          "rows": [
            ["ケース1", "+", "+", ">1", ">1", "順調(予算内、進捗が早い)"],
            ["ケース2", "-", "+", "<1", ">1", "進捗は良いがコストオーバー"],
            ["ケース3", "+", "-", ">1", "<1", "コストは予算内だが進捗が遅い"],
            ["ケース4", "-", "-", "<1", "<1", "最悪(コストオーバー、進捗が遅い)"]
          ]
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "EVMを使ったプロジェクト管理のポイント",
          "content": "EVMを効果的に使うためのポイント:\n\n①定期的に測定する:毎週または毎月、PV、EV、ACを測定し、CVとSVを計算。早期に問題を発見できる。\n\n②出来高(EV)の測定を正確に:EVは「実際に完了した作業のコスト」なので、作業の完了度を正確に測定することが重要。例えば、「設計作業が80%完了」と判断した場合、EV = 設計の予算 × 80%となる。\n\n③是正措置を迅速に:CVやSVが負の値になったら、すぐに是正措置を検討。放置すると、問題が拡大する。\n\n④ステークホルダーに報告:CPIやSPI、EACをステークホルダー(顧客、経営層)に報告し、プロジェクトの状況を共有。透明性が高まり、信頼関係が構築できる。\n\n⑤過去のデータを蓄積:プロジェクト完了後、実際のCPIやSPIを記録。次回のプロジェクトで、より正確な見積りができる。"
        }
      ]
    }
  ]
}
