{
  "topicId": "tech-3-5-4",
  "title": "暗号化技術",
  "pages": [
    {
      "id": 1,
      "title": "暗号化の基礎と共通鍵暗号方式",
      "sections": [
        {
          "type": "text",
          "content": "**暗号化（Encryption）**とは、データを第三者に読めない形式に変換することです。変換前のデータを**平文（Plaintext）**、変換後のデータを**暗号文（Ciphertext）**と呼びます。暗号文を平文に戻すことを**復号（Decryption）**と呼びます。暗号化と復号には**鍵（Key）**を使用します。暗号化技術は、ネットワーク通信、データ保存、認証など、情報セキュリティの様々な場面で使用されます。暗号化方式は、①**共通鍵暗号方式（秘密鍵暗号方式）**：暗号化と復号に同じ鍵を使用、②**公開鍵暗号方式**：暗号化と復号に異なる鍵を使用、の2種類に分類されます。"
        },
        {
          "type": "table",
          "headers": ["用語", "説明", "具体例"],
          "rows": [
            ["平文", "暗号化する前の元のデータ", "「パスワードは1234です」という文字列"],
            ["暗号文", "暗号化された後のデータ（第三者には意味不明）", "「xK9#mP@2vQ!」のようなランダムな文字列"],
            ["暗号化", "平文を暗号文に変換すること", "「パスワードは1234です」→「xK9#mP@2vQ!」"],
            ["復号", "暗号文を平文に戻すこと", "「xK9#mP@2vQ!」→「パスワードは1234です」"],
            ["鍵", "暗号化・復号に使用する秘密の情報", "「mySecretKey123」のような文字列やビット列"]
          ]
        },
        {
          "type": "text",
          "content": "**共通鍵暗号方式（対称鍵暗号方式、秘密鍵暗号方式）**とは、暗号化と復号に同じ鍵を使用する暗号化方式です。送信者が共通鍵で平文を暗号化し、受信者が同じ共通鍵で暗号文を復号します。共通鍵暗号方式の利点は、①処理が高速（公開鍵暗号方式の100～1000倍速い）、②大量のデータの暗号化に適している、です。欠点は、①鍵の共有が必要（送信者と受信者が事前に同じ鍵を共有する必要がある）、②鍵の管理が困難（N人で通信する場合、N×(N-1)/2個の鍵が必要）、です。代表的な共通鍵暗号方式として、**AES（Advanced Encryption Standard）**と**DES（Data Encryption Standard）**があります。"
        },
        {
          "type": "example",
          "title": "共通鍵暗号方式の具体例：社内でファイルを暗号化して保存",
          "content": "【シナリオ】\nAさんが、機密ファイル「売上データ.xlsx」を社内の共有サーバに保存する際、盗聴を防ぐために暗号化したい。\n\n【手順】\n①Aさんは、共通鍵「myCompanyKey2024」を使用して、「売上データ.xlsx」（平文）を暗号化し、「売上データ.enc」（暗号文）を生成\n②Aさんは、「売上データ.enc」を共有サーバにアップロード\n③Bさんが、「売上データ.enc」をダウンロードし、同じ共通鍵「myCompanyKey2024」で復号して、「売上データ.xlsx」（平文）を取得\n\n【鍵の共有方法】\n共通鍵「myCompanyKey2024」は、事前にAさんとBさんの間で安全に共有する必要があります（例: 対面で手渡し、別の暗号化通信で送信）。\n\n【メリット】\n処理が高速で、大容量のファイル（数GB）でも短時間で暗号化・復号できます。\n\n【デメリット】\n共通鍵を安全に共有する必要があり、鍵が漏洩すると、暗号文が第三者に復号されるリスクがあります。"
        },
        {
          "type": "table",
          "headers": ["暗号方式", "鍵長（ビット）", "特徴"],
          "rows": [
            ["DES", "56", "古い暗号方式。鍵長が短く、総当たり攻撃で解読可能。現在は非推奨"],
            ["3DES（トリプルDES）", "168（実質112）", "DESを3回適用。DESより強固だが、処理が遅い。レガシーシステムで使用"],
            ["AES", "128、192、256", "最も広く使用される現代の暗号方式。高速で強固。推奨"]
          ]
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "AESとDESの違い",
          "content": "**DES（Data Encryption Standard）**は、1977年に米国標準として採用された共通鍵暗号方式ですが、鍵長が56ビットと短く、現在のコンピュータの性能では数時間で総当たり攻撃（全ての鍵を試す攻撃）により解読されてしまいます。そのため、DESは現在は非推奨で、代わりに**AES（Advanced Encryption Standard）**が使用されます。AESは、2001年に米国標準として採用され、鍵長が128、192、256ビットと長く、総当たり攻撃では現実的な時間で解読できません。AESは、Wi-Fi（WPA2/WPA3）、VPN、ファイル暗号化など、様々な場面で使用されています。基本情報技術者試験では、AESが共通鍵暗号方式の代表例として頻出します。"
        }
      ]
    },
    {
      "id": 2,
      "title": "公開鍵暗号方式とハイブリッド暗号方式",
      "sections": [
        {
          "type": "text",
          "content": "**公開鍵暗号方式（非対称鍵暗号方式）**とは、暗号化と復号に異なる鍵（鍵ペア）を使用する暗号化方式です。鍵ペアは、①**公開鍵（Public Key）**：誰にでも公開できる鍵、暗号化に使用、②**秘密鍵（Private Key）**：自分だけが保管する鍵、復号に使用、の2つから構成されます。送信者が受信者の公開鍵で平文を暗号化し、受信者が自分の秘密鍵で暗号文を復号します。公開鍵暗号方式の利点は、①鍵の配送問題が解決（公開鍵は公開しても問題ない）、②鍵の管理が容易（N人で通信する場合、各人が1つの鍵ペアを持つだけでよい、合計N個の鍵ペア）、です。欠点は、①処理が遅い（共通鍵暗号方式の100～1000倍遅い）、②大量のデータの暗号化には不向き、です。代表的な公開鍵暗号方式として、**RSA（Rivest-Shamir-Adleman）**があります。"
        },
        {
          "type": "example",
          "title": "公開鍵暗号方式の具体例：メールの暗号化",
          "content": "【シナリオ】\nAさんが、Bさんにメール「明日の会議は10時開始です」を暗号化して送信したい。\n\n【事前準備】\nBさんは、鍵ペア（公開鍵と秘密鍵）を生成し、公開鍵をWebサイトで公開（または、Aさんに送信）します。秘密鍵は自分だけが保管します。\n\n【送信手順】\n①Aさんは、Bさんの公開鍵を入手（Webサイトからダウンロード、またはBさんから受信）\n②Aさんは、Bさんの公開鍵で「明日の会議は10時開始です」（平文）を暗号化し、暗号文を生成\n③Aさんは、暗号文をメールでBさんに送信\n\n【受信手順】\n④Bさんは、暗号文を受信し、自分の秘密鍵で復号して、「明日の会議は10時開始です」（平文）を取得\n\n【セキュリティ】\n公開鍵で暗号化された暗号文は、対応する秘密鍵でしか復号できません。Bさんの秘密鍵は、Bさんだけが保管しているため、第三者（攻撃者）がメールを盗聴しても、復号できません。\n\n【鍵の配送問題の解決】\n共通鍵暗号方式では、送信者と受信者が事前に共通鍵を安全に共有する必要がありましたが、公開鍵暗号方式では、公開鍵は誰にでも公開できるため、鍵の配送問題が解決されます。"
        },
        {
          "type": "table",
          "headers": ["項目", "共通鍵暗号方式", "公開鍵暗号方式"],
          "rows": [
            ["使用する鍵", "暗号化と復号に同じ鍵", "暗号化に公開鍵、復号に秘密鍵"],
            ["鍵の共有", "事前に鍵を安全に共有する必要がある（鍵の配送問題）", "公開鍵は公開しても問題ない（鍵の配送問題が解決）"],
            ["鍵の管理", "N人で通信する場合、N×(N-1)/2個の鍵が必要", "N人で通信する場合、各人が1つの鍵ペア（合計N個）"],
            ["処理速度", "高速（ハードウェアで高速化可能）", "遅い（共通鍵暗号の100～1000倍遅い）"],
            ["用途", "大量のデータの暗号化（ファイル、通信）", "小さなデータの暗号化（共通鍵の暗号化、デジタル署名）"],
            ["代表的な方式", "AES、DES", "RSA"]
          ]
        },
        {
          "type": "text",
          "content": "**ハイブリッド暗号方式**とは、共通鍵暗号方式と公開鍵暗号方式を組み合わせた暗号化方式です。共通鍵暗号方式の高速性と、公開鍵暗号方式の鍵配送の容易さの両方のメリットを活用します。ハイブリッド暗号方式の流れは、①送信者が、ランダムな共通鍵（セッション鍵）を生成、②送信者が、共通鍵で平文を暗号化（高速）、③送信者が、受信者の公開鍵で共通鍵を暗号化、④送信者が、暗号化されたデータと暗号化された共通鍵を受信者に送信、⑤受信者が、自分の秘密鍵で共通鍵を復号、⑥受信者が、復号した共通鍵でデータを復号、となります。ハイブリッド暗号方式は、**SSL/TLS（HTTPS通信）**、**PGP（メール暗号化）**などで使用されています。"
        },
        {
          "type": "example",
          "title": "ハイブリッド暗号方式の具体例：HTTPS通信（WebブラウザとWebサーバ間の通信）",
          "content": "【シナリオ】\nAさんが、Webブラウザで銀行のWebサイト（https://bank.example.com）にアクセスし、振込情報を暗号化して送信したい。振込情報（平文）は数KBのデータです。\n\n【手順】\n①Aさんのブラウザが、銀行のWebサーバの公開鍵を入手（SSL/TLS証明書に含まれる）\n②Aさんのブラウザが、ランダムな共通鍵（セッション鍵、例: AES-256の鍵）を生成\n③Aさんのブラウザが、AES（共通鍵暗号）で振込情報を暗号化（高速、数ミリ秒）\n④Aさんのブラウザが、銀行のWebサーバの公開鍵（RSA）で共通鍵を暗号化\n⑤Aさんのブラウザが、暗号化された振込情報と暗号化された共通鍵をWebサーバに送信\n⑥Webサーバが、自分の秘密鍵（RSA）で共通鍵を復号\n⑦Webサーバが、復号した共通鍵（AES）で振込情報を復号\n\n【なぜハイブリッド暗号方式を使うのか？】\n振込情報（数KB）を公開鍵暗号（RSA）で暗号化すると、処理に数秒かかり、ユーザー体験が悪化します。共通鍵暗号（AES）で暗号化すれば、数ミリ秒で完了します。しかし、共通鍵を安全に共有する必要があるため、共通鍵を公開鍵暗号（RSA）で暗号化して送信します。共通鍵は短い（32バイト程度）ため、公開鍵暗号でも短時間で暗号化できます。\n\n【セッション鍵】\nハイブリッド暗号方式で使用する共通鍵を**セッション鍵**と呼びます。セッション鍵は、通信ごとにランダムに生成され、通信終了後に破棄されます。これにより、1つの通信が解読されても、他の通信には影響しません（前方秘匿性）。"
        },
        {
          "type": "highlight",
          "icon": "🔒",
          "title": "HTTPS通信の暗号化",
          "content": "WebブラウザでURLが「https://」で始まるWebサイトにアクセスすると、ブラウザとWebサーバ間の通信が暗号化されます。この暗号化には、**ハイブリッド暗号方式**が使用されています。具体的には、①ブラウザとWebサーバが、公開鍵暗号（RSA）で共通鍵（セッション鍵）を安全に交換、②ブラウザとWebサーバが、共通鍵暗号（AES）で実際のデータ（HTMLファイル、送信フォームのデータ）を暗号化して送受信、します。これにより、高速で安全な通信が実現されます。HTTPS通信は、オンラインバンキング、ECサイト、ログインページなど、機密情報を扱うWebサイトで必須です。"
        }
      ]
    },
    {
      "id": 3,
      "title": "ハッシュ関数とメッセージダイジェスト",
      "sections": [
        {
          "type": "text",
          "content": "**ハッシュ関数（Hash Function）**とは、任意の長さのデータを入力として受け取り、固定長の短いデータ（ハッシュ値）を出力する関数です。ハッシュ関数の出力を**ハッシュ値**または**メッセージダイジェスト（Message Digest）**と呼びます。ハッシュ関数は、暗号化とは異なり、一方向性（元のデータに復元できない）が特徴です。ハッシュ関数の性質は、①一方向性：ハッシュ値から元のデータを計算することが困難、②衝突困難性：異なるデータが同じハッシュ値を持つことが困難、③雪崩効果：元のデータがわずかに変わると、ハッシュ値が大きく変わる、の3つです。代表的なハッシュ関数として、**SHA-256（Secure Hash Algorithm 256-bit）**、**MD5（Message Digest Algorithm 5）**、**SHA-1（Secure Hash Algorithm 1）**があります。"
        },
        {
          "type": "table",
          "headers": ["ハッシュ関数", "ハッシュ値の長さ", "特徴"],
          "rows": [
            ["MD5", "128ビット（32文字の16進数）", "古いハッシュ関数。衝突が発見され、現在は非推奨"],
            ["SHA-1", "160ビット（40文字の16進数）", "MD5より強固だが、衝突が発見され、現在は非推奨"],
            ["SHA-256", "256ビット（64文字の16進数）", "現在、最も広く使用されるハッシュ関数。強固で推奨"],
            ["SHA-512", "512ビット（128文字の16進数）", "SHA-256より長いハッシュ値。より強固"]
          ]
        },
        {
          "type": "example",
          "title": "ハッシュ関数の具体例：ファイルの改ざん検知",
          "content": "【シナリオ】\nAさんが、ソフトウェアのインストーラファイル「app-installer.exe」（100MB）をWebサイトからダウンロードしたい。ダウンロード中にファイルが改ざん（ウイルスが混入）されていないか確認したい。\n\n【手順】\n①Webサイトの管理者が、「app-installer.exe」のハッシュ値（SHA-256）を計算し、Webサイトに公開\n  例: SHA-256ハッシュ値 = \"a1b2c3d4e5f6...\"\n②Aさんが、「app-installer.exe」をダウンロード\n③Aさんが、ダウンロードしたファイルのハッシュ値（SHA-256）を計算\n④Aさんが、計算したハッシュ値と、Webサイトに公開されているハッシュ値を比較\n  - ハッシュ値が一致 → ファイルは改ざんされていない（ダウンロード成功）\n  - ハッシュ値が異なる → ファイルが改ざんされている可能性がある（ダウンロード失敗、再ダウンロード）\n\n【なぜハッシュ値を使うのか？】\nファイル全体（100MB）を比較するのは時間がかかりますが、ハッシュ値（64文字）を比較するのは一瞬です。また、ハッシュ関数の雪崩効果により、ファイルが1ビットでも変わると、ハッシュ値が大きく変わるため、改ざんを確実に検知できます。\n\n【実際の使用例】\nLinuxディストリビューション（Ubuntu、Debian）のISOファイルのダウンロードページでは、ファイルのSHA-256ハッシュ値が公開されており、ダウンロード後にユーザーが検証できます。"
        },
        {
          "type": "example",
          "title": "ハッシュ関数の具体例：パスワードの安全な保存",
          "content": "【シナリオ】\nWebサービスが、ユーザーのパスワードをデータベースに保存する際、パスワードを平文で保存すると、データベースが漏洩した場合、パスワードが第三者に知られてしまいます。そのため、パスワードをハッシュ化して保存します。\n\n【登録時の流れ】\n①ユーザーが、パスワード「myPassword123」を入力\n②サーバが、パスワードのハッシュ値（SHA-256）を計算\n  例: SHA-256(\"myPassword123\") = \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"\n③サーバが、ハッシュ値をデータベースに保存（平文のパスワードは保存しない）\n\n【ログイン時の流れ】\n①ユーザーが、パスワード「myPassword123」を入力\n②サーバが、入力されたパスワードのハッシュ値（SHA-256）を計算\n③サーバが、計算したハッシュ値と、データベースに保存されているハッシュ値を比較\n  - ハッシュ値が一致 → パスワードが正しい（ログイン成功）\n  - ハッシュ値が異なる → パスワードが間違っている（ログイン失敗）\n\n【セキュリティ】\nデータベースが漏洩しても、保存されているのはハッシュ値であり、ハッシュ関数の一方向性により、元のパスワードを計算することが困難です。攻撃者は、ハッシュ値から元のパスワードを復元できません。\n\n【ソルト（Salt）】\n実際のシステムでは、パスワードに**ソルト（Salt）**というランダムな文字列を追加してからハッシュ化します。これにより、同じパスワードでも異なるハッシュ値が生成され、レインボーテーブル攻撃（事前に計算したハッシュ値の表を使った攻撃）を防ぐことができます。\n  例: SHA-256(\"myPassword123\" + \"randomSalt456\") = \"...\""
        },
        {
          "type": "highlight",
          "icon": "⚠️",
          "title": "MD5とSHA-1の脆弱性",
          "content": "**MD5**と**SHA-1**は、過去に広く使用されていたハッシュ関数ですが、現在は**衝突攻撃（Collision Attack）**により、異なるデータが同じハッシュ値を持つことが実証され、安全ではありません。例えば、攻撃者が、正規のファイルと悪意のあるファイルで同じMD5ハッシュ値を持つように細工し、ユーザーが正規のファイルのハッシュ値を確認しても、実際には悪意のあるファイルをダウンロードさせることができます。そのため、MD5とSHA-1は現在は非推奨で、代わりに**SHA-256**以上のハッシュ関数を使用することが推奨されます。基本情報技術者試験では、SHA-256が安全なハッシュ関数の代表例として出題されます。"
        }
      ]
    },
    {
      "id": 4,
      "title": "デジタル署名と公開鍵証明書",
      "sections": [
        {
          "type": "text",
          "content": "**デジタル署名（Digital Signature）**とは、電子文書の作成者を証明し、文書が改ざんされていないことを保証する技術です。デジタル署名は、公開鍵暗号方式とハッシュ関数を組み合わせて実現されます。デジタル署名の流れは、①送信者が、文書のハッシュ値を計算、②送信者が、ハッシュ値を自分の秘密鍵で暗号化（デジタル署名を生成）、③送信者が、文書とデジタル署名を受信者に送信、④受信者が、送信者の公開鍵でデジタル署名を復号し、ハッシュ値を取得、⑤受信者が、受信した文書のハッシュ値を計算、⑥受信者が、復号したハッシュ値と計算したハッシュ値を比較（一致すれば、文書は改ざんされておらず、送信者が本人であることが証明される）、となります。"
        },
        {
          "type": "example",
          "title": "デジタル署名の具体例：契約書の電子署名",
          "content": "【シナリオ】\nAさん（会社A）が、契約書のPDFファイルに電子署名をして、Bさん（会社B）に送信したい。Bさんは、契約書がAさんによって作成され、改ざんされていないことを確認したい。\n\n【事前準備】\nAさんは、鍵ペア（公開鍵と秘密鍵）を生成し、公開鍵を会社Aの公式Webサイトで公開します。秘密鍵は自分だけが保管します。\n\n【署名作成（Aさん）】\n①Aさんが、契約書「契約書.pdf」のハッシュ値（SHA-256）を計算\n  例: SHA-256(\"契約書.pdf\") = \"a1b2c3d4e5f6...\"\n②Aさんが、ハッシュ値を自分の秘密鍵（RSA）で暗号化し、デジタル署名を生成\n  デジタル署名 = RSA秘密鍵で暗号化(\"a1b2c3d4e5f6...\")\n③Aさんが、「契約書.pdf」とデジタル署名をBさんに送信（メール添付など）\n\n【署名検証（Bさん）】\n④Bさんが、Aさんの公開鍵を入手（会社Aの公式Webサイトからダウンロード）\n⑤Bさんが、デジタル署名をAさんの公開鍵（RSA）で復号し、ハッシュ値を取得\n  復号したハッシュ値 = RSA公開鍵で復号(デジタル署名) = \"a1b2c3d4e5f6...\"\n⑥Bさんが、受信した「契約書.pdf」のハッシュ値（SHA-256）を計算\n  計算したハッシュ値 = SHA-256(\"契約書.pdf\") = \"a1b2c3d4e5f6...\"\n⑦Bさんが、復号したハッシュ値と計算したハッシュ値を比較\n  - 一致 → 契約書はAさんによって作成され、改ざんされていない（署名検証成功）\n  - 異なる → 契約書が改ざんされているか、送信者が偽物（署名検証失敗）\n\n【デジタル署名が証明すること】\n①本人性（認証）: 契約書がAさんによって作成されたこと（Aさんの秘密鍵でしか署名を生成できない）\n②完全性（改ざん検知）: 契約書が改ざんされていないこと（ハッシュ値の一致）\n③否認防止: Aさんは、後から「契約書を作成していない」と否認できない（Aさんの秘密鍵でしか署名を生成できないため）"
        },
        {
          "type": "text",
          "content": "**公開鍵証明書（デジタル証明書、SSL証明書）**とは、公開鍵の正当性を証明する電子証明書です。公開鍵暗号方式では、公開鍵を公開しますが、第三者（攻撃者）が偽の公開鍵を公開して、なりすましを行うリスクがあります。そのため、信頼できる第三者機関（認証局、CA: Certificate Authority）が、公開鍵と所有者の情報（会社名、ドメイン名）を結びつけ、デジタル署名をした証明書を発行します。これが公開鍵証明書です。公開鍵証明書には、①証明書の所有者（会社名、ドメイン名）、②公開鍵、③有効期限、④発行者（認証局）、⑤認証局のデジタル署名、などの情報が含まれます。"
        },
        {
          "type": "example",
          "title": "公開鍵証明書の具体例：HTTPS通信でのWebサーバの認証",
          "content": "【シナリオ】\nAさんが、Webブラウザで銀行のWebサイト（https://bank.example.com）にアクセスする際、Webサーバが本物の銀行のサーバであることを確認したい。\n\n【手順】\n①Aさんのブラウザが、https://bank.example.com にアクセス\n②Webサーバが、自分の公開鍵証明書（SSL証明書）をブラウザに送信\n③ブラウザが、証明書の内容を確認\n  - 証明書の所有者がbank.example.comであることを確認（ドメイン名の一致）\n  - 証明書の有効期限が切れていないことを確認\n  - 証明書が信頼できる認証局（例: DigiCert、Let's Encrypt）によって発行されていることを確認\n④ブラウザが、認証局の公開鍵で証明書のデジタル署名を検証（証明書が改ざんされていないことを確認）\n⑤検証成功 → WebサーバがBank社の正規のサーバであることが証明される → ブラウザのアドレスバーに鍵マークが表示される\n⑥検証失敗 → 警告メッセージが表示される（例: 「この接続ではプライバシーが保護されません」）\n\n【攻撃者のなりすましを防ぐ】\n攻撃者が、偽のWebサイトを作成し、bank.example.comを偽装しても、攻撃者はbank.example.comの公開鍵証明書を持っていないため、ブラウザは証明書の検証に失敗し、警告を表示します。これにより、フィッシング攻撃を防ぐことができます。"
        },
        {
          "type": "table",
          "headers": ["項目", "デジタル署名", "公開鍵証明書"],
          "rows": [
            ["目的", "文書の作成者の証明と改ざん検知", "公開鍵の正当性を証明"],
            ["使用する技術", "公開鍵暗号方式 + ハッシュ関数", "公開鍵暗号方式 + ハッシュ関数 + 認証局"],
            ["証明するもの", "文書が特定の人によって作成され、改ざんされていないこと", "公開鍵が特定の人・組織のものであること"],
            ["発行者", "文書の作成者", "認証局（CA）"],
            ["具体例", "契約書の電子署名、ソフトウェアの署名", "SSL証明書（HTTPS通信）"]
          ]
        },
        {
          "type": "highlight",
          "icon": "🔐",
          "title": "公開鍵基盤（PKI）",
          "content": "**公開鍵基盤（PKI: Public Key Infrastructure）**とは、公開鍵暗号方式を利用するための基盤です。PKIは、①**認証局（CA: Certificate Authority）**：公開鍵証明書を発行する信頼できる第三者機関、②**登録局（RA: Registration Authority）**：証明書の申請者の本人確認を行う機関、③**公開鍵証明書**：公開鍵の正当性を証明する証明書、④**証明書失効リスト（CRL: Certificate Revocation List）**：失効した証明書のリスト、の4つの要素から構成されます。PKIにより、インターネット上で安全に公開鍵を配布し、通信相手の本人性を確認できます。HTTPS通信、電子メールの暗号化（S/MIME）、電子署名など、様々な場面でPKIが使用されています。"
        }
      ]
    },
    {
      "id": 5,
      "title": "SSL/TLSとVPN",
      "sections": [
        {
          "type": "text",
          "content": "**SSL（Secure Sockets Layer）**と**TLS（Transport Layer Security）**は、インターネット上の通信を暗号化するプロトコルです。SSLは古いバージョンで、現在は後継の**TLS**が使用されています（ただし、慣例的に「SSL/TLS」または「SSL」と呼ばれることが多い）。SSL/TLSは、**HTTPS（HTTP over SSL/TLS）**、**SMTPS（SMTP over SSL/TLS）**、**FTPS（FTP over SSL/TLS）**など、様々なアプリケーションプロトコルで使用されます。SSL/TLSの機能は、①暗号化：通信内容を第三者に盗聴されないように暗号化、②認証：通信相手が本物であることを証明（公開鍵証明書を使用）、③完全性：通信内容が改ざんされていないことを保証、の3つです。"
        },
        {
          "type": "example",
          "title": "SSL/TLSの具体例：HTTPS通信の流れ（TLSハンドシェイク）",
          "content": "【シナリオ】\nAさんが、Webブラウザで銀行のWebサイト（https://bank.example.com）にアクセスし、振込情報を送信する。\n\n【TLSハンドシェイクの流れ】\n①ブラウザ → サーバ: 「TLS通信を開始したい。対応している暗号化方式は...」\n②サーバ → ブラウザ: 「TLS通信を受け入れる。使用する暗号化方式はAES-256。私の公開鍵証明書はこれです」\n③ブラウザが、サーバの公開鍵証明書を検証（認証局のデジタル署名を確認）\n  - 検証成功 → サーバが本物の銀行のサーバであることが証明される\n  - 検証失敗 → 警告メッセージが表示される\n④ブラウザが、ランダムな共通鍵（セッション鍵、AES-256の鍵）を生成\n⑤ブラウザ → サーバ: 共通鍵をサーバの公開鍵（RSA）で暗号化して送信\n⑥サーバが、自分の秘密鍵（RSA）で共通鍵を復号\n⑦ブラウザとサーバが、共通鍵（AES-256）で通信内容を暗号化して送受信\n  - ブラウザ → サーバ: 振込情報（暗号化）\n  - サーバ → ブラウザ: 振込完了画面のHTML（暗号化）\n\n【セキュリティ】\n①盗聴防止: 通信内容が共通鍵（AES-256）で暗号化されているため、第三者（攻撃者）がネットワークを盗聴しても、内容を読めません。\n②なりすまし防止: サーバの公開鍵証明書により、サーバが本物の銀行のサーバであることが証明されます。\n③改ざん防止: SSL/TLSは、各メッセージにMAC（Message Authentication Code）を付加し、改ざんを検知します。\n\n【ブラウザの鍵マーク】\nHTTPS通信が正常に確立されると、ブラウザのアドレスバーに鍵マークが表示されます。鍵マークをクリックすると、証明書の詳細（発行者、有効期限）を確認できます。"
        },
        {
          "type": "text",
          "content": "**VPN（Virtual Private Network、仮想プライベートネットワーク）**とは、インターネット上に仮想的な専用回線を構築し、安全に通信する技術です。VPNを使用すると、①通信内容が暗号化される、②遠隔地の拠点間を安全に接続できる、③外出先から社内ネットワークに安全にアクセスできる、などのメリットがあります。VPNの代表的な技術として、**IPsec（IP Security）**と**SSL-VPN**があります。IPsecは、IP層（ネットワーク層）で暗号化を行うVPNプロトコルで、拠点間VPN（本社と支社を接続）に適しています。SSL-VPNは、SSL/TLS（アプリケーション層）で暗号化を行うVPNで、リモートアクセスVPN（外出先から社内ネットワークにアクセス）に適しています。"
        },
        {
          "type": "example",
          "title": "VPNの具体例：リモートワークで社内ネットワークにアクセス",
          "content": "【シナリオ】\nAさんが、自宅から会社の社内サーバ（192.168.1.100）にアクセスして、ファイルを取得したい。社内サーバは、セキュリティのため、社内ネットワークからのみアクセス可能（外部からは直接アクセスできない）。\n\n【VPNを使わない場合の問題】\nAさんが、自宅のPCから社内サーバに直接アクセスしようとしても、社内サーバは社内ネットワーク内にあるため、アクセスできません。また、仮にアクセスできたとしても、インターネット経由の通信は暗号化されていないため、盗聴されるリスクがあります。\n\n【VPN（SSL-VPN）を使う場合】\n①Aさんが、自宅のPCで会社のVPNサーバ（vpn.company.com）に接続（Webブラウザまたは専用クライアント）\n②VPNサーバが、Aさんの認証（ユーザー名、パスワード、二要素認証）\n③認証成功 → VPNトンネルが確立される（Aさんのと会社の間にSSL/TLSで暗号化されたトンネルが作られる）\n④Aさんのが、VPNトンネル経由で社内ネットワークにアクセスできるようになる（仮想的に社内ネットワークに参加）\n⑤Aさんが、社内サーバ（192.168.1.100）にアクセスし、ファイルを取得\n⑥通信内容は、VPNトンネル内で暗号化されているため、インターネット上の第三者（攻撃者）には読めない\n\n【セキュリティ】\n①暗号化: VPNトンネル内の通信がSSL/TLSで暗号化され、盗聴を防ぎます。\n②認証: VPNサーバがユーザーを認証し、正規のユーザーのみがアクセスできます。\n③アクセス制御: 社内サーバは社内ネットワークからのアクセスのみ許可しており、VPN経由でアクセスするAさんは、仮想的に社内ネットワークに参加するため、アクセスできます。\n\n【実際の使用例】\nリモートワーク、出張先からのアクセス、本社と支社の拠点間接続などで、VPNが使用されています。"
        },
        {
          "type": "table",
          "headers": ["項目", "IPsec", "SSL-VPN"],
          "rows": [
            ["暗号化の階層", "IP層（ネットワーク層）", "SSL/TLS（アプリケーション層）"],
            ["用途", "拠点間VPN（本社と支社を接続）", "リモートアクセスVPN（外出先から社内ネットワークにアクセス）"],
            ["クライアント", "専用ソフトウェアが必要", "Webブラウザで接続可能（専用ソフトも可）"],
            ["メリット", "全ての通信を暗号化（アプリケーションに依存しない）", "導入が容易（Webブラウザがあれば使える）"],
            ["デメリット", "設定が複雑", "アプリケーション層のため、一部の通信は暗号化されない場合がある"]
          ]
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "暗号化技術の使い分け",
          "content": "暗号化技術は、用途に応じて使い分けられます。①**ファイルの暗号化・大量データの暗号化**：共通鍵暗号（AES）を使用（高速）、②**通信の暗号化（HTTPS、メール）**：ハイブリッド暗号方式を使用（共通鍵暗号と公開鍵暗号を組み合わせ）、③**パスワードの保存、改ざん検知**：ハッシュ関数（SHA-256）を使用、④**電子署名、本人確認**：公開鍵暗号（RSA）+ ハッシュ関数を使用、⑤**リモートアクセス、拠点間接続**：VPN（IPsec、SSL-VPN）を使用。基本情報技術者試験では、各技術の特徴と用途を理解することが重要です。具体的なシナリオ（HTTPS通信、メール暗号化、ファイルの改ざん検知など）を通じて、どの暗号化技術が使用されているかを判断できるようにしましょう。"
        }
      ]
    }
  ]
}
