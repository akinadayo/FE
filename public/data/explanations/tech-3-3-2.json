{
  "topicId": "tech-3-3-2",
  "title": "データベース設計",
  "pages": [
    {
      "id": 1,
      "title": "正規化とは",
      "sections": [
        {
          "type": "text",
          "content": "**正規化（Normalization）**とは、データベースの表を適切な形に整理し、データの重複や更新時の不整合を防ぐ設計手法です。表を段階的に分割し、データの冗長性を排除することで、データベースの品質を向上させます。正規化には第1正規形（1NF）、第2正規形（2NF）、第3正規形（3NF）など複数の段階があり、段階を進むごとにデータ構造が洗練されます。基本情報技術者試験では、第3正規形までの理解が重要です。"
        },
        {
          "type": "highlight",
          "icon": "🎯",
          "title": "正規化の目的",
          "content": "①データの重複排除：同じデータを複数箇所に保存しない\n②更新異常の防止：データ更新時の不整合を防ぐ\n③挿入異常の防止：新規データ登録時の問題を防ぐ\n④削除異常の防止：データ削除時の意図しない情報損失を防ぐ"
        },
        {
          "type": "example",
          "title": "正規化前の問題例：受講表",
          "content": "【正規化前の受講表】\n学生ID | 学生名 | 学科 | 受講科目1 | 受講科目2 | 受講科目3\n101 | 佐藤 | 情報 | 数学 | 英語 | プログラミング\n102 | 田中 | 経営 | 数学 | 経営学 | (NULL)\n\n【問題点】\n①反復グループ：受講科目1, 2, 3が繰り返し（科目数が増えると列を追加する必要がある）\n②データ重複：学生ID=101が数学・英語・プログラミングの3行に分かれると「佐藤」「情報」が3回重複\n③更新異常：佐藤の学科を「情報」→「AI」に変更する場合、3行全てを更新する必要があり、一部だけ更新すると不整合が発生\n④削除異常：田中が経営学の受講を取り消すと、田中の学生情報自体が消える可能性"
        },
        {
          "type": "table",
          "headers": ["異常の種類", "説明", "具体例"],
          "rows": [
            ["更新異常", "同じデータが複数箇所にあり、一部だけ更新すると不整合", "佐藤の学科を3行のうち1行だけ「AI」に変更→学科が「情報」と「AI」に分裂"],
            ["挿入異常", "関連データがないと新規登録できない", "新しい学科「AI学科」を登録したいが、学生がいないと登録できない"],
            ["削除異常", "あるデータを削除すると、別の重要データも失われる", "田中の受講を全て削除→田中の学生情報（学生ID、学生名、学科）も消える"]
          ]
        }
      ]
    },
    {
      "id": 2,
      "title": "関数従属と第1正規形（1NF）",
      "sections": [
        {
          "type": "text",
          "content": "**関数従属（Functional Dependency）**とは、ある列（属性）の値が決まると、別の列の値が一意に決まる関係です。記法：A → B（「AがBを関数的に決定する」または「BはAに関数従属する」）。例：社員ID → 氏名（社員IDが決まれば氏名が一意に決まる）。関数従属の理解は、正規化の基礎となる重要な概念です。"
        },
        {
          "type": "table",
          "headers": ["記法", "読み方", "意味", "具体例"],
          "rows": [
            ["A → B", "AがBを決定する", "Aの値が決まればBの値が一意に決まる", "社員ID → 氏名（社員ID=101なら「佐藤太郎」と一意に決まる）"],
            ["AB → C", "AとBがCを決定する", "AとBの組み合わせが決まればCが一意に決まる", "（学生ID, 科目ID） → 成績（学生101が数学を受講した成績は80点と一意に決まる）"],
            ["A → BC", "AがBとCを決定する", "Aの値が決まればBとCの両方が一意に決まる", "社員ID → （氏名, 所属部署）"]
          ]
        },
        {
          "type": "highlight",
          "icon": "📌",
          "title": "第1正規形（1NF）の定義",
          "content": "①反復グループがない：列の繰り返し（受講科目1, 2, 3など）が存在しない\n②各セルが分割不可能な値（原子値、Atomic Value）：1つのセルに複数の値を格納しない（例：受講科目列に「数学, 英語, プログラミング」のようなカンマ区切りを入れない）\n③主キーが定義されている：各行を一意に識別できる列（または列の組み合わせ）が存在する"
        },
        {
          "type": "example",
          "title": "第1正規形への変換例",
          "content": "【正規化前（反復グループあり）】\n学生ID | 学生名 | 学科 | 受講科目1 | 受講科目2 | 受講科目3\n101 | 佐藤 | 情報 | 数学 | 英語 | プログラミング\n\n↓ 【第1正規形（1NF）に変換】\n学生ID | 学生名 | 学科 | 受講科目\n101 | 佐藤 | 情報 | 数学\n101 | 佐藤 | 情報 | 英語\n101 | 佐藤 | 情報 | プログラミング\n102 | 田中 | 経営 | 数学\n102 | 田中 | 経営 | 経営学\n\n主キー：（学生ID, 受講科目）の複合キー（学生IDと受講科目の組み合わせで各行を一意に識別）\n\n【改善点】\n✅ 反復グループを排除（受講科目1, 2, 3 → 受講科目の1列に統一）\n✅ 科目数が増えても列を追加する必要がない（行を追加するだけ）\n\n【残る問題点】\n❌ 学生名と学科が重複（佐藤、情報が3回ずつ出現）→ 更新異常のリスクあり"
        }
      ]
    },
    {
      "id": 3,
      "title": "第2正規形（2NF）と部分関数従属",
      "sections": [
        {
          "type": "text",
          "content": "**部分関数従属（Partial Functional Dependency）**とは、主キーの一部だけで他の列が決まる関係です。例：主キーが（学生ID, 受講科目）の場合、学生ID → 学生名（学生IDだけで学生名が決まる）は部分関数従属です。部分関数従属があると、データ重複や更新異常が発生します。第2正規形（2NF）は、「第1正規形であり、かつ部分関数従属を持たない」形です。"
        },
        {
          "type": "example",
          "title": "部分関数従属の具体例",
          "content": "【第1正規形の受講表】\n学生ID | 学生名 | 学科 | 受講科目\n101 | 佐藤 | 情報 | 数学\n101 | 佐藤 | 情報 | 英語\n\n主キー：（学生ID, 受講科目）\n\n【関数従属の分析】\n①（学生ID, 受講科目） → 学生名（主キー全体 → 学生名：完全関数従属）\n②学生ID → 学生名（主キーの一部 → 学生名：部分関数従属 ❌）\n③学生ID → 学科（主キーの一部 → 学科：部分関数従属 ❌）\n\n学生名と学科は、主キーの一部である学生IDだけで決まるため、部分関数従属です。これにより、佐藤と情報が重複し、更新異常が発生します。"
        },
        {
          "type": "highlight",
          "icon": "🔧",
          "title": "第2正規形（2NF）への変換方法",
          "content": "部分関数従属を排除するため、表を分割する：\n①主キーの一部に従属する列を別表に分離\n②元の表には主キー全体に従属する列のみ残す"
        },
        {
          "type": "example",
          "title": "第2正規形への変換例",
          "content": "【第2正規形（2NF）に変換】\n\n●学生表（新規作成）\n学生ID（主キー） | 学生名 | 学科\n101 | 佐藤 | 情報\n102 | 田中 | 経営\n\n関数従属：学生ID → （学生名, 学科）\n\n●受講表（分割後）\n学生ID | 受講科目（主キー：学生ID, 受講科目）\n101 | 数学\n101 | 英語\n101 | プログラミング\n102 | 数学\n102 | 経営学\n\n関数従属：（学生ID, 受講科目） → （なし、主キーのみ）\n\n【改善点】\n✅ 学生名と学科の重複が解消（学生表に1回のみ）\n✅ 更新異常の解消：佐藤の学科を変更する場合、学生表の1行のみ更新すれば良い\n✅ 挿入異常の解消：新しい学生を、受講科目なしで登録できる\n✅ 削除異常の解消：佐藤の受講を全て削除しても、学生表に佐藤の情報が残る"
        }
      ]
    },
    {
      "id": 4,
      "title": "第3正規形（3NF）と推移的関数従属",
      "sections": [
        {
          "type": "text",
          "content": "**推移的関数従属（Transitive Functional Dependency）**とは、A → B かつ B → C のとき、A → C が成り立つ関係です。例：社員ID → 部署ID かつ 部署ID → 部署名 のとき、社員ID → 部署名 が推移的関数従属です。推移的関数従属があると、データ重複や更新異常が発生します。第3正規形（3NF）は、「第2正規形であり、かつ推移的関数従属を持たない」形です。つまり、主キー以外の列が他の非キー列を決定しない形です。"
        },
        {
          "type": "example",
          "title": "推移的関数従属の具体例",
          "content": "【第2正規形の社員表】\n社員ID（主キー） | 氏名 | 部署ID | 部署名 | 部署電話番号\n101 | 佐藤 | 10 | 営業部 | 03-1234-5678\n102 | 田中 | 10 | 営業部 | 03-1234-5678\n103 | 鈴木 | 20 | 経理部 | 03-9876-5432\n\n【関数従属の分析】\n①社員ID → 氏名（完全関数従属 ✅）\n②社員ID → 部署ID（完全関数従属 ✅）\n③社員ID → 部署名（完全関数従属、ただし推移的 ❌）\n④部署ID → 部署名（非キー列 → 非キー列：推移的関数従属 ❌）\n⑤部署ID → 部署電話番号（非キー列 → 非キー列：推移的関数従属 ❌）\n\n部署名と部署電話番号は、社員ID → 部署ID → 部署名 という推移的な関数従属関係にあります。これにより、部署名と部署電話番号が重複（営業部が2回出現）し、更新異常が発生します（営業部の電話番号変更時、2行とも更新が必要）。"
        },
        {
          "type": "highlight",
          "icon": "🔧",
          "title": "第3正規形（3NF）への変換方法",
          "content": "推移的関数従属を排除するため、表を分割する：\n①非キー列に従属する列を別表に分離\n②元の表には主キーに直接従属する列のみ残す"
        },
        {
          "type": "example",
          "title": "第3正規形への変換例",
          "content": "【第3正規形（3NF）に変換】\n\n●社員表（分割後）\n社員ID（主キー） | 氏名 | 部署ID（外部キー）\n101 | 佐藤 | 10\n102 | 田中 | 10\n103 | 鈴木 | 20\n\n関数従属：社員ID → （氏名, 部署ID）\n推移的関数従属：なし ✅\n\n●部署表（新規作成）\n部署ID（主キー） | 部署名 | 部署電話番号\n10 | 営業部 | 03-1234-5678\n20 | 経理部 | 03-9876-5432\n\n関数従属：部署ID → （部署名, 部署電話番号）\n推移的関数従属：なし ✅\n\n【改善点】\n✅ 部署名と部署電話番号の重複が解消（部署表に1回のみ）\n✅ 更新異常の解消：営業部の電話番号変更時、部署表の1行のみ更新すれば良い\n✅ データの一貫性向上：部署に関する情報が部署表に集約され、管理が容易"
        },
        {
          "type": "table",
          "headers": ["正規形", "定義", "排除する関数従属", "具体例"],
          "rows": [
            ["第1正規形（1NF）", "反復グループがなく、原子値のみ、主キーあり", "なし", "受講科目1,2,3 → 受講科目の1列に統一"],
            ["第2正規形（2NF）", "1NF + 部分関数従属を持たない", "部分関数従属（主キーの一部 → 非キー列）", "学生ID → 学生名を別表（学生表）に分離"],
            ["第3正規形（3NF）", "2NF + 推移的関数従属を持たない", "推移的関数従属（非キー列 → 非キー列）", "部署ID → 部署名を別表（部署表）に分離"]
          ]
        }
      ]
    },
    {
      "id": 5,
      "title": "E-R図（実体関連図）",
      "sections": [
        {
          "type": "text",
          "content": "**E-R図（Entity-Relationship Diagram、実体関連図）**とは、データベースの概念設計で使用する図で、実体（Entity）と実体間の関連（Relationship）を視覚的に表現します。E-R図は、データベース設計の初期段階で、データの構造と関係を整理するために使用されます。E-R図を描いた後、それを関係モデル（表）に変換し、正規化を行います。"
        },
        {
          "type": "highlight",
          "icon": "📊",
          "title": "E-R図の基本要素",
          "content": "①実体（Entity）：データベースで管理する対象（例：学生、科目、教員）\n表記：四角形で囲む\n\n②属性（Attribute）：実体の性質（例：学生の学生ID、氏名、学科）\n表記：楕円形で実体と線で結ぶ\n\n③関連（Relationship）：実体間の関係（例：学生が科目を「受講する」）\n表記：ひし形で囲み、実体と線で結ぶ\n\n④カーディナリティ（多重度）：関連の対応関係（1対1、1対多、多対多）\n表記：線の端に記号（1, M, N など）"
        },
        {
          "type": "example",
          "title": "E-R図の具体例：大学の受講管理システム",
          "content": "【実体と属性】\n●学生（実体）\n  - 学生ID（主キー）\n  - 学生名\n  - 学科\n  - 入学年度\n\n●科目（実体）\n  - 科目ID（主キー）\n  - 科目名\n  - 単位数\n  - 担当教員\n\n【関連とカーディナリティ】\n学生 ─ 受講する（関連） ─ 科目\n（多）                    （多）\n\nカーディナリティ：多対多（M:N）\n意味：1人の学生は複数の科目を受講でき（1:M）、1つの科目は複数の学生が受講する（M:1）\n\n【E-R図から関係モデル（表）への変換】\n①実体 → 表\n  学生表（学生ID, 学生名, 学科, 入学年度）\n  科目表（科目ID, 科目名, 単位数, 担当教員）\n\n②多対多の関連 → 中間表（連関エンティティ）\n  受講表（学生ID, 科目ID, 成績）\n  主キー：（学生ID, 科目ID）の複合キー\n  外部キー：学生ID → 学生表、科目ID → 科目表"
        },
        {
          "type": "table",
          "headers": ["カーディナリティ", "表記", "意味", "具体例", "表への変換"],
          "rows": [
            ["1対1（1:1）", "─1─関連─1─", "AとBが1対1で対応", "社員 ─ 社員証（1人の社員に1枚の社員証）", "どちらか一方の表に外部キーを追加"],
            ["1対多（1:M）", "─1─関連─M─", "Aの1つにBが複数対応", "部署 ─ 社員（1つの部署に複数の社員が所属）", "多側（社員表）に外部キー（部署ID）を追加"],
            ["多対多（M:N）", "─M─関連─N─", "AとBが複数ずつ対応", "学生 ─ 科目（1人の学生が複数科目を受講、1科目を複数学生が受講）", "中間表（受講表）を作成し、両側への外部キーを持つ"]
          ]
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "データベース設計の流れ",
          "content": "①要件定義：どんなデータを管理するか決める\n②概念設計：E-R図を描き、実体と関連を整理\n③論理設計：E-R図を関係モデル（表）に変換し、正規化（1NF → 2NF → 3NF）を実施\n④物理設計：インデックス、ストレージ、パフォーマンスを考慮した設計\n⑤実装：DDL（CREATE TABLE）でデータベースを構築"
        }
      ]
    }
  ]
}
