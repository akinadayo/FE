{
  "topicId": "tech-2-1-1",
  "title": "プロセッサ（CPU）",
  "pages": [
    {
      "id": 1,
      "title": "コンピュータの基本構成",
      "sections": [
        {
          "type": "text",
          "content": "コンピュータは5つの基本装置から構成されています。これを「コンピュータの5大装置」と呼びます。ノイマン型コンピュータの基本アーキテクチャです。"
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "5大装置",
          "content": "制御装置、演算装置、主記憶装置、入力装置、出力装置の5つで構成されます。このうち制御装置と演算装置を合わせてCPU（中央処理装置）と呼びます。"
        },
        {
          "type": "table",
          "headers": ["装置名", "役割", "具体例"],
          "rows": [
            ["制御装置", "プログラムを解釈し、各装置を制御", "CPUの一部"],
            ["演算装置", "算術演算・論理演算を実行", "ALU（演算論理装置）"],
            ["主記憶装置", "プログラムとデータを記憶", "メモリ（RAM）"],
            ["入力装置", "データを入力", "キーボード、マウス"],
            ["出力装置", "結果を出力", "ディスプレイ、プリンタ"]
          ]
        },
        {
          "type": "highlight",
          "icon": "📌",
          "title": "ノイマン型コンピュータ",
          "content": "プログラム内蔵方式を採用したコンピュータです。プログラムとデータを主記憶装置に格納し、CPUが逐次的に命令を実行します。現代のほぼすべてのコンピュータがこの方式です。"
        },
        {
          "type": "text",
          "content": "ノイマン型コンピュータの特徴は以下の通りです。"
        },
        {
          "type": "list",
          "items": [
            "プログラム内蔵方式：プログラムを主記憶装置に格納",
            "逐次制御方式：命令を1つずつ順番に実行",
            "2進数による処理：すべてのデータを2進数で表現",
            "プログラムカウンタによる命令の管理"
          ]
        },
        {
          "type": "example",
          "title": "例題：5大装置",
          "content": "コンピュータの5大装置のうち、CPUに含まれるものを2つ選べ。\n\nア：主記憶装置\nイ：制御装置\nウ：入力装置\nエ：演算装置",
          "solution": "答え：イとエ\n\n解説：CPU（中央処理装置）は、制御装置と演算装置から構成されます。主記憶装置、入力装置、出力装置はCPUとは別の装置です。"
        }
      ]
    },
    {
      "id": 2,
      "title": "CPUの構成とレジスタ",
      "sections": [
        {
          "type": "text",
          "content": "CPUの内部には、命令の実行に必要な高速な記憶領域であるレジスタが複数存在します。レジスタは目的に応じて様々な種類があります。"
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "レジスタとは",
          "content": "CPUの内部にある超高速な記憶装置です。主記憶装置よりもアクセス速度が速く、演算や制御に使用されます。"
        },
        {
          "type": "table",
          "headers": ["レジスタ名", "役割", "略称"],
          "rows": [
            ["プログラムカウンタ", "次に実行する命令のアドレスを保持", "PC"],
            ["命令レジスタ", "現在実行中の命令を保持", "IR"],
            ["アキュムレータ", "演算結果を一時的に保持", "ACC"],
            ["汎用レジスタ", "データやアドレスを一時保存", "GR"],
            ["インデックスレジスタ", "アドレス修飾に使用", "IX"],
            ["ベースレジスタ", "ベースアドレスを保持", "BR"],
            ["スタックポインタ", "スタックの先頭を指す", "SP"]
          ]
        },
        {
          "type": "text",
          "content": "特に重要なレジスタは以下の通りです。"
        },
        {
          "type": "list",
          "items": [
            "プログラムカウンタ（PC）：命令の実行順序を管理する最重要レジスタ",
            "命令レジスタ（IR）：現在デコード中の命令を格納",
            "アキュムレータ（ACC）：演算の入力と結果を保持",
            "フラグレジスタ：演算結果の状態（正負、ゼロ、桁あふれなど）を保持"
          ]
        },
        {
          "type": "highlight",
          "icon": "⚡",
          "title": "プログラムカウンタの動作",
          "content": "プログラムカウンタは通常、命令実行後に自動的にインクリメント（+1）されます。ただし、分岐命令の場合は分岐先のアドレスに書き換えられます。"
        },
        {
          "type": "example",
          "title": "例題：レジスタの役割",
          "content": "次に実行すべき命令のアドレスを保持するレジスタはどれか。\n\nア：命令レジスタ\nイ：プログラムカウンタ\nウ：アキュムレータ\nエ：インデックスレジスタ",
          "solution": "答え：イ\n\n解説：プログラムカウンタ（PC）は次に実行する命令のアドレスを保持します。命令を実行するたびに自動的に更新されます。"
        }
      ]
    },
    {
      "id": 3,
      "title": "命令実行サイクル",
      "sections": [
        {
          "type": "text",
          "content": "CPUは命令を実行する際、一定のサイクルを繰り返します。この一連の流れを命令実行サイクルまたは命令サイクルと呼びます。"
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "命令実行の3ステップ",
          "content": "命令の実行は、フェッチ（取出し）、デコード（解読）、実行（エグゼキュート）の3段階で行われます。"
        },
        {
          "type": "table",
          "headers": ["段階", "処理内容", "使用するレジスタ"],
          "rows": [
            ["フェッチ", "主記憶装置から命令を読み出す", "PC → IR"],
            ["デコード", "命令を解読し、制御信号を生成", "IR"],
            ["実行", "命令を実行し、結果を格納", "ACC、GR等"]
          ]
        },
        {
          "type": "text",
          "content": "各段階の詳細な動作は以下の通りです。"
        },
        {
          "type": "list",
          "items": [
            "フェッチ：PCが示すアドレスから命令を読み出し、IRに格納。その後PCをインクリメント",
            "デコード：IR内の命令を解析し、どの演算を行うか、どのデータを使うかを判断",
            "実行：演算装置（ALU）で計算を実行し、結果をレジスタまたは主記憶装置に格納",
            "このサイクルを高速に繰り返すことでプログラムが実行される"
          ]
        },
        {
          "type": "highlight",
          "icon": "⚡",
          "title": "間接アドレス指定の場合",
          "content": "間接アドレス指定では、実行段階の前に「オペランドフェッチ」が追加されます。命令が指すアドレスを読み、そこから実際のデータアドレスを取得します。"
        },
        {
          "type": "example",
          "title": "例題：命令実行サイクル",
          "content": "CPUが主記憶装置から命令を読み出す段階を何というか。\n\nア：デコード\nイ：フェッチ\nウ：実行\nエ：ストア",
          "solution": "答え：イ\n\n解説：フェッチ（fetch）は命令取出しの段階で、プログラムカウンタが示すアドレスから命令を読み出し、命令レジスタに格納します。"
        }
      ]
    },
    {
      "id": 4,
      "title": "アドレス指定方式",
      "sections": [
        {
          "type": "text",
          "content": "命令が操作対象のデータを指定する方法をアドレス指定方式と呼びます。様々な方式があり、それぞれ特徴と用途が異なります。"
        },
        {
          "type": "table",
          "headers": ["方式", "指定方法", "用途"],
          "rows": [
            ["即値", "命令内にデータを直接記述", "定数の指定"],
            ["直接", "データのアドレスを直接指定", "固定アドレスのアクセス"],
            ["間接", "データのアドレスが格納されたアドレスを指定", "ポインタ処理"],
            ["インデックス", "基準アドレス + インデックスレジスタ", "配列処理"],
            ["ベース", "ベースレジスタ + 変位", "プログラムの再配置"],
            ["相対", "プログラムカウンタ + 変位", "分岐命令"]
          ]
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "即値アドレス指定",
          "content": "命令のオペランド部に直接データ値を記述します。主記憶装置へのアクセスが不要なため最も高速ですが、固定値しか扱えません。"
        },
        {
          "type": "text",
          "content": "各アドレス指定方式の特徴を理解しましょう。"
        },
        {
          "type": "list",
          "items": [
            "直接アドレス指定：シンプルだが、アドレス範囲に制限がある",
            "間接アドレス指定：柔軟だが、2回のメモリアクセスが必要で遅い",
            "インデックスアドレス指定：配列やテーブルのアクセスに最適",
            "ベースアドレス指定：プログラムの再配置（リロケーション）に使用",
            "相対アドレス指定：分岐先を現在位置から相対的に指定"
          ]
        },
        {
          "type": "example",
          "title": "例題：インデックスアドレス指定",
          "content": "配列 A[0] から A[9] の要素に順番にアクセスする場合、最も適したアドレス指定方式はどれか。\n\nア：即値アドレス指定\nイ：直接アドレス指定\nウ：インデックスアドレス指定\nエ：相対アドレス指定",
          "solution": "答え：ウ\n\n解説：配列の要素に順番にアクセスする場合、基準アドレスにインデックス値を加算するインデックスアドレス指定が最適です。ループでインデックスレジスタをインクリメントすることで効率的にアクセスできます。"
        }
      ]
    },
    {
      "id": 5,
      "title": "CPUの性能と高速化技術",
      "sections": [
        {
          "type": "text",
          "content": "CPUの性能は様々な指標で評価されます。また、性能向上のための多くの高速化技術が開発されています。"
        },
        {
          "type": "table",
          "headers": ["性能指標", "意味", "単位"],
          "rows": [
            ["クロック周波数", "CPUの動作速度", "Hz（GHz）"],
            ["CPI", "1命令あたりの平均クロック数", "クロック/命令"],
            ["MIPS", "1秒間に実行できる命令数", "百万命令/秒"],
            ["FLOPS", "1秒間の浮動小数点演算回数", "演算/秒"]
          ]
        },
        {
          "type": "formula",
          "content": "MIPS = クロック周波数（MHz） ÷ CPI",
          "explanation": "例：2GHz（2000MHz）のCPUでCPI=2の場合、MIPS = 2000 ÷ 2 = 1000MIPS"
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "CPUの高速化技術",
          "content": "パイプライン処理、スーパースカラ、キャッシュメモリなど、様々な技術でCPUの性能を向上させています。"
        },
        {
          "type": "table",
          "headers": ["技術", "概要", "効果"],
          "rows": [
            ["パイプライン処理", "複数命令を並列実行", "スループット向上"],
            ["スーパースカラ", "複数の演算装置で同時実行", "並列度向上"],
            ["RISC", "命令セットを単純化", "高速化・低消費電力"],
            ["CISC", "複雑な命令を1つで実行", "プログラムサイズ削減"]
          ]
        },
        {
          "type": "text",
          "content": "パイプライン処理の詳細を見てみましょう。"
        },
        {
          "type": "list",
          "items": [
            "命令実行を複数段階に分割（フェッチ、デコード、実行など）",
            "各段階を並列に実行することで高速化",
            "理想的には命令数倍の高速化が可能",
            "ハザード（競合）により性能が低下することもある"
          ]
        },
        {
          "type": "example",
          "title": "例題：MIPS計算",
          "content": "クロック周波数が3GHzで、CPIが1.5のCPUのMIPS値はいくらか。",
          "solution": "答え：2000MIPS\n\n解説：\nクロック周波数 = 3GHz = 3000MHz\nMIPS = 3000 ÷ 1.5 = 2000MIPS"
        },
        {
          "type": "highlight",
          "icon": "📌",
          "title": "試験対策のまとめ",
          "content": "CPUの基本構成（5大装置、レジスタ）、命令実行サイクル、アドレス指定方式、性能指標の計算をしっかり理解しましょう。特にプログラムカウンタの役割とMIPS計算は頻出です。"
        }
      ]
    }
  ]
}
