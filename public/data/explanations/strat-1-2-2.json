{
  "topicId": "strat-1-2-2",
  "title": "要件定義",
  "pages": [
    {
      "pageNumber": 1,
      "title": "要件定義の目的と重要性",
      "content": "# 要件定義の目的と重要性\n\n## 要件定義とは\n\n要件定義は、システム開発において「何を作るのか」を明確にするプロセスです。利用者や関係者のニーズを正確に把握し、システムが実現すべき機能や性能を具体的に定義します。\n\n## 要件定義の目的\n\n### 1. 認識の統一\n発注者と開発者の間で、作るべきシステムのイメージを共有します。曖昧さを排除し、後工程でのトラブルを防ぎます。\n\n### 2. 開発範囲の明確化\n何をシステムで実現し、何を人手で行うのかを明確にします。これにより、プロジェクトの規模とコストを正確に見積もることができます。\n\n### 3. 品質基準の設定\nシステムが満たすべき性能や使いやすさの基準を設定します。これが後の検証の基準となります。\n\n## 要件定義の重要性\n\n**早期の誤りの修正**\n\n要件定義段階での誤りを修正するコストは低く抑えられますが、実装後やリリース後に発見された場合、修正コストは数十倍から数百倍に膨らみます。\n\n**例：ECサイトの場合**\n\n要件定義で「在庫が0の商品は表示しない」という要件を見落とすと、実装後に大幅な修正が必要になり、データベース設計から画面設計まで影響が及びます。\n\n## 要件定義の成果物\n\n- 要件定義書（システム仕様書）\n- 機能一覧\n- 画面遷移図\n- データモデル図\n- 非機能要件一覧\n\nこれらの文書は、開発チーム全体で共有され、プロジェクト全体の指針となります。",
      "keyPoints": [
        "要件定義は「何を作るのか」を明確にするプロセス",
        "発注者と開発者の認識を統一する",
        "早期の誤り発見により修正コストを大幅に削減",
        "要件定義書などの成果物が開発の指針となる"
      ]
    },
    {
      "pageNumber": 2,
      "title": "業務要件の定義",
      "content": "# 業務要件の定義\n\n## 業務要件とは\n\n業務要件は、ユーザーの業務上の課題や目標を定義したものです。「なぜそのシステムが必要なのか」「どのような業務を改善したいのか」といった、ビジネス上の目的を明確にします。\n\n## 業務要件の要素\n\n### 1. 業務課題の特定\n現状の業務における問題点を洗い出します。\n\n**例：書店の在庫管理システム**\n- 手作業での在庫確認に時間がかかる\n- 在庫数の誤差が頻繁に発生する\n- 売れ筋商品の把握が困難\n- 発注のタイミングが遅れることがある\n\n### 2. 業務目標の設定\nシステム導入後に達成したい目標を具体的な数値で示します。\n\n**例：書店の場合**\n- 在庫確認時間を1日2時間から30分に短縮\n- 在庫誤差率を5%から1%以下に削減\n- 欠品による機会損失を50%削減\n- 過剰在庫を30%削減\n\n### 3. 業務フローの定義\nシステムを使った新しい業務の流れを定義します。\n\n**例：在庫管理の業務フロー**\n1. 商品入荷時にバーコードスキャンで自動登録\n2. 販売時にPOSシステムと連携して在庫を自動減算\n3. 在庫が設定数を下回ったら自動アラート\n4. システムが推奨発注数を提示\n5. 承認後、発注データを仕入先に自動送信\n\n## 業務要件のヒアリング手法\n\n### インタビュー\n現場の担当者や管理者に直接話を聞き、業務の実態を把握します。\n\n### 業務観察\n実際の業務現場を観察し、文書化されていない暗黙知を発見します。\n\n### ワークショップ\n関係者を集めて議論し、要件の優先順位を決定します。\n\n## 業務要件定義の成果\n\n業務要件が明確になることで、システム化する範囲と人手で行う範囲の線引きができ、最適なシステム設計が可能になります。",
      "keyPoints": [
        "業務要件は「なぜシステムが必要か」を定義する",
        "業務課題、目標、フローの3要素で構成される",
        "数値目標を設定し測定可能にする",
        "ヒアリングや観察を通じて現場の実態を把握する"
      ]
    },
    {
      "pageNumber": 3,
      "title": "機能要件の定義",
      "content": "# 機能要件の定義\n\n## 機能要件とは\n\n機能要件は、システムが「何をするか」を具体的に定義したものです。業務要件を実現するために必要な機能を、操作可能なレベルまで詳細化します。\n\n## 機能要件の記述方法\n\n### 1. 機能の洗い出し\nシステムが提供すべき機能を漏れなくリストアップします。\n\n**例：ECサイトの機能**\n- 会員登録・ログイン機能\n- 商品検索機能\n- 商品詳細表示機能\n- カート機能\n- 注文機能\n- 決済機能\n- 注文履歴閲覧機能\n- レビュー投稿機能\n- お気に入り登録機能\n\n### 2. 機能の詳細化\n各機能について、入力・処理・出力を明確にします。\n\n**例：商品検索機能の詳細**\n\n**入力：**\n- 検索キーワード（文字列、最大50文字）\n- カテゴリ（選択式）\n- 価格帯（最小値、最大値）\n- 並び順（新着順、価格順、人気順）\n\n**処理：**\n- 部分一致検索（商品名、説明文）\n- 在庫ありの商品のみ表示\n- 検索結果を指定順でソート\n- ページング処理（1ページ20件）\n\n**出力：**\n- 商品一覧（画像、名前、価格、レビュー平均）\n- 検索結果件数\n- ページネーション\n\n### 3. ユースケースの作成\n利用者の視点で、機能の使われ方を記述します。\n\n**例：商品購入のユースケース**\n\n**アクター：** 会員ユーザー\n\n**事前条件：** ログイン済み\n\n**基本フロー：**\n1. ユーザーが商品を検索する\n2. 商品詳細ページを開く\n3. 数量を選択してカートに追加\n4. カート画面で内容を確認\n5. 配送先を選択\n6. 支払い方法を選択\n7. 注文を確定\n8. 注文完了メールを受信\n\n**代替フロー：**\n- 在庫切れの場合、カート追加不可\n- 決済エラーの場合、エラーメッセージ表示\n\n## 機能要件の優先順位付け\n\n### MoSCoW法\n- **Must have（必須）：** システムに絶対必要な機能\n- **Should have（重要）：** あるべき機能だが、なくても運用可能\n- **Could have（あれば良い）：** 優先度は低いが価値がある機能\n- **Won't have（対象外）：** 今回は実装しない機能\n\n**例：ECサイトの場合**\n- Must: 商品検索、カート、決済\n- Should: レビュー機能、お気に入り\n- Could: SNS連携、チャット問い合わせ\n- Won't: 店舗在庫連携（次期開発）\n\n## 機能要件定義のポイント\n\n- 曖昧な表現を避け、具体的に記述する\n- 数値で測定可能な条件を設定する\n- 画面遷移図やワイヤーフレームで視覚化する\n- 例外処理やエラーケースも漏れなく定義する",
      "keyPoints": [
        "機能要件は「何をするか」を具体的に定義する",
        "入力・処理・出力を明確にする",
        "ユースケースで利用者視点の流れを記述する",
        "MoSCoW法で優先順位を付ける"
      ]
    },
    {
      "pageNumber": 4,
      "title": "非機能要件の定義",
      "content": "# 非機能要件の定義\n\n## 非機能要件とは\n\n非機能要件は、システムの品質特性を定義するものです。「どのように動くか」を規定し、性能、信頼性、使いやすさなど、機能以外の側面を明確にします。\n\n## 非機能要件の分類（IPA標準）\n\n### 1. 性能・拡張性\n\n**性能要件**\n\nシステムの応答速度や処理能力を定義します。\n\n**例：ECサイトの性能要件**\n- ページ表示：平均2秒以内、95%タイル値で3秒以内\n- 商品検索：1秒以内に結果表示\n- 決済処理：5秒以内に完了\n- 同時接続：1000ユーザーまでサポート\n- ピーク時：セール開催時に通常の10倍のアクセスに対応\n\n**拡張性要件**\n- ユーザー数が2倍になっても性能を維持\n- 商品数100万件まで拡張可能\n- サーバーの水平スケールに対応\n\n### 2. 可用性・信頼性\n\n**可用性**\n\nシステムが利用可能な時間の割合を定義します。\n\n**例：**\n- 稼働率：99.9%以上（年間停止時間8.76時間以内）\n- メンテナンス時間：月1回、午前2時～4時（2時間以内）\n- 計画外停止：年間4時間以内\n\n**信頼性**\n- データ損失：バックアップにより損失ゼロを保証\n- 障害復旧時間（RTO）：1時間以内\n- 復旧時点目標（RPO）：5分以内（5分前の状態まで復旧）\n\n### 3. セキュリティ\n\n**例：ECサイトのセキュリティ要件**\n- 通信：全ページHTTPS（TLS 1.3以上）で暗号化\n- パスワード：bcryptでハッシュ化、強度チェック実施\n- 個人情報：クレジットカード情報は保持せず決済代行サービス利用\n- アクセス制御：管理画面は二要素認証必須\n- セッション：30分で自動タイムアウト\n- ログ：全アクセスログを6ヶ月間保管\n- 脆弱性対策：OWASP Top 10への対策実施\n\n### 4. ユーザビリティ\n\n**例：**\n- レスポンシブデザイン：PC、タブレット、スマホ対応\n- ブラウザ対応：Chrome、Safari、Edge、Firefoxの最新2バージョン\n- アクセシビリティ：WCAG 2.1レベルAA準拠\n- 操作性：新規ユーザーがチュートリアルなしで購入完了できる\n- エラーメッセージ：わかりやすい日本語で対処法を提示\n\n### 5. 運用・保守性\n\n**例：**\n- ログ：エラーログ、アクセスログを自動収集\n- 監視：稼働状況を24時間自動監視、異常時にアラート\n- バックアップ：データベースを1日1回自動バックアップ\n- デプロイ：本番環境へのデプロイは1時間以内に完了\n- ドキュメント：システム構成図、運用手順書を整備\n\n### 6. 移行性\n\n**例：既存システムからの移行**\n- 会員データ10万件を1日で移行\n- 移行期間中も既存システムは稼働継続\n- データ整合性チェックツールで検証\n- ロールバック手順を事前に準備\n\n## 非機能要件の測定可能性\n\n非機能要件は必ず**測定可能な数値**で表現します。\n\n**悪い例：**\n- 「高速に動作すること」→ 曖昧\n- 「使いやすいこと」→ 主観的\n\n**良い例：**\n- 「検索結果を1秒以内に表示すること」→ 測定可能\n- 「新規ユーザーが3クリック以内で商品購入できること」→ 検証可能",
      "keyPoints": [
        "非機能要件は「どのように動くか」を定義する",
        "性能、可用性、セキュリティ、ユーザビリティなどを含む",
        "必ず測定可能な数値で表現する",
        "IPA標準の分類に従って網羅的に定義する"
      ]
    },
    {
      "pageNumber": 5,
      "title": "要件定義書の作成と合意",
      "content": "# 要件定義書の作成と合意\n\n## 要件定義書の構成\n\n要件定義書は、プロジェクト関係者全員が参照する重要文書です。以下の要素で構成されます。\n\n### 1. 文書情報\n- 文書名、版数、作成日\n- 作成者、承認者\n- 変更履歴\n\n### 2. プロジェクト概要\n- プロジェクトの背景と目的\n- 対象業務の範囲\n- 期待される効果\n\n### 3. 業務要件\n- 現状の業務課題\n- 目標とする業務の姿\n- 業務フロー図\n- システム化の範囲\n\n### 4. 機能要件\n- 機能一覧と優先順位\n- 各機能の詳細仕様\n- 画面遷移図\n- 画面レイアウト（ワイヤーフレーム）\n- データモデル図\n- 外部システム連携仕様\n\n### 5. 非機能要件\n- 性能要件\n- 可用性要件\n- セキュリティ要件\n- ユーザビリティ要件\n- 運用・保守要件\n- 移行要件\n\n### 6. 制約事項\n- 予算上限\n- 納期\n- 技術的制約\n- 法的制約\n\n### 7. 前提条件\n- 利用環境\n- ユーザー数\n- データ量\n\n## 要件定義書の作成プロセス\n\n### ステップ1：ヒアリング\n関係者から情報を収集します。\n\n**ヒアリング対象：**\n- 業務部門（エンドユーザー）\n- 管理部門（承認者）\n- 情報システム部門（運用担当）\n- 経営層（意思決定者）\n\n### ステップ2：要件の整理と文書化\n収集した情報を構造化し、要件定義書にまとめます。\n\n**ポイント：**\n- 曖昧な表現を排除し、具体的に記述\n- 図表を活用して視覚的に理解しやすく\n- 専門用語は用語集を作成\n\n### ステップ3：レビューと調整\nドラフト版を関係者に共有し、フィードバックを収集します。\n\n**レビューのポイント：**\n- 業務部門：業務フローが正しいか\n- 開発チーム：実現可能性の確認\n- 運用チーム：運用の実現性確認\n- 経営層：投資対効果の妥当性\n\n### ステップ4：合意形成\n\n**合意プロセス：**\n1. レビュー会議を開催し、疑問点を解消\n2. 要件の優先順位を合意\n3. 予算・納期との調整\n4. 最終版を関係者全員で承認\n\n**合意の証跡：**\n- 承認印または電子署名\n- 合意議事録\n- 変更管理プロセスの取り決め\n\n## 要件の変更管理\n\n開発中に要件変更が発生することは避けられません。適切な変更管理が必要です。\n\n### 変更管理プロセス\n1. **変更要求の提出**：変更内容、理由、影響範囲を文書化\n2. **影響分析**：コスト、納期、品質への影響を評価\n3. **承認判断**：変更管理委員会（CCB）で可否を判断\n4. **要件定義書の更新**：承認された変更を反映し版数を上げる\n5. **関係者への通知**：変更内容を全員に周知\n\n### 変更のトレーサビリティ\n要件から設計、実装、テストまでの紐付けを管理します。\n\n**例：トレーサビリティマトリクス**\n```\n要件ID | 要件 | 設計書 | 実装 | テストケース\nREQ-001 | 商品検索 | DD-010 | src/search.ts | TC-050\n```\n\nこれにより、要件変更時の影響範囲を正確に把握できます。\n\n## 要件定義の成功要因\n\n1. **関係者の積極的な参加**：現場の声を反映\n2. **適切な粒度**：細かすぎず粗すぎない記述\n3. **優先順位の明確化**：すべてを実現しようとしない\n4. **早期の合意**：後戻りを防ぐ\n5. **継続的なコミュニケーション**：誤解を早期に解消\n\n要件定義の品質が、プロジェクト全体の成否を左右します。",
      "keyPoints": [
        "要件定義書は業務要件、機能要件、非機能要件を含む",
        "ヒアリング、文書化、レビュー、合意のプロセスで作成",
        "変更管理プロセスで要件変更を適切に管理",
        "トレーサビリティで要件から実装までを紐付ける"
      ]
    }
  ]
}
