{
  "topicId": "tech-2-3-3",
  "title": "タスク管理",
  "pages": [
    {
      "id": 1,
      "title": "タスクとプロセスの基礎",
      "sections": [
        {
          "type": "text",
          "content": "タスク（またはプロセス）は、実行中のプログラムのことです。タスク管理は、複数のタスクを効率的に実行するためのOS機能です。"
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "タスクとプロセス",
          "content": "タスクとプロセスはほぼ同じ意味で、実行中のプログラムを指します。プログラムはディスク上の静的なファイル、タスクはメモリ上で動作する動的な実体です。"
        },
        {
          "type": "table",
          "headers": ["用語", "意味", "状態"],
          "rows": [
            ["プログラム", "ディスク上の命令コード", "静的"],
            ["タスク/プロセス", "実行中のプログラム", "動的"],
            ["スレッド", "タスク内の実行単位", "軽量プロセス"],
            ["マルチタスク", "複数タスクの並行実行", "OS機能"]
          ]
        },
        {
          "type": "text",
          "content": "タスクとプログラムの違いを理解しましょう。"
        },
        {
          "type": "list",
          "items": [
            "プログラム：ディスクに保存された命令の集まり（静的）",
            "タスク：メモリにロードされ実行中のプログラム（動的）",
            "1つのプログラムから複数のタスクを起動可能",
            "例：Excelプログラム1つから複数のExcelウィンドウ（タスク）を開ける",
            "各タスクは独立したメモリ空間を持つ"
          ]
        },
        {
          "type": "highlight",
          "icon": "⚡",
          "title": "スレッド",
          "content": "スレッドは、タスク（プロセス）内の実行単位です。1つのタスクは複数のスレッドを持つことができ、並行して処理を実行できます。プロセスより軽量で切替が高速です。"
        },
        {
          "type": "table",
          "headers": ["項目", "プロセス", "スレッド"],
          "rows": [
            ["独立性", "完全に独立", "プロセス内で共有"],
            ["メモリ空間", "独自のメモリ空間", "プロセスのメモリを共有"],
            ["生成コスト", "高い", "低い"],
            ["通信", "プロセス間通信が必要", "共有メモリで簡単"],
            ["切替速度", "遅い", "速い"]
          ]
        },
        {
          "type": "example",
          "title": "例題：タスクとプロセス",
          "content": "実行中のプログラムのことを何というか。\n\nア：ジョブ\nイ：タスク\nウ：ファイル\nエ：データ",
          "solution": "答え：イ\n\n解説：実行中のプログラムをタスク（またはプロセス）といいます。ディスク上に保存されているのがプログラム、メモリにロードされ実行中の状態がタスクです。"
        }
      ]
    },
    {
      "id": 2,
      "title": "タスクの状態遷移",
      "sections": [
        {
          "type": "text",
          "content": "タスクは実行中に様々な状態を遷移します。主な状態は、実行可能状態、実行状態、待ち状態の3つです。"
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "タスクの3つの状態",
          "content": "実行可能状態（Ready）、実行状態（Running）、待ち状態（Wait/Block）の3つが基本です。これらの間を状態遷移しながらタスクは実行されます。"
        },
        {
          "type": "table",
          "headers": ["状態", "説明", "CPU使用"],
          "rows": [
            ["実行可能", "CPUの割当てを待っている", "×"],
            ["実行", "CPUを使用して実行中", "○"],
            ["待ち", "入出力の完了などを待っている", "×"]
          ]
        },
        {
          "type": "text",
          "content": "状態遷移の詳細を見てみましょう。"
        },
        {
          "type": "list",
          "items": [
            "実行可能 → 実行：ディスパッチ（CPUが割り当てられる）",
            "実行 → 実行可能：タイムアウト（タイムスライス終了）",
            "実行 → 待ち：I/O要求（入出力処理の開始）",
            "待ち → 実行可能：I/O完了（入出力処理の完了）",
            "実行 → 終了：タスク完了"
          ]
        },
        {
          "type": "highlight",
          "icon": "⚡",
          "title": "ディスパッチ",
          "content": "実行可能状態のタスクにCPUを割り当て、実行状態に遷移させることをディスパッチといいます。ディスパッチャというOSの機能が行います。"
        },
        {
          "type": "table",
          "headers": ["遷移", "きっかけ", "実行する機能"],
          "rows": [
            ["実行可能→実行", "スケジューラの選択", "ディスパッチャ"],
            ["実行→実行可能", "タイムスライス終了", "スケジューラ"],
            ["実行→待ち", "I/O要求", "I/O管理"],
            ["待ち→実行可能", "I/O完了割込み", "割込みハンドラ"]
          ]
        },
        {
          "type": "highlight",
          "icon": "📌",
          "title": "タイムスライス",
          "content": "1つのタスクにCPUを割り当てる時間の単位です。この時間が経過すると、CPUを他のタスクに切り替えます。これにより複数のタスクが並行して実行されているように見えます。"
        },
        {
          "type": "example",
          "title": "例題：タスクの状態",
          "content": "タスクがディスク入出力の完了を待っている状態を何というか。\n\nア：実行状態\nイ：実行可能状態\nウ：待ち状態\nエ：準備状態",
          "solution": "答え：ウ\n\n解説：タスクが入出力の完了など、何らかのイベントを待っている状態を待ち状態（Wait状態）といいます。この間、CPUは他のタスクに割り当てられます。"
        }
      ]
    },
    {
      "id": 3,
      "title": "タスクスケジューリング",
      "sections": [
        {
          "type": "text",
          "content": "タスクスケジューリングは、複数の実行可能なタスクの中から、次にCPUを割り当てるタスクを選択する仕組みです。"
        },
        {
          "type": "table",
          "headers": ["方式", "選択基準", "特徴", "用途"],
          "rows": [
            ["FCFS", "到着順", "単純、公平", "バッチ処理"],
            ["SJF", "実行時間が短い順", "平均待ち時間最小", "バッチ処理"],
            ["優先度順", "優先度が高い順", "重要タスク優先", "リアルタイム"],
            ["ラウンドロビン", "順番にタイムスライス", "公平、応答性良", "タイムシェアリング"]
          ]
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "ラウンドロビン方式",
          "content": "各タスクに一定時間（タイムスライス）ずつCPUを割り当て、順番に実行する方式です。タイムシェアリングシステムで広く使用されています。"
        },
        {
          "type": "text",
          "content": "各スケジューリング方式の詳細を見てみましょう。"
        },
        {
          "type": "list",
          "items": [
            "FCFS（First Come First Served）：先着順、待ち行列の先頭から実行",
            "SJF（Shortest Job First）：実行時間が最短のタスクを優先",
            "優先度順：各タスクに優先度を設定し、高い順に実行",
            "ラウンドロビン：タイムスライスごとに順番に実行、循環",
            "多段キュー：複数の待ち行列を使い分ける"
          ]
        },
        {
          "type": "highlight",
          "icon": "⚡",
          "title": "プリエンプティブとノンプリエンプティブ",
          "content": "プリエンプティブ方式は実行中のタスクを強制的に中断できます。ノンプリエンプティブ方式はタスクが自発的にCPUを手放すまで待ちます。"
        },
        {
          "type": "table",
          "headers": ["方式", "特徴", "例"],
          "rows": [
            ["プリエンプティブ", "強制的に中断可能", "ラウンドロビン、優先度順"],
            ["ノンプリエンプティブ", "自発的な解放を待つ", "FCFS、SJF（基本形）"]
          ]
        },
        {
          "type": "formula",
          "content": "応答時間 = 待ち時間 + 実行時間",
          "explanation": "タスクが投入されてから完了するまでの時間です。スケジューリング方式によって待ち時間が変わります。"
        },
        {
          "type": "example",
          "title": "例題：ラウンドロビン",
          "content": "各タスクに一定時間ずつCPUを割り当て、順番に実行するスケジューリング方式はどれか。\n\nア：FCFS\nイ：SJF\nウ：優先度順\nエ：ラウンドロビン",
          "solution": "答え：エ\n\n解説：ラウンドロビン方式は、各タスクに一定時間（タイムスライス）ずつCPUを割り当て、順番に循環して実行します。対話型システムに適しています。"
        }
      ]
    },
    {
      "id": 4,
      "title": "マルチプログラミングと割込み",
      "sections": [
        {
          "type": "text",
          "content": "マルチプログラミングは、複数のプログラムをメモリに常駐させ、CPUを効率的に使用する技術です。割込み処理と組み合わせて実現されます。"
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "マルチプログラミング",
          "content": "複数のプログラムを同時にメモリに配置し、あるプログラムが待ち状態になったら別のプログラムを実行することで、CPU使用率を向上させる技術です。"
        },
        {
          "type": "table",
          "headers": ["技術", "意味", "目的"],
          "rows": [
            ["マルチプログラミング", "複数プログラムを交互実行", "CPU使用率向上"],
            ["マルチプロセッシング", "複数CPUで並列実行", "処理能力向上"],
            ["マルチタスク", "複数タスクを並行実行", "ユーザーの利便性向上"],
            ["マルチスレッド", "複数スレッドを並行実行", "プログラム内の並列化"]
          ]
        },
        {
          "type": "text",
          "content": "割込みは、マルチプログラミングを実現する重要な仕組みです。"
        },
        {
          "type": "list",
          "items": [
            "割込み：実行中のプログラムを一時中断し、緊急の処理を実行",
            "外部割込み：I/O完了、タイマー、キーボード入力など",
            "内部割込み：ゼロ除算、オーバーフローなどのプログラムエラー",
            "ソフトウェア割込み：プログラムからのシステムコール",
            "割込みにより、I/O待ちのタスクから別のタスクへ切替"
          ]
        },
        {
          "type": "highlight",
          "icon": "⚡",
          "title": "コンテキストスイッチ",
          "content": "あるタスクから別のタスクに切り替える際、実行中のタスクの状態（レジスタ値など）を保存し、次のタスクの状態を復元する処理をコンテキストスイッチといいます。"
        },
        {
          "type": "table",
          "headers": ["段階", "処理内容"],
          "rows": [
            ["1. 割込み発生", "I/O完了やタイマーなどで割込み"],
            ["2. コンテキスト保存", "現在のタスクのレジスタ等を保存"],
            ["3. スケジューリング", "次に実行するタスクを選択"],
            ["4. コンテキスト復元", "選択したタスクの状態を復元"],
            ["5. ディスパッチ", "選択したタスクの実行を再開"]
          ]
        },
        {
          "type": "highlight",
          "icon": "📌",
          "title": "オーバーヘッド",
          "content": "コンテキストスイッチには時間がかかり、頻繁に発生するとオーバーヘッドが大きくなります。適切なタイムスライスの設定が重要です。"
        },
        {
          "type": "example",
          "title": "例題：マルチプログラミング",
          "content": "複数のプログラムをメモリに常駐させ、あるプログラムが入出力待ちになったら別のプログラムを実行することでCPU使用率を向上させる技術を何というか。\n\nア：マルチプロセッシング\nイ：マルチプログラミング\nウ：マルチユーザー\nエ：マルチウィンドウ",
          "solution": "答え：イ\n\n解説：マルチプログラミングは、複数のプログラムをメモリに常駐させ、CPUが効率よく動作するように切り替えながら実行する技術です。"
        }
      ]
    },
    {
      "id": 5,
      "title": "プロセス間通信と同期",
      "sections": [
        {
          "type": "text",
          "content": "複数のタスクが協調して動作するには、タスク間でデータをやり取りしたり、処理の順序を制御したりする必要があります。"
        },
        {
          "type": "table",
          "headers": ["手法", "用途", "特徴"],
          "rows": [
            ["共有メモリ", "データの共有", "高速だが排他制御が必要"],
            ["メッセージパッシング", "データの送受信", "安全だがやや遅い"],
            ["パイプ", "データの流れを接続", "シンプル、一方向"],
            ["セマフォ", "資源の排他制御", "同期制御に使用"],
            ["シグナル", "イベント通知", "非同期通知"]
          ]
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "排他制御",
          "content": "複数のタスクが同じ資源（ファイル、メモリなど）に同時にアクセスすると、データの不整合が発生する可能性があります。排他制御により、同時アクセスを防ぎます。"
        },
        {
          "type": "text",
          "content": "排他制御と同期制御の重要な概念を理解しましょう。"
        },
        {
          "type": "list",
          "items": [
            "クリティカルセクション：同時実行されてはいけない部分",
            "ロック：資源を占有し、他のタスクのアクセスを防ぐ",
            "セマフォ：資源の利用可能数を管理する変数",
            "デッドロック：複数タスクが互いに資源の解放を待ち、停止する状態",
            "相互排除：同時に1つのタスクだけが資源にアクセス"
          ]
        },
        {
          "type": "highlight",
          "icon": "⚠️",
          "title": "デッドロック（deadlock）",
          "content": "複数のタスクが互いに相手が保持する資源の解放を待ち、すべてが実行できなくなる状態です。デッドロックを防ぐには、資源の獲得順序を統一するなどの対策が必要です。"
        },
        {
          "type": "table",
          "headers": ["デッドロック発生条件", "説明"],
          "rows": [
            ["相互排除", "資源を同時に使えない"],
            ["占有と待機", "資源を保持したまま他の資源を待つ"],
            ["非プリエンプション", "資源を強制的に奪えない"],
            ["循環待ち", "タスクが循環的に資源を待つ"]
          ]
        },
        {
          "type": "example",
          "title": "例題：排他制御",
          "content": "複数のタスクが同じファイルに同時に書き込まないように制御することを何というか。\n\nア：排他制御\nイ：並行制御\nウ：優先制御\nエ：分散制御",
          "solution": "答え：ア\n\n解説：排他制御は、複数のタスクが同じ資源に同時にアクセスすることを防ぎ、データの整合性を保つ仕組みです。ロックやセマフォを使って実現します。"
        },
        {
          "type": "highlight",
          "icon": "📌",
          "title": "試験対策のまとめ",
          "content": "タスクとプロセスの違い、タスクの状態遷移（実行可能・実行・待ち）、スケジューリング方式（ラウンドロビン、FCFS等）、マルチプログラミング、割込み、排他制御を理解しましょう。"
        }
      ]
    }
  ]
}
