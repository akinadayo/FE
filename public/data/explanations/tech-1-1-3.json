{
  "topicId": "tech-1-1-3",
  "title": "集合と論理",
  "pages": [
    {
      "id": 1,
      "title": "集合の基本概念",
      "sections": [
        {
          "type": "text",
          "content": "集合とは、ある条件を満たすものの集まりです。集合論は数学の基礎であり、コンピュータサイエンスでも重要な概念です。"
        },
        {
          "type": "highlight",
          "icon": "📝",
          "title": "集合の基本用語",
          "content": "・要素：集合に含まれる個々のもの\n・部分集合：ある集合のすべての要素が別の集合に含まれる\n・空集合：要素を1つも含まない集合（∅で表す）\n・全体集合：考える対象すべてを含む集合（Uで表す）"
        },
        {
          "type": "example",
          "title": "集合の表し方",
          "content": "A = {1, 2, 3, 4, 5}  ← 集合A\nB = {2, 4, 6, 8}     ← 集合B\n\n1 ∈ A  「1はAの要素である」\n6 ∉ A  「6はAの要素でない」"
        },
        {
          "type": "text",
          "content": "集合には以下のような演算があります："
        },
        {
          "type": "list",
          "items": [
            "和集合（∪）：AまたはBに含まれる要素の集合",
            "積集合（∩）：AとBの両方に含まれる要素の集合",
            "差集合（-）：Aに含まれるがBに含まれない要素の集合",
            "補集合（A̅）：全体集合のうちAに含まれない要素の集合"
          ]
        }
      ]
    },
    {
      "id": 2,
      "title": "ベン図",
      "sections": [
        {
          "type": "text",
          "content": "ベン図は、集合の関係を視覚的に表現する図です。円や楕円を使って集合を表し、重なり具合で集合演算の結果を示します。"
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "ベン図の読み方",
          "content": "・円の重なり部分：積集合（A ∩ B）\n・両方の円を合わせた部分：和集合（A ∪ B）\n・Aの円からBとの重なりを除いた部分：差集合（A - B）"
        },
        {
          "type": "example",
          "title": "ベン図の例",
          "content": "A = {1, 2, 3, 4, 5}\nB = {4, 5, 6, 7, 8}\n\nA ∪ B = {1, 2, 3, 4, 5, 6, 7, 8}  ← 和集合\nA ∩ B = {4, 5}                    ← 積集合\nA - B = {1, 2, 3}                  ← 差集合"
        },
        {
          "type": "table",
          "title": "集合演算の記号",
          "headers": ["演算", "記号", "意味"],
          "rows": [
            ["和集合", "A ∪ B", "AまたはB"],
            ["積集合", "A ∩ B", "AかつB"],
            ["差集合", "A - B", "AでBでない"],
            ["補集合", "A̅", "Aでないもの全体"]
          ]
        }
      ]
    },
    {
      "id": 3,
      "title": "論理演算の基本",
      "sections": [
        {
          "type": "text",
          "content": "論理演算は、真（True）と偽（False）の2つの値を扱う演算です。コンピュータの回路設計やプログラミングで重要な役割を果たします。"
        },
        {
          "type": "highlight",
          "icon": "📝",
          "title": "基本的な論理演算",
          "content": "・AND（論理積）：両方とも真のときだけ真\n・OR（論理和）：少なくとも一方が真なら真\n・NOT（否定）：真と偽を反転"
        },
        {
          "type": "table",
          "title": "AND演算の真理値表",
          "headers": ["A", "B", "A AND B"],
          "rows": [
            ["0", "0", "0"],
            ["0", "1", "0"],
            ["1", "0", "0"],
            ["1", "1", "1"]
          ]
        },
        {
          "type": "table",
          "title": "OR演算の真理値表",
          "headers": ["A", "B", "A OR B"],
          "rows": [
            ["0", "0", "0"],
            ["0", "1", "1"],
            ["1", "0", "1"],
            ["1", "1", "1"]
          ]
        },
        {
          "type": "table",
          "title": "NOT演算の真理値表",
          "headers": ["A", "NOT A"],
          "rows": [
            ["0", "1"],
            ["1", "0"]
          ]
        }
      ]
    },
    {
      "id": 4,
      "title": "その他の論理演算",
      "sections": [
        {
          "type": "text",
          "content": "基本的な論理演算以外に、NAND、NOR、XORという演算もよく使われます。"
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "特殊な論理演算",
          "content": "・NAND（否定論理積）：ANDの結果を反転\n・NOR（否定論理和）：ORの結果を反転\n・XOR（排他的論理和）：どちらか一方だけが真のとき真"
        },
        {
          "type": "table",
          "title": "NAND演算の真理値表",
          "headers": ["A", "B", "A NAND B"],
          "rows": [
            ["0", "0", "1"],
            ["0", "1", "1"],
            ["1", "0", "1"],
            ["1", "1", "0"]
          ]
        },
        {
          "type": "table",
          "title": "XOR演算の真理値表",
          "headers": ["A", "B", "A XOR B"],
          "rows": [
            ["0", "0", "0"],
            ["0", "1", "1"],
            ["1", "0", "1"],
            ["1", "1", "0"]
          ]
        },
        {
          "type": "highlight",
          "icon": "📝",
          "title": "XORの特徴",
          "content": "XOR（排他的論理和）は：\n・2つの入力が異なるときに1\n・2つの入力が同じときに0\n暗号化やパリティチェックでよく使われます"
        }
      ]
    },
    {
      "id": 5,
      "title": "論理演算の応用",
      "sections": [
        {
          "type": "text",
          "content": "論理演算は集合演算と対応しており、データベースの検索条件やプログラミングの条件分岐などで広く使われています。"
        },
        {
          "type": "table",
          "title": "集合演算と論理演算の対応",
          "headers": ["集合演算", "論理演算", "意味"],
          "rows": [
            ["積集合（∩）", "AND", "両方とも満たす"],
            ["和集合（∪）", "OR", "少なくとも一方を満たす"],
            ["補集合（A̅）", "NOT", "満たさない"]
          ]
        },
        {
          "type": "example",
          "title": "データベース検索での応用",
          "content": "「年齢が20歳以上 AND 性別が女性」\n→ 両方の条件を満たすレコードを抽出\n\n「都道府県が東京 OR 大阪」\n→ どちらかの条件を満たすレコードを抽出"
        },
        {
          "type": "highlight",
          "icon": "✅",
          "title": "試験対策のポイント",
          "content": "1. 真理値表を暗記する（特にAND、OR、XOR）\n2. ベン図で集合演算を視覚化できるようにする\n3. 論理演算の優先順位：NOT > AND > OR\n4. ド・モルガンの法則を理解する"
        },
        {
          "type": "highlight",
          "icon": "📝",
          "title": "ド・モルガンの法則",
          "content": "NOT (A AND B) = (NOT A) OR (NOT B)\nNOT (A OR B) = (NOT A) AND (NOT B)\n\nこれは論理式の変形でよく使います"
        }
      ]
    }
  ]
}