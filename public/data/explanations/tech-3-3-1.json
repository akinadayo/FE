{
  "topicId": "tech-3-3-1",
  "title": "データベース方式",
  "pages": [
    {
      "id": 1,
      "title": "データベースとDBMSの基礎",
      "sections": [
        {
          "type": "text",
          "content": "データベースとは、複数のアプリケーションやユーザーが共有できるように整理されたデータの集合体です。従来のファイルシステムでは、各アプリケーションが独自のファイルを持ち、データの重複や整合性の問題が発生していました。データベースは、これらの問題を解決し、効率的なデータ管理を実現します。"
        },
        {
          "type": "table",
          "headers": ["方式", "データ管理", "データ共有", "データ整合性", "問題点"],
          "rows": [
            ["ファイルシステム", "各アプリが個別ファイル", "困難", "低い（重複データが矛盾）", "データの重複、整合性維持が困難、柔軟性がない"],
            ["データベース", "DBMSが一元管理", "容易", "高い（DBMSが保証）", "導入・運用コストが高い"]
          ]
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "DBMS（Database Management System）とは",
          "content": "DBMSは、データベースを管理するためのソフトウェアです。データの登録、更新、削除、検索などの機能を提供し、複数ユーザーからの同時アクセス、データの整合性維持、セキュリティ管理などを行います。代表的なDBMSには、MySQL、PostgreSQL、Oracle Database、SQL Serverなどがあります。"
        },
        {
          "type": "example",
          "title": "ファイルシステムとデータベースの比較例",
          "content": "【ファイルシステムの問題】\n営業部と経理部が別々の顧客ファイルを持つ場合：\n- 営業部ファイル：顧客A（住所：東京都渋谷区）\n- 経理部ファイル：顧客A（住所：東京都新宿区）← 引越し後の住所に更新済み\n→ データが不整合（どちらが正しいか不明）\n\n【データベースの利点】\n顧客データをデータベースで一元管理：\n- 顧客Aの住所を1箇所だけに保存\n- 営業部・経理部の両方が同じデータを参照\n- 住所変更時は1箇所を更新すれば全員が最新データを参照できる\n→ データの整合性が保たれる"
        },
        {
          "type": "list",
          "items": [
            "データベース：複数のアプリケーション・ユーザーで共有するデータの集合体",
            "DBMS：データベースを管理するソフトウェア（MySQL、PostgreSQL、Oracle等）",
            "データ独立性：プログラムがデータの物理的な格納方法に依存しない",
            "データの一元管理：重複を排除し、整合性を維持",
            "同時実行制御：複数ユーザーの同時アクセスを管理"
          ]
        }
      ]
    },
    {
      "id": 2,
      "title": "関係データベースの基本概念",
      "sections": [
        {
          "type": "text",
          "content": "関係データベース（Relational Database）は、データを表（テーブル）の形式で管理するデータベースです。表は行（レコード）と列（カラム）で構成され、各行が1つのデータ実体（例：1人の顧客、1つの商品）を表します。関係データベースは最も広く使われているデータベース方式で、SQL言語でデータを操作します。"
        },
        {
          "type": "table",
          "headers": ["用語", "説明", "SQL用語", "具体例（社員表）"],
          "rows": [
            ["表（テーブル）", "データを格納する2次元の表", "TABLE", "社員表、部署表、プロジェクト表"],
            ["行（レコード、タプル）", "1件のデータ（横方向）", "ROW", "社員ID=101の社員情報1件"],
            ["列（カラム、属性）", "データの項目（縦方向）", "COLUMN", "社員ID、氏名、部署ID、給与"],
            ["主キー", "行を一意に識別する列", "PRIMARY KEY", "社員ID（重複不可）"],
            ["外部キー", "他の表の主キーを参照する列", "FOREIGN KEY", "部署ID（部署表の主キーを参照）"]
          ]
        },
        {
          "type": "example",
          "title": "関係データベースの具体例",
          "content": "【社員表（Employees）】\n| 社員ID | 氏名   | 部署ID | 給与    |\n|--------|--------|--------|--------|\n| 101    | 田中   | 10     | 400,000|\n| 102    | 佐藤   | 20     | 450,000|\n| 103    | 鈴木   | 10     | 380,000|\n\n【部署表（Departments）】\n| 部署ID | 部署名     |\n|--------|------------|\n| 10     | 営業部     |\n| 20     | 開発部     |\n| 30     | 経理部     |\n\n- 社員表の「部署ID」は外部キーで、部署表の「部署ID」（主キー）を参照\n- 社員ID=101の田中さんは部署ID=10（営業部）に所属\n- 2つの表を結合（JOIN）することで、「田中さんは営業部所属」という情報を取得できる"
        },
        {
          "type": "highlight",
          "icon": "📝",
          "title": "リレーションシップ（表間の関連）",
          "content": "関係データベースでは、複数の表を関連付けてデータを管理します。主なリレーションシップの種類：①1対1：1人の社員が1つの社員証を持つ、②1対多：1つの部署が複数の社員を持つ（最も多い）、③多対多：複数の社員が複数のプロジェクトに参加（中間表を使用）。外部キーによって表間の関連を定義し、データの整合性を保ちます。"
        }
      ]
    },
    {
      "id": 3,
      "title": "主キーと外部キー",
      "sections": [
        {
          "type": "text",
          "content": "主キー（Primary Key）は、表の各行を一意に識別するための列（または列の組み合わせ）です。主キーには重複した値や NULL（空値）を登録できません。外部キー（Foreign Key）は、他の表の主キーを参照する列で、表間の関連を定義します。外部キーによって参照整合性が保たれ、存在しないデータへの参照を防ぎます。"
        },
        {
          "type": "table",
          "headers": ["特性", "主キー（Primary Key）", "外部キー（Foreign Key）"],
          "rows": [
            ["目的", "行を一意に識別", "他の表の行を参照"],
            ["重複", "不可", "可（同じ部署に複数の社員）"],
            ["NULL", "不可", "可（部署未定の社員はNULL）"],
            ["参照整合性", "参照される側", "参照する側"],
            ["具体例", "社員ID（社員表）", "部署ID（社員表→部署表を参照）"]
          ]
        },
        {
          "type": "example",
          "title": "主キーと外部キーの制約例",
          "content": "【主キー制約】\n社員表に新しい社員を登録する場合：\n- OK：社員ID=104（新規で重複しない）\n- NG：社員ID=101（既に存在するため重複エラー）\n- NG：社員ID=NULL（NULLは不可）\n\n【外部キー制約（参照整合性）】\n社員表に新しい社員を登録する場合：\n- OK：部署ID=10（部署表に存在する営業部）\n- NG：部署ID=99（部署表に存在しないため参照エラー）\n- OK：部署ID=NULL（部署未定の場合はNULLを許可）\n\n部署表から部署を削除する場合：\n- OK：部署ID=30（経理部、社員が誰も所属していない）\n- NG：部署ID=10（営業部、田中・鈴木が所属しているため削除エラー）\n→ 参照されている行は削除できない（参照整合性制約）"
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "複合主キー",
          "content": "1つの列だけでは行を一意に識別できない場合、複数の列を組み合わせて主キーとすることができます。例：注文明細表（注文ID、商品ID）を複合主キーとする。注文ID=1の注文に商品A、商品Bが含まれる場合、（注文ID=1、商品ID=A）、（注文ID=1、商品ID=B）の2行で一意に識別されます。"
        }
      ]
    },
    {
      "id": 4,
      "title": "3層スキーマアーキテクチャ",
      "sections": [
        {
          "type": "text",
          "content": "3層スキーマアーキテクチャは、データベースのデータ独立性を実現するための仕組みです。データの見え方（スキーマ）を3つの層に分け、各層を独立させることで、物理的なデータ格納方法の変更がアプリケーションに影響を与えないようにします。これにより、柔軟で保守しやすいシステムを構築できます。"
        },
        {
          "type": "table",
          "headers": ["層", "名称", "対象ユーザー", "説明"],
          "rows": [
            ["外部スキーマ", "ユーザービュー", "エンドユーザー・アプリ", "各ユーザーやアプリケーションから見たデータの見え方。必要な列だけを表示。"],
            ["概念スキーマ", "論理スキーマ", "DBA（データベース管理者）", "データベース全体の論理的な構造。どんな表があり、どう関連しているか。"],
            ["内部スキーマ", "物理スキーマ", "DBMS", "データの物理的な格納方法（ファイル形式、索引構造、格納場所）。"]
          ]
        },
        {
          "type": "example",
          "title": "3層スキーマの具体例",
          "content": "【概念スキーマ（論理レベル）】\n社員表（社員ID、氏名、部署ID、給与、住所、電話番号）\n\n【外部スキーマ（ユーザー別のビュー）】\n- 営業部用ビュー：社員ID、氏名、部署ID、電話番号（給与は非表示）\n- 経理部用ビュー：社員ID、氏名、給与（住所・電話番号は非表示）\n- 人事部用ビュー：全ての列を表示（管理者権限）\n\n【内部スキーマ（物理レベル）】\n- 社員表はディスク上の「emp.dat」ファイルに格納\n- 社員IDに索引（B+木）を作成して高速検索\n- 給与列は暗号化して保存\n\n【データ独立性の実現】\n- 物理的な格納方法を変更（HDD→SSDに移行）しても、概念スキーマ・外部スキーマは変更不要\n- 営業部用ビューに「メールアドレス」列を追加しても、経理部用ビューは影響なし"
        },
        {
          "type": "highlight",
          "icon": "📝",
          "title": "データ独立性の2種類",
          "content": "①物理的データ独立性：内部スキーマ（物理的格納方法）の変更が概念スキーマに影響しない。例：索引の追加、ストレージの変更。②論理的データ独立性：概念スキーマ（表構造）の変更が外部スキーマ（ビュー）に影響しない。例：新しい列の追加、表の分割。データ独立性により、システムの柔軟性と保守性が向上します。"
        }
      ]
    },
    {
      "id": 5,
      "title": "DBMSの主な機能",
      "sections": [
        {
          "type": "text",
          "content": "DBMSは、データベースを効率的かつ安全に管理するために、様々な機能を提供します。これらの機能により、データの整合性維持、高速なデータアクセス、セキュリティ確保、障害からの復旧などが実現されます。"
        },
        {
          "type": "table",
          "headers": ["機能", "説明", "具体例"],
          "rows": [
            ["データ定義", "表の作成・変更・削除（DDL）", "CREATE TABLE, ALTER TABLE, DROP TABLE"],
            ["データ操作", "データの登録・更新・削除・検索（DML）", "SELECT, INSERT, UPDATE, DELETE"],
            ["トランザクション管理", "複数の処理をまとめて実行（ACID特性）", "銀行振込（引き落としと入金を同時に実行）"],
            ["同時実行制御", "複数ユーザーの同時アクセスを管理（排他制御）", "座席予約システム（同じ座席を重複予約させない）"],
            ["障害回復", "障害発生時にデータを復旧（ログ・バックアップ）", "ログファイルからロールバック・ロールフォワード"],
            ["セキュリティ管理", "アクセス権限の設定", "営業部は顧客データ閲覧可、給与データ閲覧不可"],
            ["索引管理", "高速検索のための索引（インデックス）作成", "社員IDに索引を作成して検索速度を向上"],
            ["整合性制約", "データの整合性を保証", "主キー制約、外部キー制約、CHECK制約"]
          ]
        },
        {
          "type": "example",
          "title": "トランザクション管理の例",
          "content": "【銀行振込のトランザクション】\nAさんからBさんへ10,000円振込む場合：\n\n①BEGIN TRANSACTION（トランザクション開始）\n②UPDATE 口座表 SET 残高 = 残高 - 10000 WHERE 口座番号 = 'A'（Aさんの残高を減らす）\n③UPDATE 口座表 SET 残高 = 残高 + 10000 WHERE 口座番号 = 'B'（Bさんの残高を増やす）\n④COMMIT（確定）\n\n【途中でエラーが発生した場合】\n②が成功したが、③でエラー発生（Bさんの口座が存在しない等）\n→ ROLLBACK（巻き戻し）により、②の処理も取り消される\n→ Aさんの残高は元に戻る（10,000円は引き落とされない）\n\n【ACID特性】\n- Atomicity（原子性）：全て成功するか、全て失敗するか（中途半端な状態にならない）\n- Consistency（一貫性）：トランザクション前後でデータの整合性が保たれる\n- Isolation（独立性）：他のトランザクションの影響を受けない\n- Durability（永続性）：コミット後はシステム障害が発生してもデータが失われない"
        },
        {
          "type": "list",
          "items": [
            "DDL（Data Definition Language）：データ定義言語（CREATE、ALTER、DROP）",
            "DML（Data Manipulation Language）：データ操作言語（SELECT、INSERT、UPDATE、DELETE）",
            "トランザクション：複数の処理をまとめた一連の操作単位（ACID特性を保証）",
            "同時実行制御：排他ロック（他のユーザーがアクセスできない）と共有ロック（読み取りのみ可能）",
            "障害回復：ログファイルを使ったロールバック（取り消し）とロールフォワード（再実行）",
            "索引（インデックス）：検索速度を向上させるためのデータ構造（B+木、ハッシュ）"
          ]
        }
      ]
    }
  ]
}
