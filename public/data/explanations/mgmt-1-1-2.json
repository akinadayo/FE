{
  "topicId": "mgmt-1-1-2",
  "title": "プロジェクト統合マネジメント",
  "pages": [
    {
      "id": 1,
      "title": "プロジェクト憲章とプロジェクト統合マネジメントの基礎",
      "sections": [
        {
          "type": "text",
          "content": "**プロジェクト統合マネジメント**とは、プロジェクト全体を統合的に管理し、各プロセスや知識エリアを調整して、プロジェクトの目標を達成するための活動です。プロジェクトマネジメントの10の知識エリア(スコープ、スケジュール、コスト、品質、資源、コミュニケーション、リスク、調達、ステークホルダ、統合)のうち、**統合マネジメント**は全体を調整する中心的な役割を果たします。"
        },
        {
          "type": "text",
          "content": "**プロジェクト憲章(Project Charter)**とは、プロジェクトの開始を正式に承認する文書です。プロジェクト憲章により、プロジェクトマネージャに権限が付与され、プロジェクトを開始できます。プロジェクト憲章は、経営層やプロジェクトスポンサーが作成・承認し、プロジェクトの「なぜ実施するのか」「何を達成するのか」を明確にします。"
        },
        {
          "type": "table",
          "headers": ["項目", "内容", "具体例"],
          "rows": [
            ["プロジェクトの目的", "なぜこのプロジェクトを実施するのか", "顧客満足度向上、業務効率化、売上増加"],
            ["プロジェクトの概要", "何を作るのか(成果物)", "新しい販売管理システム、ECサイト"],
            ["ビジネスケース", "期待される効果・ROI", "年間コスト削減3,000万円、ROI 150%"],
            ["主要なステークホルダ", "プロジェクトに関わる人・組織", "プロジェクトスポンサー、業務部門、IT部門"],
            ["前提条件", "プロジェクト実施の前提", "既存システムとのデータ連携が可能"],
            ["制約条件", "プロジェクトの制約", "予算5,000万円、12ヶ月以内に完成"],
            ["主要なリスク", "想定されるリスク", "要件変更、技術的課題、人材不足"],
            ["プロジェクトマネージャ", "誰が責任者か", "山田太郎(PM権限の付与)"]
          ]
        },
        {
          "type": "example",
          "title": "プロジェクト憲章の具体例:販売管理システムの刷新",
          "content": "【プロジェクト名】\n販売管理システム刷新プロジェクト\n\n【プロジェクトの目的】\n現行の販売管理システムは15年前に開発され、保守コストが高く、業務の変化に対応できていない。新しいシステムを導入することで、①業務効率を30%向上、②保守コストを年間1,500万円削減、③顧客情報の一元管理を実現する。\n\n【プロジェクトの概要】\n販売管理システム(受注・出荷・請求・在庫管理)を刷新し、Webベースの新システムを構築する。既存の会計システム、物流システムとのデータ連携も実現する。\n\n【ビジネスケース】\n初期投資:5,000万円(開発費4,000万円、インフラ1,000万円)\n年間削減効果:保守コスト1,500万円削減 + 業務効率化による人件費削減1,500万円 = 3,000万円/年\nROI:(3,000万円 × 3年 - 5,000万円) / 5,000万円 = 80%\n投資回収期間:1.67年\n\n【主要なステークホルダ】\n①プロジェクトスポンサー:営業本部長(予算承認者)\n②業務部門:営業部、物流部(システム利用者)\n③IT部門:情報システム部(開発・運用担当)\n④外部ベンダー:システム開発会社A社\n\n【スケジュール】\n2025年4月~2026年3月(12ヶ月)\n  要件定義:2ヶ月\n  設計:3ヶ月\n  開発・テスト:5ヶ月\n  移行・稼働:2ヶ月\n\n【予算】\n5,000万円(開発費4,000万円、インフラ1,000万円)\n\n【前提条件】\n①既存の会計システム、物流システムとのAPI連携が可能\n②開発メンバーを6名確保できる(社内3名、外部ベンダー3名)\n③業務部門が要件定義に月20時間参加できる\n\n【制約条件】\n①予算は5,000万円を超えない\n②2026年3月末までに稼働開始(決算期に合わせる)\n③既存システムのデータを全て移行する\n\n【主要なリスク】\n①要件変更:業務部門の要望が多く、スコープが拡大するリスク → 変更管理プロセスを厳格化\n②技術的課題:既存システムとのAPI連携でトラブルが発生するリスク → 早期に技術検証を実施\n③人材不足:開発メンバーが離任するリスク → バックアップ要員を確保\n\n【プロジェクトマネージャ】\n山田太郎(情報システム部)\n権限:予算5,000万円の範囲内で、開発メンバーのアサイン、スケジュール調整を実施できる"
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "プロジェクト憲章の重要性",
          "content": "プロジェクト憲章は、プロジェクトの「開始許可証」です。プロジェクト憲章がないと、プロジェクトマネージャは正式な権限を持たず、予算やメンバーをアサインできません。プロジェクト憲章により、①プロジェクトが正式に承認される、②プロジェクトマネージャに権限が付与される、③ステークホルダ全員が目的・スコープを共有できる、という効果があります。プロジェクト憲章は、プロジェクトの立ち上げフェーズで最初に作成する重要な文書です。"
        }
      ]
    },
    {
      "id": 2,
      "title": "プロジェクト計画書とWBS(作業分解構造)",
      "sections": [
        {
          "type": "text",
          "content": "**プロジェクト計画書(Project Management Plan)**とは、プロジェクトをどのように実行・監視・管理するかを記述した文書です。プロジェクト憲章が「何を作るか」を定義するのに対し、プロジェクト計画書は「どうやって作るか」を定義します。プロジェクト計画書には、スコープ、スケジュール、コスト、品質、リスク、コミュニケーション、調達などの計画が含まれます。"
        },
        {
          "type": "text",
          "content": "**WBS(Work Breakdown Structure:作業分解構成図)**とは、プロジェクトの成果物を、階層的に分解した構造図です。WBSにより、プロジェクト全体を小さな作業単位(ワークパッケージ)に分解し、①スコープを明確化、②スケジュール・コストを見積もりやすくする、③担当者を明確にする、などの効果があります。WBSは「成果物ベース」で分解するのが原則です。"
        },
        {
          "type": "example",
          "title": "WBSの具体例:販売管理システムの刷新プロジェクト",
          "content": "【WBSの階層構造】\nレベル1:プロジェクト全体\n  1. 販売管理システム刷新プロジェクト\n\nレベル2:主要な成果物(フェーズ)\n  1.1 プロジェクト管理\n  1.2 要件定義\n  1.3 システム設計\n  1.4 システム開発\n  1.5 テスト\n  1.6 移行・稼働\n\nレベル3:詳細な成果物\n  1.1 プロジェクト管理\n    1.1.1 プロジェクト計画書\n    1.1.2 進捗報告書(月次)\n    1.1.3 課題管理表\n  \n  1.2 要件定義\n    1.2.1 業務要件定義書\n    1.2.2 機能要件定義書\n    1.2.3 非機能要件定義書\n  \n  1.3 システム設計\n    1.3.1 外部設計書(画面設計、帳票設計)\n    1.3.2 内部設計書(DB設計、処理フロー)\n    1.3.3 インフラ設計書\n  \n  1.4 システム開発\n    1.4.1 受注管理機能\n    1.4.2 出荷管理機能\n    1.4.3 請求管理機能\n    1.4.4 在庫管理機能\n    1.4.5 API連携機能\n  \n  1.5 テスト\n    1.5.1 単体テスト計画書・結果報告書\n    1.5.2 結合テスト計画書・結果報告書\n    1.5.3 システムテスト計画書・結果報告書\n    1.5.4 運用テスト計画書・結果報告書\n  \n  1.6 移行・稼働\n    1.6.1 データ移行計画書\n    1.6.2 運用マニュアル\n    1.6.3 ユーザートレーニング資料\n    1.6.4 本番稼働報告書\n\nレベル4:ワークパッケージ(実際の作業単位)\n  1.2.1 業務要件定義書\n    1.2.1.1 現行業務フロー調査\n    1.2.1.2 新業務フロー設計\n    1.2.1.3 業務要件一覧作成\n    1.2.1.4 業務要件レビュー\n    1.2.1.5 業務要件承認\n\n【WBSから得られる情報】\n①全ての成果物・作業が漏れなく洗い出される(抜け漏れ防止)\n②各成果物の担当者・スケジュール・コストを見積もれる\n③進捗管理のベースライン(基準)になる"
        },
        {
          "type": "table",
          "headers": ["WBS作成のポイント", "説明", "具体例"],
          "rows": [
            ["成果物ベースで分解", "「何をするか」ではなく「何を作るか」で分解", "○:業務要件定義書 ×:業務をヒアリングする"],
            ["100%ルール", "全ての作業を漏れなく含める", "開発だけでなく、テスト、移行、運用マニュアル作成も含める"],
            ["8/80ルール", "最小単位の作業は8時間~80時間(1日~10日)", "1時間の作業は小さすぎ、100時間の作業は大きすぎ"],
            ["各階層で分解", "通常3~5階層で分解", "レベル1:プロジェクト全体 → レベル2:フェーズ → レベル3:成果物 → レベル4:ワークパッケージ"],
            ["一意なID付与", "各要素に一意なIDを付与", "1.2.1.1(業務要件定義書の現行業務フロー調査)"]
          ]
        },
        {
          "type": "highlight",
          "icon": "🔧",
          "title": "WBSとスケジュール・コストの関係",
          "content": "WBSは、スケジュール管理、コスト管理の基礎となります。WBSで分解した各ワークパッケージに対して、①所要期間を見積もる → スケジュール(ガントチャート、アローダイアグラム)を作成、②必要な工数・コストを見積もる → コスト計画を作成、③担当者をアサインする → 責任分担マトリクス(RACI)を作成、という流れで計画を立てます。WBSが不十分だと、作業の抜け漏れが発生し、スケジュール遅延、コスト超過の原因になります。"
        }
      ]
    },
    {
      "id": 3,
      "title": "変更管理プロセス",
      "sections": [
        {
          "type": "text",
          "content": "**変更管理(Change Management)**とは、プロジェクトのスコープ、スケジュール、コストなどのベースライン(基準)に対する変更を、適切に評価・承認・実施するプロセスです。プロジェクトでは、顧客の要望、技術的課題、外部環境の変化などにより、変更が発生します。変更を適切に管理しないと、①スコープクリープ(スコープが際限なく拡大)、②スケジュール遅延、③コスト超過、が発生します。"
        },
        {
          "type": "table",
          "headers": ["変更管理の手順", "実施内容", "具体例"],
          "rows": [
            ["①変更要求の受付", "ステークホルダから変更要求を受け付ける", "業務部門から「在庫の自動発注機能を追加してほしい」という要求"],
            ["②変更の影響分析", "スコープ、スケジュール、コスト、リスクへの影響を分析", "工数:2人月(100時間)、コスト:200万円、スケジュール:1ヶ月遅延"],
            ["③変更管理委員会で審議", "変更を承認するか却下するか審議", "変更管理委員会(PMO、PM、スポンサー)で審議 → 承認"],
            ["④ベースラインの更新", "承認された変更をベースラインに反映", "スコープ、スケジュール、コスト計画を更新"],
            ["⑤変更の実施", "変更を実施し、ステークホルダに通知", "在庫自動発注機能を開発 → 完成後、業務部門に通知"],
            ["⑥変更の記録", "変更履歴を記録", "変更管理台帳に記録(変更ID、変更内容、承認日、影響)"]
          ]
        },
        {
          "type": "example",
          "title": "変更管理の具体例:販売管理システムの機能追加要求",
          "content": "【背景】\n販売管理システムの開発中、業務部門から「在庫が一定数以下になったら、自動的に発注する機能を追加してほしい」という変更要求が出された。\n\n【変更要求の詳細】\n変更ID:CR-2025-001\n変更要求者:営業部 鈴木課長\n変更内容:在庫が最小在庫数以下になったら、自動的に発注データを生成し、仕入先にメール送信する機能を追加\n変更理由:在庫切れによる販売機会損失を防ぐため\n\n【影響分析】\n①スコープへの影響:\n  - 在庫監視バッチ処理の追加(1日1回、在庫数をチェック)\n  - 発注データ生成処理の追加\n  - メール送信機能の追加\n  - 管理画面に「最小在庫数」設定機能を追加\n\n②スケジュールへの影響:\n  - 設計:5日、開発:10日、テスト:5日 → 合計20日(1ヶ月遅延)\n  - クリティカルパス上の作業ではないため、全体スケジュールへの影響は軽微(並行作業可能)\n\n③コストへの影響:\n  - 開発工数:2人月 × 100万円/人月 = 200万円\n  - インフラ:メールサーバ設定 10万円\n  - 合計:210万円(予算5,000万円の4.2%増)\n\n④リスクへの影響:\n  - 新しい外部システム(メールサーバ)との連携が必要 → 技術的リスク増加\n  - テスト期間が短縮される可能性 → 品質リスク増加\n\n⑤品質への影響:\n  - 既存機能への影響は小さい(新規機能の追加)\n  - テストケースを20個追加\n\n【変更管理委員会での審議】\n参加者:プロジェクトスポンサー(営業本部長)、PM(山田)、PMO(佐藤)\n審議内容:\n  - 業務部門の要望は理解できるが、スケジュール・コスト・リスクへの影響が大きい\n  - この機能がないと、在庫切れによる販売機会損失が年間500万円発生する(業務部門の試算)\n  - ROI:(500万円/年 × 3年 - 210万円) / 210万円 = 614% → 投資効果が高い\n審議結果:承認(ただし、スケジュールへの影響を最小化するため、並行作業を実施)\n\n【ベースラインの更新】\n①スコープ計画:在庫自動発注機能を追加\n②スケジュール計画:1ヶ月遅延(2026年4月末稼働)\n③コスト計画:5,000万円 → 5,210万円(追加予算210万円を承認)\n④リスク計画:メールサーバ連携のリスクを追加 → 早期に技術検証を実施\n\n【変更の実施と記録】\n①在庫自動発注機能を開発(設計5日、開発10日、テスト5日)\n②単体テスト、結合テスト、システムテストを実施 → 全て合格\n③業務部門に完成を通知 → 運用テストで動作確認\n④変更管理台帳に記録(変更ID:CR-2025-001、承認日:2025年6月1日、影響:コスト+210万円、スケジュール+1ヶ月)"
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "変更管理の重要性:スコープクリープの防止",
          "content": "変更管理プロセスがないと、「この機能も追加してほしい」「あの画面も変更してほしい」という要求が際限なく発生し、スコープクリープ(スコープが際限なく拡大)に陥ります。スコープクリープは、プロジェクト失敗の最大の原因の1つです。変更管理プロセスにより、①全ての変更要求を記録、②影響を分析(スコープ、スケジュール、コスト、リスク)、③変更管理委員会で承認・却下を判断、④承認された変更のみを実施、という流れで、変更を適切にコントロールできます。「承認されない変更は実施しない」という原則を守ることが重要です。"
        }
      ]
    },
    {
      "id": 4,
      "title": "構成管理(Configuration Management)",
      "sections": [
        {
          "type": "text",
          "content": "**構成管理(Configuration Management)**とは、プロジェクトの成果物(文書、プログラムコード、設定ファイルなど)のバージョンを管理し、誰が・いつ・何を変更したかを追跡するプロセスです。構成管理により、①成果物の最新版を特定できる、②過去のバージョンに戻せる、③複数人が同時に作業しても、変更が競合しない、などの効果があります。"
        },
        {
          "type": "table",
          "headers": ["構成管理の対象", "具体例", "管理方法"],
          "rows": [
            ["文書", "要件定義書、設計書、テスト計画書", "バージョン番号を付与(v1.0, v1.1, v2.0)"],
            ["プログラムコード", "ソースコード、スクリプト", "バージョン管理システム(Git, SVN)"],
            ["データベーススキーマ", "テーブル定義、インデックス", "マイグレーションスクリプト"],
            ["設定ファイル", "サーバ設定、環境変数", "バージョン管理システム"],
            ["インフラ", "サーバ構成、ネットワーク構成", "Infrastructure as Code(Terraform, Ansible)"]
          ]
        },
        {
          "type": "example",
          "title": "構成管理の具体例:プログラムコードのバージョン管理",
          "content": "【背景】\n販売管理システムの開発で、6名の開発者が同時にプログラムコードを開発している。構成管理システム(Git)を使用して、バージョン管理を実施。\n\n【構成管理の手順】\n①開発者Aが、受注管理機能のコードを作成\n②開発者Aが、コードをローカルリポジトリにコミット(バージョン管理に記録)\n  - コミットメッセージ:「受注登録機能を追加」\n  - コミットID:abc123\n  - コミット者:開発者A\n  - コミット日時:2025年6月1日 10:00\n\n③開発者Aが、コードをリモートリポジトリにプッシュ(チーム全体で共有)\n\n④開発者Bが、リモートリポジトリから最新版をプル(ダウンロード)\n⑤開発者Bが、出荷管理機能のコードを作成\n⑥開発者Bが、コードをコミット・プッシュ\n\n⑦開発者Aと開発者Bが、同じファイルを同時に編集 → 競合(Conflict)が発生\n⑧開発者Aが、競合を解決(マージ)\n  - 開発者Aと開発者Bの変更内容を確認\n  - 両方の変更をマージ(統合)、または一方の変更を採用\n  - 競合を解決したコードをコミット・プッシュ\n\n⑨バグが発見され、過去のバージョンに戻す必要が発生\n⑩開発者Aが、特定のコミットに戻す(ロールバック)\n  - コミットID:abc123に戻す\n  - 過去のバージョンのコードを復元\n\n【構成管理システム(Git)の利点】\n①変更履歴が全て記録される(誰が・いつ・何を変更したか)\n②過去のバージョンに簡単に戻せる\n③複数人が同時に作業しても、変更を統合できる(マージ)\n④ブランチ機能で、本番版と開発版を分離できる\n⑤リモートリポジトリで、チーム全体でコードを共有できる"
        },
        {
          "type": "example",
          "title": "構成管理の具体例:文書のバージョン管理",
          "content": "【背景】\n要件定義書を、プロジェクトマネージャ、業務部門、開発チームで共同編集している。バージョン管理を実施。\n\n【バージョン番号のルール】\nメジャーバージョン.マイナーバージョン.リビジョン\n例:v1.0.0 → v1.1.0 → v2.0.0\n\n①メジャーバージョン(最初の数字):\n  大幅な変更(全体の構成変更、章の追加・削除)\n  例:v1.0.0 → v2.0.0\n\n②マイナーバージョン(2番目の数字):\n  中程度の変更(機能の追加・修正)\n  例:v1.0.0 → v1.1.0\n\n③リビジョン(3番目の数字):\n  軽微な変更(誤字修正、文言修正)\n  例:v1.0.0 → v1.0.1\n\n【要件定義書のバージョン履歴】\nv1.0.0(2025年4月1日):\n  初版作成(プロジェクトマネージャ 山田)\n\nv1.1.0(2025年4月15日):\n  業務要件を追加(業務部門 鈴木)\n  変更内容:在庫管理の業務要件を10項目追加\n\nv1.2.0(2025年5月1日):\n  非機能要件を追加(開発チーム 田中)\n  変更内容:性能要件、セキュリティ要件を追加\n\nv1.2.1(2025年5月10日):\n  誤字修正(プロジェクトマネージャ 山田)\n  変更内容:「受注管理」→「注文管理」に統一\n\nv2.0.0(2025年6月1日):\n  在庫自動発注機能を追加(変更管理委員会で承認)\n  変更内容:要件を30項目追加、全体の構成を変更\n\n【バージョン管理の効果】\n①各バージョンの変更内容が明確\n②過去のバージョンを参照できる(v1.0.0の要件定義書を確認)\n③変更履歴を追跡できる(誰が・いつ・何を変更したか)"
        },
        {
          "type": "highlight",
          "icon": "🔧",
          "title": "構成管理とベースライン",
          "content": "**ベースライン(Baseline)**とは、正式に承認された成果物のバージョンです。ベースラインは、プロジェクトの基準となり、以降の変更は全てベースラインからの差分として管理されます。例えば、要件定義書v2.0.0が承認された → v2.0.0がベースライン → 以降の変更(v2.1.0, v2.2.0)は、変更管理プロセスで承認が必要。ベースラインにより、①プロジェクトの進捗を測定できる(ベースラインと実績を比較)、②変更を適切にコントロールできる、という効果があります。代表的なベースラインとして、①スコープベースライン(WBS、要件定義書)、②スケジュールベースライン(ガントチャート)、③コストベースライン(予算)、の3つがあります。"
        }
      ]
    },
    {
      "id": 5,
      "title": "成果物の管理と承認プロセス",
      "sections": [
        {
          "type": "text",
          "content": "**成果物管理(Deliverable Management)**とは、プロジェクトで作成する成果物(文書、システム、サービス)を、計画通りに作成し、品質を確保し、ステークホルダに納品するプロセスです。成果物は、プロジェクトの各フェーズで作成され、レビュー・承認を経て、正式な成果物として確定します。"
        },
        {
          "type": "table",
          "headers": ["フェーズ", "成果物", "レビュー・承認者", "承認基準"],
          "rows": [
            ["要件定義", "要件定義書", "業務部門、プロジェクトスポンサー", "全ての要件が網羅されている"],
            ["外部設計", "外部設計書(画面設計、帳票設計)", "業務部門", "業務要件を満たす設計になっている"],
            ["内部設計", "内部設計書(DB設計、処理フロー)", "開発チーム", "技術的に実現可能、保守性が高い"],
            ["開発", "プログラムコード", "開発チーム", "コーディング規約に準拠、単体テスト合格"],
            ["テスト", "テスト結果報告書", "テスト担当、業務部門", "全てのテストケースが合格"],
            ["移行", "本番稼働報告書", "プロジェクトスポンサー", "システムが本番環境で正常稼働"]
          ]
        },
        {
          "type": "example",
          "title": "成果物の承認プロセスの具体例:要件定義書の承認",
          "content": "【背景】\n販売管理システムの要件定義フェーズが完了し、要件定義書をステークホルダに承認してもらう。\n\n【要件定義書の内容】\n①業務要件:受注管理、出荷管理、請求管理、在庫管理の業務フロー、業務ルール\n②機能要件:各画面の機能、入力項目、出力項目、処理ロジック(全150項目)\n③非機能要件:性能(応答時間1秒以内)、セキュリティ(SSL通信)、可用性(稼働率99.9%)\n\n【レビュー・承認プロセス】\n①開発チームによる内部レビュー(2025年5月20日):\n  - プロジェクトマネージャ、システムアーキテクト、開発リーダーで内容を確認\n  - 指摘事項:10件(用語の統一、要件の曖昧さ)\n  - 指摘事項を修正 → 要件定義書v1.5.0\n\n②業務部門によるレビュー(2025年5月25日):\n  - 営業部、物流部の担当者(各2名)で内容を確認\n  - 指摘事項:5件(業務フローの修正、機能要件の追加)\n  - 指摘事項を修正 → 要件定義書v1.6.0\n\n③プロジェクトスポンサーによる承認(2025年6月1日):\n  - 営業本部長が最終承認\n  - 確認内容:\n    a. 全ての業務要件が網羅されているか\n    b. 機能要件が業務要件を満たしているか\n    c. 非機能要件(性能、セキュリティ)が妥当か\n    d. スケジュール・コストに影響がないか\n  - 承認結果:承認(要件定義書v1.6.0をベースラインとして確定)\n  - 承認記録:承認日2025年6月1日、承認者:営業本部長 佐藤\n\n④ベースラインの確定:\n  - 要件定義書v1.6.0を「スコープベースライン」として確定\n  - 以降の変更は、変更管理プロセスで承認が必要\n\n⑤ステークホルダへの通知:\n  - 要件定義が完了したことを、全ステークホルダに通知\n  - 次のフェーズ(外部設計)を開始"
        },
        {
          "type": "example",
          "title": "成果物の管理:成果物管理台帳",
          "content": "【成果物管理台帳の例】\n販売管理システム刷新プロジェクトで作成する成果物を一覧管理。\n\n成果物ID:D-001\n成果物名:プロジェクト計画書\n担当者:プロジェクトマネージャ 山田\n予定完成日:2025年4月15日\n実績完成日:2025年4月15日\nバージョン:v1.0.0\nステータス:承認済み\n承認者:プロジェクトスポンサー 佐藤\n承認日:2025年4月15日\n\n成果物ID:D-002\n成果物名:要件定義書\n担当者:システムアーキテクト 田中\n予定完成日:2025年6月1日\n実績完成日:2025年6月1日\nバージョン:v1.6.0\nステータス:承認済み\n承認者:プロジェクトスポンサー 佐藤\n承認日:2025年6月1日\n\n成果物ID:D-003\n成果物名:外部設計書\n担当者:システムアーキテクト 田中\n予定完成日:2025年8月1日\n実績完成日:-\nバージョン:v0.5.0(ドラフト)\nステータス:レビュー中\n承認者:業務部門 鈴木\n承認日:-\n\n成果物ID:D-004\n成果物名:内部設計書\n担当者:開発リーダー 高橋\n予定完成日:2025年9月1日\n実績完成日:-\nバージョン:v0.1.0(ドラフト)\nステータス:作成中\n承認者:開発チーム\n承認日:-\n\n【成果物管理台帳の効果】\n①全ての成果物の状況を一覧で把握できる\n②スケジュール遅延を早期に発見できる(予定完成日と実績完成日の差)\n③承認状況を追跡できる(未承認の成果物を特定)"
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "成果物の品質を確保するレビュー手法",
          "content": "成果物の品質を確保するために、レビューが不可欠です。代表的なレビュー手法として、①インスペクション(Inspection):正式なレビュー会議。レビュー担当者が事前に成果物を読み込み、会議で指摘事項を議論。厳格だが時間がかかる。②ウォークスルー(Walkthrough):作成者が成果物を説明し、参加者が質問・指摘。インスペクションより軽量。③ピアレビュー(Peer Review):同僚同士で相互レビュー。気軽に実施できる。レビューの効果として、①バグを早期に発見(テスト前にバグを発見すれば、修正コストが低い)、②知識の共有(レビュー参加者全員が成果物を理解)、③品質の向上、があります。レビューは、各フェーズの終了時(マイルストーン)に実施するのが一般的です。"
        },
        {
          "type": "table",
          "headers": ["レビュー手法", "実施タイミング", "参加者", "特徴"],
          "rows": [
            ["インスペクション", "重要な成果物(要件定義書、設計書)", "レビュー担当者、作成者、モデレータ", "正式な会議。事前準備が必要。厳格"],
            ["ウォークスルー", "中程度の成果物(画面設計、テスト計画書)", "関係者全員", "作成者が説明。質問・指摘を受ける"],
            ["ピアレビュー", "プログラムコード、文書", "同僚2~3名", "気軽に実施。短時間で完了"],
            ["デスクチェック", "プログラムコード", "作成者本人", "自分で見直す。最も基本的なレビュー"]
          ]
        }
      ]
    }
  ]
}
