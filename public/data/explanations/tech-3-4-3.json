{
  "topicId": "tech-3-4-3",
  "title": "通信プロトコル",
  "pages": [
    {
      "id": 1,
      "title": "TCP/IPの階層モデルとプロトコルの基礎",
      "sections": [
        {
          "type": "text",
          "content": "**通信プロトコル**とは、コンピュータ同士がネットワークで通信する際の「約束事」です。プロトコル（Protocol）という言葉は「手順」「規約」を意味し、データの形式、送受信の手順、エラー処理などのルールを定めています。インターネットで使われる通信プロトコルの代表が**TCP/IP**です。TCP/IPは、単一のプロトコルではなく、複数のプロトコルを階層構造で組み合わせたプロトコル群（プロトコルスイート）です。"
        },
        {
          "type": "table",
          "headers": ["TCP/IPの階層", "主な役割", "代表的なプロトコル"],
          "rows": [
            ["アプリケーション層（第4層）", "アプリケーションごとの通信サービス", "HTTP、HTTPS、FTP、SMTP、POP3、DNS"],
            ["トランスポート層（第3層）", "データの信頼性確保、ポート番号による識別", "TCP、UDP"],
            ["インターネット層（第2層）", "ネットワーク間のデータ配送（ルーティング）", "IP、ARP、ICMP"],
            ["ネットワークインターフェース層（第1層）", "物理的なデータ送受信", "イーサネット、Wi-Fi"]
          ]
        },
        {
          "type": "text",
          "content": "TCP/IPモデルは4階層で構成されます。各階層は独立しており、上位層は下位層のサービスを利用します（カプセル化）。例えば、Webブラウザ（アプリケーション層）でWebサイトにアクセスする際、HTTPプロトコルがデータを作成し、TCP（トランスポート層）がデータを分割・管理し、IP（インターネット層）がデータを宛先に配送し、イーサネット（ネットワークインターフェース層）が物理的に送信します。この階層構造により、各層を独立して開発・改良できるため、柔軟性が高くなります。"
        },
        {
          "type": "example",
          "title": "Webアクセス時のTCP/IP階層の動作",
          "content": "【シナリオ】あなたのPC（192.168.1.10）から、Webサーバ（example.com、203.0.113.5）にアクセスする場合の各階層の役割を見てみましょう。\n\n【アプリケーション層】\n①ブラウザが「http://example.com」にアクセス要求を送る\n②HTTPプロトコルでリクエストを作成：「GET / HTTP/1.1\\nHost: example.com」\n\n【トランスポート層】\n①TCPが、HTTPリクエストを複数のセグメント（データの断片）に分割\n②各セグメントに、送信元ポート番号（49152）、宛先ポート番号（80: HTTP用）、シーケンス番号を付加\n③受信側で正しく再構築できるように、順序管理とエラーチェックを実施\n\n【インターネット層】\n①IPが、TCPセグメントをパケットに格納\n②パケットのIPヘッダに、送信元IPアドレス（192.168.1.10）、宛先IPアドレス（203.0.113.5）を付加\n③ルータを経由して、宛先ネットワークまで配送\n\n【ネットワークインターフェース層】\n①イーサネットが、IPパケットをフレームに格納\n②フレームのヘッダに、送信元MACアドレス、宛先MACアドレスを付加\n③物理的なケーブル（またはWi-Fi）でデータを送信\n\n【受信側（Webサーバ）の処理】\n①ネットワークインターフェース層: フレームを受信し、MACアドレスを確認してIPパケットを取り出す\n②インターネット層: IPパケットからTCPセグメントを取り出す\n③トランスポート層: TCPセグメントを順序通りに組み立て、HTTPリクエストを復元\n④アプリケーション層: Webサーバが、HTTPリクエストを処理し、HTMLファイルをレスポンスとして返す\n\nこのように、各階層が役割分担して、データを確実に送受信します。"
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "OSI参照モデルとの違い",
          "content": "通信プロトコルの理論モデルとして、国際標準化機構（ISO）が定めた**OSI参照モデル**（7階層）があります。OSI参照モデルは、アプリケーション層、プレゼンテーション層、セッション層、トランスポート層、ネットワーク層、データリンク層、物理層の7階層です。TCP/IPモデル（4階層）は、OSI参照モデルの実用版と言えます。TCP/IPのアプリケーション層は、OSIの第5～7層に対応し、TCP/IPのネットワークインターフェース層は、OSIの第1～2層に対応します。実際のインターネットでは、TCP/IPモデルが広く使われています。"
        }
      ]
    },
    {
      "id": 2,
      "title": "TCP vs UDP：信頼性のある通信と高速な通信",
      "sections": [
        {
          "type": "text",
          "content": "**トランスポート層**では、アプリケーション間のデータ転送を管理します。代表的なプロトコルが**TCP**（Transmission Control Protocol）と**UDP**（User Datagram Protocol）です。TCPは「信頼性重視」、UDPは「速度重視」という特徴があり、用途に応じて使い分けられます。"
        },
        {
          "type": "table",
          "headers": ["項目", "TCP", "UDP"],
          "rows": [
            ["接続方式", "コネクション型（3ウェイハンドシェイクで接続確立）", "コネクションレス型（接続確立なし）"],
            ["信頼性", "高い（データの到達保証、順序保証、エラー訂正）", "低い（データの到達保証なし、順序保証なし）"],
            ["速度", "遅い（確認応答、再送制御のオーバーヘッド）", "速い（オーバーヘッドが少ない）"],
            ["データ単位", "セグメント", "データグラム"],
            ["代表的な用途", "Webアクセス（HTTP/HTTPS）、メール送信（SMTP）、ファイル転送（FTP）", "動画配信（ストリーミング）、VoIP（IP電話）、DNS問い合わせ、オンラインゲーム"],
            ["ポート番号の例", "HTTP: 80、HTTPS: 443、SMTP: 25、FTP: 21", "DNS: 53、DHCP: 67/68"]
          ]
        },
        {
          "type": "text",
          "content": "**TCPの特徴：信頼性のある通信**\nTCPは、データが確実に届くことを保証します。具体的には、①**3ウェイハンドシェイク**：通信開始前に、送信側と受信側が接続を確立（SYN → SYN-ACK → ACK）、②**確認応答（ACK）**：受信側が、データを受け取ったことを送信側に通知、③**再送制御**：ACKが届かない場合、送信側が自動的にデータを再送、④**順序制御**：シーケンス番号により、データを正しい順序で再構築、⑤**フロー制御**：受信側のバッファ（一時記憶領域）が溢れないように、送信速度を調整（ウィンドウ制御）、⑥**輻輳制御**：ネットワークの混雑を検知し、送信速度を調整、などの機能があります。これらの機能により、データが欠落・重複・順序違いなく、確実に届きます。"
        },
        {
          "type": "text",
          "content": "**UDPの特徴：高速な通信**\nUDPは、TCPのような確認応答や再送制御を行わず、データをそのまま送信します。信頼性は低いですが、オーバーヘッド（余分な処理）が少ないため、高速です。動画配信やIP電話など、リアルタイム性が重要で、多少のデータ欠落は許容できる用途に適しています。例えば、動画配信では、1フレームが欠落しても次のフレームで補完されるため、UDPが使われます。また、DNS問い合わせも、1回の問い合わせでデータ量が少なく、再送が簡単なため、UDPが使われます。"
        },
        {
          "type": "example",
          "title": "TCPの3ウェイハンドシェイク",
          "content": "【3ウェイハンドシェイクの流れ】\nTCPは、通信開始前に、送信側（クライアント）と受信側（サーバ）が接続を確立します。この手順を「3ウェイハンドシェイク」と呼びます。\n\n①クライアント → サーバ: SYN（Synchronize）\n  クライアントが、サーバに接続要求を送る。「これから通信を始めたい」という意思表示。\n  - SYNフラグ = 1（接続要求）\n  - シーケンス番号 = 1000（初期値）\n\n②サーバ → クライアント: SYN-ACK（Synchronize-Acknowledgment）\n  サーバが、接続要求を受け入れ、確認応答を返す。「接続を受け入れます」という意思表示。\n  - SYNフラグ = 1（接続要求）\n  - ACKフラグ = 1（確認応答）\n  - シーケンス番号 = 2000（サーバ側の初期値）\n  - 確認応答番号 = 1001（クライアントの次のシーケンス番号）\n\n③クライアント → サーバ: ACK（Acknowledgment）\n  クライアントが、サーバの確認応答を受け取ったことを通知。「準備OK、通信を開始します」という意思表示。\n  - ACKフラグ = 1（確認応答）\n  - 確認応答番号 = 2001（サーバの次のシーケンス番号）\n\n【3ウェイハンドシェイク完了後】\n接続が確立され、データの送受信が開始されます。データ送信後、4ウェイハンドシェイク（FIN → ACK → FIN → ACK）で接続を終了します。\n\n【なぜ3回なのか？】\n2回では、サーバの接続受け入れをクライアントが確認できません。3回にすることで、双方が「接続OK」を確認できます。"
        },
        {
          "type": "highlight",
          "icon": "🔧",
          "title": "ポート番号による多重化",
          "content": "**ポート番号**（0～65535の16ビット整数）は、1台のコンピュータ上で複数のアプリケーションを識別します。例えば、WebブラウザとメールソフトとFTPクライアントを同時に使う場合、それぞれ異なるポート番号で通信します。ポート番号は、①ウェルノウンポート（0～1023）：代表的なサービス用（HTTP: 80、HTTPS: 443、SMTP: 25、FTP: 21、SSH: 22、DNS: 53）、②レジスタードポート（1024～49151）：アプリケーション用、③ダイナミックポート（49152～65535）：クライアント側の一時的なポート、の3種類に分類されます。通信は「IPアドレス + ポート番号」のペア（ソケット）で識別されます。"
        }
      ]
    },
    {
      "id": 3,
      "title": "IPアドレスとサブネットマスク：ネットワークの住所",
      "sections": [
        {
          "type": "text",
          "content": "**IPアドレス**（Internet Protocol Address）は、ネットワーク上の各機器を識別するための「住所」です。現在、**IPv4**（32ビット）と**IPv6**（128ビット）の2種類が使われています。IPv4アドレスは、枯渇（使い果たされる）が進んでおり、IPv6への移行が進められています。"
        },
        {
          "type": "table",
          "headers": ["項目", "IPv4", "IPv6"],
          "rows": [
            ["アドレス長", "32ビット", "128ビット"],
            ["表記法", "10進数のドット区切り（例: 192.168.1.1）", "16進数のコロン区切り（例: 2001:0db8:0000:0000:0000:ff00:0042:8329）"],
            ["アドレス総数", "約43億個（2^32）", "約340澗個（2^128、事実上無限）"],
            ["枯渇問題", "枯渇が進行中（2011年にアジア太平洋地域で枯渇）", "十分な数があり、枯渇の心配なし"],
            ["アドレス例", "192.168.1.1（プライベートアドレス）、203.0.113.1（グローバルアドレス）", "2001:db8::1（省略形）"]
          ]
        },
        {
          "type": "text",
          "content": "**IPv4アドレスの構造**\nIPv4アドレスは、32ビット（4バイト）の数値で、8ビットずつ4つに区切って、10進数で表記します（例: 192.168.1.1）。IPv4アドレスは、**ネットワーク部**（どのネットワークに属するか）と**ホスト部**（ネットワーク内のどの機器か）に分かれます。ネットワーク部とホスト部の境界は、**サブネットマスク**で指定します。サブネットマスクは、ネットワーク部が1、ホスト部が0のビット列です（例: 255.255.255.0 = 11111111.11111111.11111111.00000000）。"
        },
        {
          "type": "example",
          "title": "IPv4アドレスとサブネットマスクの計算",
          "content": "【例1】IPアドレス: 192.168.1.10、サブネットマスク: 255.255.255.0の場合\n\n①2進数に変換:\n  IPアドレス:       11000000.10101000.00000001.00001010\n  サブネットマスク: 11111111.11111111.11111111.00000000\n\n②ネットワーク部とホスト部を分ける:\n  ネットワーク部: 11000000.10101000.00000001（192.168.1）\n  ホスト部:       00001010（10）\n\n③ネットワークアドレス（ホスト部を全て0にしたもの）:\n  192.168.1.0\n\n④ブロードキャストアドレス（ホスト部を全て1にしたもの）:\n  192.168.1.255\n\n⑤このネットワークで使えるホスト数:\n  ホスト部が8ビット → 2^8 = 256個\n  ただし、ネットワークアドレス（192.168.1.0）とブロードキャストアドレス（192.168.1.255）は使えないため、実際に使えるのは254個（192.168.1.1～192.168.1.254）\n\n【例2】CIDR表記: 192.168.1.0/24\nサブネットマスクを、「/」の後にネットワーク部のビット数で表記する方法を**CIDR表記**（Classless Inter-Domain Routing）と呼びます。\n\n/24 = ネットワーク部が24ビット = サブネットマスク 255.255.255.0\n/16 = ネットワーク部が16ビット = サブネットマスク 255.255.0.0\n/8  = ネットワーク部が8ビット  = サブネットマスク 255.0.0.0\n\nCIDR表記により、サブネットマスクを簡潔に表現できます。"
        },
        {
          "type": "text",
          "content": "**プライベートアドレスとグローバルアドレス**\nIPv4アドレスは、①**プライベートアドレス**（Private IP Address）：組織内のネットワーク（LAN）で使用、インターネットには接続できない、②**グローバルアドレス**（Global IP Address）：インターネット上で一意に識別される、世界中で使える、の2種類があります。プライベートアドレスの範囲は、10.0.0.0～10.255.255.255（/8、クラスA）、172.16.0.0～172.31.255.255（/12、クラスB）、192.168.0.0～192.168.255.255（/16、クラスC）、の3つです。組織内では、プライベートアドレスを使い、インターネットに接続する際は、**NAT**（Network Address Translation）でプライベートアドレスをグローバルアドレスに変換します。"
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "IPv6の特徴",
          "content": "**IPv6**は、IPv4アドレスの枯渇問題を解決するために開発されました。IPv6アドレスは128ビットで、340澗個（340兆の1兆倍の1兆倍）のアドレスがあり、事実上無限です。IPv6アドレスは、16進数のコロン区切りで表記します（例: 2001:0db8:0000:0000:0000:ff00:0042:8329）。連続する0は省略できます（例: 2001:db8::ff00:42:8329）。IPv6の利点は、①アドレス数が豊富、②ヘッダが簡素化され、処理が高速、③セキュリティ機能（IPsec）が標準装備、④自動アドレス設定（SLAAC）が可能、などです。現在、IPv4とIPv6が共存しており、デュアルスタック（両方をサポート）やトンネリング（IPv6パケットをIPv4パケットにカプセル化）で移行が進められています。"
        }
      ]
    },
    {
      "id": 4,
      "title": "DNS：ドメイン名とIPアドレスの変換",
      "sections": [
        {
          "type": "text",
          "content": "**DNS**（Domain Name System）は、ドメイン名（例: www.example.com）とIPアドレス（例: 203.0.113.5）を相互変換するシステムです。人間は、数字の羅列（IPアドレス）より、文字列（ドメイン名）の方が覚えやすいため、Webサイトにアクセスする際は、ドメイン名を使います。DNSは、ドメイン名をIPアドレスに変換する「インターネットの住所録」の役割を果たします。"
        },
        {
          "type": "example",
          "title": "DNSの名前解決の流れ",
          "content": "【シナリオ】あなたのPC（192.168.1.10）のブラウザで、「http://www.example.com」にアクセスする場合、DNSがどのように動作するかを見てみましょう。\n\n①ブラウザが、「www.example.com」のIPアドレスを知りたい\n②PCが、DNSキャッシュ（過去の名前解決結果を保存）を確認 → キャッシュに無い場合、次へ\n③PCが、DNSリゾルバ（DNSクライアント）を使って、DNSサーバ（通常はISPが提供）に問い合わせ\n  - 問い合わせ: 「www.example.comのIPアドレスを教えて」\n  - プロトコル: UDP、ポート番号: 53\n④DNSサーバが、キャッシュを確認 → 無い場合、次へ\n⑤DNSサーバが、ルートDNSサーバ（世界に13台、.comや.jpなどのトップレベルドメインを管理）に問い合わせ\n  - 問い合わせ: 「www.example.comのIPアドレスを教えて」\n  - ルートDNSサーバの回答: 「.comのDNSサーバに聞いてください（例: 192.0.2.10）」\n⑥DNSサーバが、.comのDNSサーバに問い合わせ\n  - 問い合わせ: 「www.example.comのIPアドレスを教えて」\n  - .comのDNSサーバの回答: 「example.comのDNSサーバに聞いてください（例: 198.51.100.20）」\n⑦DNSサーバが、example.comのDNSサーバ（権威DNSサーバ）に問い合わせ\n  - 問い合わせ: 「www.example.comのIPアドレスを教えて」\n  - example.comのDNSサーバの回答: 「203.0.113.5です」\n⑧DNSサーバが、PCに回答\n  - 回答: 「www.example.comのIPアドレスは203.0.113.5です」\n  - キャッシュに保存（次回の問い合わせを高速化）\n⑨PCが、203.0.113.5にHTTPリクエストを送信\n\n【名前解決の種類】\n①正引き: ドメイン名 → IPアドレス（上記の例）\n②逆引き: IPアドレス → ドメイン名（例: 203.0.113.5 → www.example.com）\n\nDNSにより、ドメイン名でWebサイトにアクセスでき、IPアドレスを覚える必要がありません。"
        },
        {
          "type": "text",
          "content": "**DNSレコードの種類**\nDNSサーバは、ドメイン名とIPアドレスの対応関係を、**DNSレコード**として保存します。代表的なDNSレコードは、①**Aレコード**（Address Record）：ドメイン名とIPv4アドレスの対応、②**AAAAレコード**（AAAA Record）：ドメイン名とIPv6アドレスの対応、③**MXレコード**（Mail Exchange Record）：メールサーバのドメイン名、④**CNAMEレコード**（Canonical Name Record）：ドメイン名の別名（エイリアス）、⑤**NSレコード**（Name Server Record）：権威DNSサーバのドメイン名、などです。"
        },
        {
          "type": "table",
          "headers": ["DNSレコード", "用途", "例"],
          "rows": [
            ["Aレコード", "ドメイン名 → IPv4アドレス", "www.example.com → 203.0.113.5"],
            ["AAAAレコード", "ドメイン名 → IPv6アドレス", "www.example.com → 2001:db8::1"],
            ["MXレコード", "メールサーバのドメイン名", "example.com → mail.example.com（優先度: 10）"],
            ["CNAMEレコード", "ドメイン名の別名", "blog.example.com → www.example.com"],
            ["NSレコード", "権威DNSサーバ", "example.com → ns1.example.com"]
          ]
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "DNSキャッシュとTTL",
          "content": "DNSの名前解決は、毎回ルートDNSサーバから問い合わせると時間がかかるため、DNSサーバやPCは、**DNSキャッシュ**（名前解決結果を一時保存）を持ちます。キャッシュにより、2回目以降の名前解決が高速化されます。キャッシュの有効期間は、**TTL**（Time To Live、生存時間）で指定されます（例: 3600秒 = 1時間）。TTLが過ぎると、キャッシュは削除され、再度名前解決が実行されます。Webサイトのサーバを移転する際は、TTLを短く設定することで、移転後のIPアドレスに素早く切り替えられます。"
        }
      ]
    },
    {
      "id": 5,
      "title": "DHCP、ARP、NAT：ネットワークの自動設定と変換",
      "sections": [
        {
          "type": "text",
          "content": "ネットワークを使う際、IPアドレスやサブネットマスク、デフォルトゲートウェイ、DNSサーバなどの設定が必要です。これらを手動で設定するのは手間がかかるため、**DHCP**（Dynamic Host Configuration Protocol）が自動的に設定します。また、IPアドレスとMACアドレスの対応関係を調べる**ARP**、プライベートアドレスとグローバルアドレスを変換する**NAT**も、ネットワークの重要なプロトコルです。"
        },
        {
          "type": "example",
          "title": "DHCPによる自動IP設定の流れ",
          "content": "【シナリオ】あなたのPC（MACアドレス: AA:BB:CC:DD:EE:FF）を、会社のネットワーク（192.168.1.0/24）に接続する場合、DHCPがどのように動作するかを見てみましょう。\n\n①PC起動時、PCが、DHCPサーバ（192.168.1.1）を探す\n  - DHCP Discover: ブロードキャスト（255.255.255.255）で、「DHCPサーバはいますか？」と問い合わせ\n  - プロトコル: UDP、送信元ポート: 68、宛先ポート: 67\n\n②DHCPサーバが、PCに応答\n  - DHCP Offer: 「IPアドレス 192.168.1.100 を提供します」と提案\n  - サブネットマスク: 255.255.255.0\n  - デフォルトゲートウェイ: 192.168.1.1（ルータのIPアドレス）\n  - DNSサーバ: 192.168.1.1\n  - リース期間: 86400秒（24時間）\n\n③PCが、DHCPサーバに要求\n  - DHCP Request: 「192.168.1.100 を使いたいです」と要求\n\n④DHCPサーバが、PCに承認\n  - DHCP ACK: 「192.168.1.100 を使ってください」と承認\n  - PCのIPアドレスが、192.168.1.100 に設定される\n\n【リース期間】\nDHCPで割り当てられたIPアドレスは、リース期間（例: 24時間）が経過すると、自動的に更新されます。PCがシャットダウンすると、IPアドレスはDHCPサーバに返却され、他のPCが使えるようになります。\n\n【DHCPのメリット】\n①IPアドレスを手動で設定する手間が不要\n②IPアドレスの重複を防げる\n③ネットワーク設定を一元管理できる（DHCPサーバで、IPアドレスの範囲、リース期間、DNSサーバを設定）\n\n家庭のWi-Fiルータも、DHCPサーバ機能を持っており、スマホやPCを接続すると、自動的にIPアドレスが割り当てられます。"
        },
        {
          "type": "text",
          "content": "**ARP：IPアドレスとMACアドレスの対応**\n**ARP**（Address Resolution Protocol）は、IPアドレスから、対応する**MACアドレス**（Media Access Control Address、物理アドレス）を調べるプロトコルです。MACアドレスは、ネットワークインターフェースカード（NIC）に固有の48ビット（6バイト）のアドレスで、16進数のコロン区切りで表記します（例: AA:BB:CC:DD:EE:FF）。イーサネット（ネットワークインターフェース層）では、MACアドレスでデータを送受信するため、IPアドレスだけでは通信できません。ARPにより、IPアドレスとMACアドレスを対応付けます。"
        },
        {
          "type": "example",
          "title": "ARPの動作例",
          "content": "【シナリオ】PC（192.168.1.10、MACアドレス: AA:BB:CC:DD:EE:FF）が、サーバ（192.168.1.20）にデータを送る場合、ARPがどのように動作するかを見てみましょう。\n\n①PCが、サーバ（192.168.1.20）のMACアドレスを調べたい\n②PCが、ARPキャッシュ（過去のARP結果を保存）を確認 → キャッシュに無い場合、次へ\n③PCが、ARPリクエストをブロードキャスト（ネットワーク全体に送信）\n  - ARPリクエスト: 「192.168.1.20のMACアドレスを教えて」\n  - 送信元MACアドレス: AA:BB:CC:DD:EE:FF（PC）\n  - 宛先MACアドレス: FF:FF:FF:FF:FF:FF（ブロードキャスト）\n④サーバ（192.168.1.20、MACアドレス: 11:22:33:44:55:66）が、ARPリプライを返す\n  - ARPリプライ: 「192.168.1.20のMACアドレスは11:22:33:44:55:66です」\n  - 送信元MACアドレス: 11:22:33:44:55:66（サーバ）\n  - 宛先MACアドレス: AA:BB:CC:DD:EE:FF（PC）\n⑤PCが、ARPキャッシュに保存（192.168.1.20 → 11:22:33:44:55:66）\n⑥PCが、イーサネットフレームでデータを送信\n  - 送信元MACアドレス: AA:BB:CC:DD:EE:FF（PC）\n  - 宛先MACアドレス: 11:22:33:44:55:66（サーバ）\n\nARPにより、IPアドレスからMACアドレスを調べ、イーサネットでデータを送信できます。"
        },
        {
          "type": "text",
          "content": "**NAT：プライベートアドレスとグローバルアドレスの変換**\n**NAT**（Network Address Translation）は、プライベートアドレスとグローバルアドレスを相互変換する技術です。組織内のネットワーク（LAN）では、プライベートアドレス（例: 192.168.1.0/24）を使い、インターネットに接続する際は、ルータ（またはファイアウォール）がNATで、プライベートアドレスをグローバルアドレスに変換します。NATにより、①グローバルアドレスの節約（複数の機器が1つのグローバルアドレスを共有）、②セキュリティ向上（外部から内部の機器に直接アクセスできない）、などの効果があります。"
        },
        {
          "type": "example",
          "title": "NATの動作例（NAPT/IPマスカレード）",
          "content": "【シナリオ】会社のLAN（192.168.1.0/24）内のPC1（192.168.1.10）とPC2（192.168.1.20）が、インターネット上のWebサーバ（203.0.113.5）にアクセスする場合、NATがどのように動作するかを見てみましょう。会社のルータのグローバルアドレスは、198.51.100.1とします。\n\n【PC1からWebサーバへのアクセス】\n①PC1（192.168.1.10）が、Webサーバ（203.0.113.5）にHTTPリクエストを送信\n  - 送信元IPアドレス: 192.168.1.10\n  - 送信元ポート番号: 49152（ダイナミックポート）\n  - 宛先IPアドレス: 203.0.113.5\n  - 宛先ポート番号: 80（HTTP）\n②ルータ（NAT機能）が、送信元IPアドレスとポート番号を変換\n  - 送信元IPアドレス: 192.168.1.10 → 198.51.100.1（グローバルアドレス）\n  - 送信元ポート番号: 49152 → 50001（ルータが割り当て）\n  - NATテーブルに記録: 198.51.100.1:50001 ↔ 192.168.1.10:49152\n③変換後のパケットが、インターネット経由でWebサーバに送信\n  - 送信元: 198.51.100.1:50001\n  - 宛先: 203.0.113.5:80\n④Webサーバが、レスポンスを返す\n  - 送信元: 203.0.113.5:80\n  - 宛先: 198.51.100.1:50001\n⑤ルータ（NAT機能）が、NATテーブルを参照して、宛先IPアドレスとポート番号を変換\n  - 宛先IPアドレス: 198.51.100.1 → 192.168.1.10\n  - 宛先ポート番号: 50001 → 49152\n⑥変換後のパケットが、PC1に送信\n\n【PC2からWebサーバへのアクセス】\n同様に、PC2（192.168.1.20:49200）のパケットは、ルータで198.51.100.1:50002に変換され、Webサーバに送信されます。\n\n【NAPT/IPマスカレード】\nIPアドレスだけでなく、ポート番号も変換する方式を**NAPT**（Network Address Port Translation）または**IPマスカレード**と呼びます。NAPTにより、1つのグローバルアドレスで、複数の機器が同時にインターネットにアクセスできます。"
        },
        {
          "type": "highlight",
          "icon": "🔧",
          "title": "通信プロトコルのまとめ",
          "content": "通信プロトコルは、階層構造で役割分担しています。①**TCP/IP階層モデル**：アプリケーション層、トランスポート層、インターネット層、ネットワークインターフェース層、②**TCP vs UDP**：信頼性重視のTCP、速度重視のUDP、③**IPアドレス**：ネットワークの住所（IPv4、IPv6）、④**DNS**：ドメイン名とIPアドレスの変換、⑤**DHCP**：IPアドレスの自動設定、⑥**ARP**：IPアドレスとMACアドレスの対応、⑦**NAT**：プライベートアドレスとグローバルアドレスの変換。これらのプロトコルが連携して、インターネット通信を実現しています。各プロトコルの役割と動作を理解することが、基本情報技術者試験での出題ポイントです。"
        }
      ]
    }
  ]
}
