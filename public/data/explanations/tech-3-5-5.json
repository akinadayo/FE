{
  "topicId": "tech-3-5-5",
  "title": "セキュリティ対策",
  "pages": [
    {
      "id": 1,
      "title": "ファイアウォールとパケットフィルタリング",
      "sections": [
        {
          "type": "text",
          "content": "**ファイアウォール（Firewall）**とは、内部ネットワークと外部ネットワーク（インターネット）の境界に設置し、不正なアクセスを防ぐセキュリティ装置です。ファイアウォールは、「防火壁」という意味で、内部ネットワークを外部の脅威から守ります。ファイアウォールは、通信を監視し、あらかじめ設定されたルール（ポリシー）に基づいて、通信を許可または遮断します。ファイアウォールには、①**パケットフィルタリング型**、②**アプリケーションゲートウェイ型**、③**次世代ファイアウォール（NGFW）**、の3種類があります。"
        },
        {
          "type": "example",
          "title": "パケットフィルタリング型ファイアウォールの仕組み",
          "content": "【パケットフィルタリング（Packet Filtering）】\nパケットフィルタリングとは、IPパケットのヘッダ情報（送信元IPアドレス、宛先IPアドレス、送信元ポート番号、宛先ポート番号、プロトコル）を検査し、通信を許可・遮断する方式です。\n\n【具体例：企業の内部ネットワーク】\n①外部からのHTTP（ポート80）、HTTPS（ポート443）の通信を許可 → Webサーバへのアクセスを許可\n②外部からのSSH（ポート22）の通信を遮断 → サーバへの不正ログインを防止\n③内部から外部へのすべての通信を許可 → 社員がインターネットを利用できる\n④外部から内部への通信は、社内Webサーバ（192.168.1.100:80）へのアクセスのみ許可 → 他のサーバへの不正アクセスを防止\n\n【フィルタリングルールの例】\n┌─────┬────────┬────────┬────┬────┬──────┐\n│番号│送信元IP    │宛先IP      │ポート│プロトコル│動作  │\n├─────┼────────┼────────┼────┼────┼──────┤\n│1   │any         │192.168.1.100│80  │TCP │許可  │\n│2   │any         │192.168.1.100│443 │TCP │許可  │\n│3   │192.168.1.0/24│any       │any │any │許可  │\n│4   │any         │any         │22  │TCP │遮断  │\n│5   │any         │any         │any │any │遮断  │\n└─────┴────────┴────────┴────┴────┴──────┘\n\nルールは上から順に評価され、最初にマッチしたルールが適用されます。"
        },
        {
          "type": "table",
          "headers": ["ファイアウォールの種類", "検査内容", "処理速度", "特徴"],
          "rows": [
            ["パケットフィルタリング型", "IPヘッダ情報（IPアドレス、ポート番号、プロトコル）", "高速", "シンプルだが、アプリケーション層の攻撃（SQLインジェクション）は検知できない"],
            ["アプリケーションゲートウェイ型", "アプリケーション層のデータ内容（HTTP、FTP、SMTP）", "低速", "アプリケーション層の攻撃を検知できるが、処理が遅い"],
            ["次世代ファイアウォール（NGFW）", "パケットフィルタリング + アプリケーション層検査 + IPS + URLフィルタリング", "中速", "パケットフィルタリングとアプリケーション層検査を組み合わせ、高度な脅威に対応"]
          ]
        },
        {
          "type": "example",
          "title": "アプリケーションゲートウェイ型ファイアウォールの具体例",
          "content": "【アプリケーションゲートウェイ（プロキシ型ファイアウォール）】\nクライアントとサーバの間に「プロキシサーバ」を置き、通信を中継する方式です。プロキシサーバがアプリケーション層のデータ内容を検査します。\n\n【具体例：Webアクセスのフィルタリング】\n①社員がブラウザで「http://example.com」にアクセス\n②ブラウザはプロキシサーバにHTTPリクエストを送信\n③プロキシサーバがHTTPリクエストの内容を検査\n  - URLフィルタリング：「example.com」が許可リストにあるか確認\n  - ウイルススキャン：ダウンロードするファイルにウイルスが含まれていないか確認\n  - SQLインジェクション検査：HTTPリクエストに不正なSQL文が含まれていないか確認\n④問題がなければ、プロキシサーバが実際のWebサーバにHTTPリクエストを転送\n⑤Webサーバからの応答をプロキシサーバが受信し、検査してから社員のブラウザに転送\n\n【利点】\n①アプリケーション層の攻撃（SQLインジェクション、XSS）を検知できる\n②URLフィルタリングで、悪意のあるサイトへのアクセスをブロックできる\n③ログを詳細に記録できる（誰が、いつ、どのサイトにアクセスしたか）\n\n【欠点】\n①処理が遅い（データ内容を詳細に検査するため）\n②プロキシサーバが高負荷になると、ボトルネックになる"
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "パケットフィルタリングとアプリケーションゲートウェイの違い",
          "content": "パケットフィルタリング型は、IPヘッダ情報のみを検査するため、高速ですが、アプリケーション層の攻撃（SQLインジェクション、XSS）を検知できません。アプリケーションゲートウェイ型は、アプリケーション層のデータ内容を検査するため、高度な攻撃を検知できますが、処理が遅くなります。次世代ファイアウォール（NGFW）は、両方の機能を組み合わせ、高速かつ高度な脅威に対応します。"
        }
      ]
    },
    {
      "id": 2,
      "title": "IDS/IPS（侵入検知・防止システム）とWAF",
      "sections": [
        {
          "type": "text",
          "content": "**IDS（Intrusion Detection System、侵入検知システム）**とは、ネットワークやホストへの不正なアクセスや攻撃を検知し、管理者に通知するシステムです。IDSは、攻撃を「検知」するだけで、「防止」はしません。**IPS（Intrusion Prevention System、侵入防止システム）**は、IDSの機能に加えて、攻撃を自動的に「防止（遮断）」するシステムです。IDSとIPSは、設置場所によって、①**ネットワーク型（NIDS、NIPS）**：ネットワークを流れる通信を監視、②**ホスト型（HIDS、HIPS）**：サーバやPCのログやファイルを監視、の2種類に分類されます。"
        },
        {
          "type": "table",
          "headers": ["種類", "設置場所", "監視対象", "攻撃検知方法"],
          "rows": [
            ["NIDS（ネットワーク型IDS）", "ネットワーク上（スイッチのミラーポート）", "ネットワークを流れるパケット", "シグネチャ型、アノマリ型"],
            ["NIPS（ネットワーク型IPS）", "ネットワークの通信経路上（インライン）", "ネットワークを流れるパケット", "シグネチャ型、アノマリ型"],
            ["HIDS（ホスト型IDS）", "サーバやPC", "ログ、ファイル、システムコール", "ログ解析、ファイル整合性チェック"],
            ["HIPS（ホスト型IPS）", "サーバやPC", "ログ、ファイル、システムコール", "ログ解析、ファイル整合性チェック"]
          ]
        },
        {
          "type": "example",
          "title": "IDS/IPSの攻撃検知方法の具体例",
          "content": "【①シグネチャ型（Signature-based Detection）】\nあらかじめ登録された攻撃パターン（シグネチャ）と、通信を比較して攻撃を検知する方式です。\n\n具体例:\n①SQLインジェクション攻撃のシグネチャ：「SELECT * FROM users WHERE id = '1' OR '1'='1'」\n②IDSが通信を監視し、HTTPリクエストに「' OR '1'='1'」が含まれていることを検知\n③管理者に「SQLインジェクション攻撃の可能性」をアラート通知\n④IPS の場合、該当する通信を自動的に遮断\n\n利点：既知の攻撃を高精度で検知できる\n欠点：新しい攻撃（ゼロデイ攻撃）は検知できない、シグネチャの更新が必要\n\n【②アノマリ型（Anomaly-based Detection）】\n通常の通信パターン（ベースライン）を学習し、異常な通信を検知する方式です。\n\n具体例:\n①平時のWebサーバへのアクセス：1秒間に10リクエスト\n②DDoS攻撃時のWebサーバへのアクセス：1秒間に1,000リクエスト（通常の100倍）\n③IDSが「通常の100倍のリクエスト」という異常を検知\n④管理者に「DDoS攻撃の可能性」をアラート通知\n⑤IPS の場合、該当する送信元IPアドレスからの通信を自動的に遮断\n\n利点：未知の攻撃（ゼロデイ攻撃）を検知できる\n欠点：誤検知（False Positive）が多い（正常な通信を攻撃と誤認識）、学習期間が必要"
        },
        {
          "type": "example",
          "title": "NIDS/NIPS の設置場所と動作の違い",
          "content": "【NIDS（ネットワーク型IDS）の設置】\nスイッチの「ミラーポート」に接続します。ミラーポートは、ネットワークを流れる通信のコピーをIDSに送信します。IDSは通信を監視するだけで、通信経路には介在しません。\n\n動作:\n①通信がスイッチを通過\n②スイッチがミラーポートに通信のコピーを送信\n③NIDSが通信を検査し、攻撃を検知したら管理者にアラート通知\n④通信は通常通り宛先に到達（NIDSは通信を遮断しない）\n\n【NIPS（ネットワーク型IPS）の設置】\nファイアウォールと同様に、通信経路上に「インライン」で設置します。すべての通信がNIPSを経由します。\n\n動作:\n①通信がNIPSを通過\n②NIPSが通信を検査\n③攻撃を検知した場合、該当する通信を遮断（パケットを破棄）\n④正常な通信のみが宛先に到達\n\n【NIDS vs NIPS】\nNIDSは検知のみで遮断しないため、攻撃が成功する可能性がありますが、誤検知で正常な通信を遮断するリスクはありません。NIPSは攻撃を自動的に遮断しますが、誤検知で正常な通信を遮断すると、業務に影響が出ます。"
        },
        {
          "type": "text",
          "content": "**WAF（Web Application Firewall）**とは、Webアプリケーションに特化したファイアウォールです。WAFは、HTTPリクエストとHTTPレスポンスを検査し、SQLインジェクション、XSS（クロスサイトスクリプティング）、ディレクトリトラバーサルなどのWebアプリケーションへの攻撃を検知・防止します。WAFは、Webサーバの前に設置され、すべてのHTTP/HTTPS通信を検査します。WAFは、シグネチャ型（既知の攻撃パターンを検知）とホワイトリスト型（正常なリクエストのみを許可）の2種類があります。"
        },
        {
          "type": "example",
          "title": "WAFの具体例：SQLインジェクション攻撃の防止",
          "content": "【攻撃シナリオ】\n脆弱なWebアプリケーション（ECサイト）が、ユーザーIDを受け取り、SQLクエリを実行しています。\n\n通常のリクエスト:\nGET /user?id=123\n→ SQL: SELECT * FROM users WHERE id = 123\n\nSQLインジェクション攻撃:\nGET /user?id=123' OR '1'='1\n→ SQL: SELECT * FROM users WHERE id = 123' OR '1'='1'\n→ 条件「'1'='1'」は常に真なので、全ユーザーの情報が取得される（情報漏洩）\n\n【WAFによる防止】\n①攻撃者が「GET /user?id=123' OR '1'='1」というリクエストを送信\n②WAFがHTTPリクエストを検査\n③WAFが「' OR '1'='1'」というSQLインジェクションのシグネチャを検知\n④WAFが該当するリクエストを遮断（HTTPステータスコード403 Forbiddenを返す）\n⑤Webサーバには攻撃が到達しない（SQLインジェクション攻撃を防止）\n\n【WAFが検知するWebアプリケーション攻撃】\n①SQLインジェクション：SQLクエリに不正な文字列を挿入\n②XSS（クロスサイトスクリプティング）：Webページに悪意のあるスクリプトを挿入\n③ディレクトリトラバーサル：「../../etc/passwd」などのパスで、サーバのファイルにアクセス\n④コマンドインジェクション：OSコマンドを実行させる攻撃\n⑤セッションハイジャック：セッションIDを盗んで、なりすましログイン"
        },
        {
          "type": "highlight",
          "icon": "🔧",
          "title": "ファイアウォール、IDS/IPS、WAFの使い分け",
          "content": "ファイアウォールは、ネットワーク層（IP、ポート）の通信を制御し、不正なアクセスを防ぎます。IDS/IPSは、ネットワークやホストへの攻撃を検知・防止します。WAFは、Webアプリケーションへの攻撃（SQLインジェクション、XSS）を検知・防止します。企業では、ファイアウォール + IPS + WAF を組み合わせて、多層防御（Defense in Depth）を実現します。"
        }
      ]
    },
    {
      "id": 3,
      "title": "DMZ（非武装地帯）とセキュリティ対策ソフトウェア",
      "sections": [
        {
          "type": "text",
          "content": "**DMZ（DeMilitarized Zone、非武装地帯）**とは、内部ネットワークと外部ネットワーク（インターネット）の間に設置される、中間ネットワークです。DMZには、外部に公開するサーバ（Webサーバ、メールサーバ、DNSサーバ）を設置します。DMZを設置することで、外部からの攻撃がWebサーバに成功しても、内部ネットワークへの侵入を防ぐことができます。DMZは、2つのファイアウォールで挟まれた構成が一般的です。"
        },
        {
          "type": "example",
          "title": "DMZの構成と動作の具体例",
          "content": "【DMZの構成】\n┌──────────┐\n│インターネット│\n└──────┬───┘\n       │\n┌──────┴──────┐\n│外部ファイアウォール│ ← 外部からの攻撃を防ぐ\n└──────┬──────┘\n       │\n┌──────┴──────┐\n│      DMZ        │\n│  ┌─────────┐ │\n│  │ Webサーバ │ │ ← 外部に公開\n│  │メールサーバ│ │ ← 外部に公開\n│  └─────────┘ │\n└──────┬──────┘\n       │\n┌──────┴──────┐\n│内部ファイアウォール│ ← 内部ネットワークを保護\n└──────┬──────┘\n       │\n┌──────┴──────┐\n│内部ネットワーク  │\n│  ┌─────────┐ │\n│  │DBサーバ   │ │ ← 外部に公開しない\n│  │ファイルサーバ│ │ ← 外部に公開しない\n│  │社員のPC   │ │\n│  └─────────┘ │\n└─────────────┘\n\n【ファイアウォールのルール】\n外部ファイアウォール:\n①インターネット → DMZのWebサーバ（ポート80、443）を許可\n②インターネット → DMZのメールサーバ（ポート25、110）を許可\n③インターネット → 内部ネットワークを遮断\n\n内部ファイアウォール:\n①DMZ → 内部ネットワークのDBサーバ（ポート3306）を許可（WebサーバがDBにアクセス）\n②DMZ → 内部ネットワークの他のサーバ・PCを遮断\n③内部ネットワーク → DMZ、インターネットを許可（社員がWebサイトにアクセス）\n\n【DMZの効果】\n①Webサーバが攻撃を受けても、内部ファイアウォールがあるため、DBサーバやファイルサーバへの侵入を防ぐ\n②内部ネットワークが攻撃を受けても、DMZのWebサーバには影響がない（Webサービスの継続）"
        },
        {
          "type": "text",
          "content": "**ウイルス対策ソフト（アンチウイルスソフト）**とは、マルウェア（ウイルス、ワーム、トロイの木馬、ランサムウェア）を検知・駆除するソフトウェアです。ウイルス対策ソフトは、①**パターンマッチング型**：既知のマルウェアのシグネチャ（パターン）と、ファイルを比較して検知、②**ヒューリスティック型**：ファイルの挙動（ファイルを暗号化する、レジストリを変更する）を解析して、未知のマルウェアを検知、の2種類の検知方法があります。ウイルス対策ソフトは、定義ファイル（シグネチャ）を定期的に更新する必要があります。"
        },
        {
          "type": "text",
          "content": "**セキュリティパッチ（Security Patch）**とは、ソフトウェアの脆弱性（セキュリティホール）を修正するためのプログラムです。OS（Windows、Linux）、アプリケーション（Webブラウザ、Adobe Reader）、ミドルウェア（Apache、Tomcat）には、脆弱性が発見されることがあります。脆弱性を放置すると、攻撃者に悪用されるリスクがあります。ベンダー（Microsoft、Adobe）は、脆弱性を修正するセキュリティパッチを提供します。管理者は、セキュリティパッチを速やかに適用する必要があります。"
        },
        {
          "type": "example",
          "title": "セキュリティパッチの適用例：Windows Updateの重要性",
          "content": "【脆弱性の発見と修正の流れ】\n①2017年5月、Windows のファイル共有機能（SMBv1）に深刻な脆弱性（CVE-2017-0144）が発見される\n②攻撃者がこの脆弱性を悪用し、ランサムウェア「WannaCry」を拡散\n③WannaCryは、脆弱なWindowsマシンに感染し、ファイルを暗号化して身代金を要求\n④Microsoftは、脆弱性を修正するセキュリティパッチ（MS17-010）を緊急リリース\n⑤セキュリティパッチを適用したPCは、WannaCryに感染しなかった\n⑥セキュリティパッチを適用していないPCは、WannaCryに感染し、ファイルが暗号化された\n\n【セキュリティパッチ適用のベストプラクティス】\n①Windows Update を自動更新に設定（毎月第2火曜日に定例アップデート）\n②重要なセキュリティパッチは、公開後24時間以内に適用（緊急度が高い場合）\n③本番環境に適用する前に、テスト環境で動作確認（パッチ適用による不具合を確認）\n④古いOS（Windows XP、Windows 7）は、サポート終了後、セキュリティパッチが提供されないため、アップグレードまたは更改が必要"
        },
        {
          "type": "text",
          "content": "**バックアップ（Backup）**とは、データを複製して保存することです。バックアップは、①データの破損、②ランサムウェアによる暗号化、③操作ミスによる削除、④災害（火災、地震、水害）、などのトラブルからデータを保護します。バックアップには、①**フルバックアップ**：すべてのデータをバックアップ、②**差分バックアップ**：前回のフルバックアップ以降に変更されたデータをバックアップ、③**増分バックアップ**：前回のバックアップ以降に変更されたデータをバックアップ、の3種類があります。バックアップは、3-2-1ルール（3つのコピー、2種類のメディア、1つはオフサイト）に従うことが推奨されます。"
        },
        {
          "type": "table",
          "headers": ["バックアップ方式", "バックアップ対象", "バックアップ時間", "復元時間", "容量"],
          "rows": [
            ["フルバックアップ", "すべてのデータ", "長い", "短い（フルバックアップのみで復元）", "大きい"],
            ["差分バックアップ", "前回のフルバックアップ以降の変更", "中程度", "中程度（フルバックアップ + 最新の差分）", "中程度"],
            ["増分バックアップ", "前回のバックアップ以降の変更", "短い", "長い（フルバックアップ + すべての増分）", "小さい"]
          ]
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "多層防御（Defense in Depth）の重要性",
          "content": "セキュリティ対策は、1つの対策だけでは不十分です。攻撃者が1つの防御を突破しても、次の防御で攻撃を防ぐ「多層防御（Defense in Depth）」が重要です。具体的には、①ファイアウォールで不正なアクセスを防ぐ、②IPS/WAFで攻撃を検知・防止、③ウイルス対策ソフトでマルウェアを検知・駆除、④セキュリティパッチで脆弱性を修正、⑤バックアップでデータを保護、⑥DMZで内部ネットワークを保護、といった複数の対策を組み合わせます。"
        }
      ]
    },
    {
      "id": 4,
      "title": "セキュアプログラミングと脆弱性診断",
      "sections": [
        {
          "type": "text",
          "content": "**セキュアプログラミング（Secure Programming）**とは、脆弱性を作り込まないようにプログラムを開発する手法です。セキュアプログラミングでは、①**入力値の検証（バリデーション）**：ユーザーからの入力値を検証し、不正な値を受け付けない、②**エスケープ処理**：特殊文字（'、\"、<、>）をエスケープし、SQLインジェクション、XSSを防ぐ、③**最小権限の原則**：プログラムに必要最小限の権限のみを付与、④**エラーメッセージの制御**：詳細なエラーメッセージを表示せず、攻撃の手がかりを与えない、などの対策を実施します。"
        },
        {
          "type": "example",
          "title": "セキュアプログラミングの具体例：SQLインジェクション対策",
          "content": "【脆弱なコード（SQLインジェクションの脆弱性）】\n```python\n# ユーザーIDを受け取り、ユーザー情報をデータベースから取得\nuser_id = request.GET['id']  # 例: user_id = \"123' OR '1'='1\"\n\n# SQLクエリを文字列結合で構築（脆弱）\nquery = \"SELECT * FROM users WHERE id = '\" + user_id + \"'\"\n# 実際のSQL: SELECT * FROM users WHERE id = '123' OR '1'='1'\n# 条件「'1'='1'」は常に真なので、全ユーザーの情報が取得される\n\nresults = db.execute(query)\n```\n\n【セキュアなコード（プリペアドステートメント）】\n```python\n# ユーザーIDを受け取る\nuser_id = request.GET['id']  # 例: user_id = \"123' OR '1'='1\"\n\n# プリペアドステートメント（プレースホルダを使用）\nquery = \"SELECT * FROM users WHERE id = ?\"\n# user_idは、SQL文の一部ではなく、パラメータとして扱われる\n# user_id = \"123' OR '1'='1\" は、文字列「123' OR '1'='1」として検索される\n# SQLインジェクション攻撃が無効化される\n\nresults = db.execute(query, (user_id,))\n```\n\n【プリペアドステートメントの仕組み】\n①SQLクエリとパラメータを分離\n②データベースエンジンが、SQLクエリを事前にコンパイル（プリペア）\n③パラメータは、SQL文の一部ではなく、データとして扱われる\n④特殊文字（'、\"）が自動的にエスケープされる\n⑤SQLインジェクション攻撃が無効化される\n\n【その他のセキュアプログラミング対策】\n①XSS対策：HTMLエスケープ（<を&lt;、>を&gt;に変換）\n②CSRF対策：CSRFトークンを使用\n③セッションハイジャック対策：セッションIDをHTTPS通信で送信、セッションIDを定期的に再生成"
        },
        {
          "type": "text",
          "content": "**脆弱性診断（Vulnerability Assessment）**とは、システムやアプリケーションに脆弱性がないか調査することです。脆弱性診断には、①**自動診断ツール**：既知の脆弱性を自動的に検査、②**手動診断**：専門家が手動で脆弱性を調査、の2種類があります。脆弱性診断の結果、発見された脆弱性は、①**緊急度**：高（攻撃のリスクが高い）、中、低、②**影響度**：高（情報漏洩、システム停止）、中、低、で分類され、優先度の高い脆弱性から修正します。"
        },
        {
          "type": "example",
          "title": "脆弱性診断ツールの具体例：OWASPの脆弱性診断",
          "content": "【OWASP（Open Web Application Security Project）】\nOWASPは、Webアプリケーションのセキュリティを向上させるための非営利団体です。OWASPは、「OWASP Top 10」という、Webアプリケーションの10大脅威を公開しています。\n\n【OWASP Top 10（2021年版）】\n①A01: アクセス制御の不備（Broken Access Control）\n②A02: 暗号化の失敗（Cryptographic Failures）\n③A03: インジェクション（Injection）\n④A04: 安全でない設計（Insecure Design）\n⑤A05: セキュリティの設定ミス（Security Misconfiguration）\n⑥A06: 脆弱で古いコンポーネント（Vulnerable and Outdated Components）\n⑦A07: 識別と認証の失敗（Identification and Authentication Failures）\n⑧A08: ソフトウェアとデータの整合性の不備（Software and Data Integrity Failures）\n⑨A09: セキュリティログとモニタリングの不備（Security Logging and Monitoring Failures）\n⑩A10: サーバサイドリクエストフォージェリ（Server-Side Request Forgery）\n\n【脆弱性診断ツールの例】\n①OWASP ZAP（Zed Attack Proxy）：Webアプリケーションの脆弱性を自動診断（無料）\n②Burp Suite：Webアプリケーションの脆弱性を手動診断（有料）\n③Nessus：ネットワーク機器、サーバ、アプリケーションの脆弱性を自動診断（有料）\n④OpenVAS：ネットワーク機器、サーバ、アプリケーションの脆弱性を自動診断（無料）\n\n【脆弱性診断の流れ】\n①診断ツールでWebアプリケーションをスキャン\n②発見された脆弱性をレポートに記載（脆弱性の種類、緊急度、影響度、修正方法）\n③開発者が脆弱性を修正\n④再診断で脆弱性が修正されたことを確認"
        },
        {
          "type": "text",
          "content": "**ペネトレーションテスト（Penetration Test、侵入テスト）**とは、実際に攻撃者のように侵入を試み、システムの脆弱性を検証するテストです。ペネトレーションテストは、脆弱性診断よりも高度で、攻撃者の視点で、①脆弱性の発見、②脆弱性の悪用、③システムへの侵入、④重要データへのアクセス、⑤痕跡の消去、などを実施します。ペネトレーションテストは、ホワイトボックステスト（システムの内部情報を知っている）、グレーボックステスト（一部の情報を知っている）、ブラックボックステスト（情報なし、攻撃者と同じ条件）の3種類があります。"
        },
        {
          "type": "example",
          "title": "ペネトレーションテストの具体例：ECサイトへの侵入テスト",
          "content": "【ペネトレーションテストのシナリオ】\nあるECサイトの管理者が、外部のセキュリティ専門企業に、ペネトレーションテストを依頼しました。\n\n【テストの流れ（ブラックボックステスト）】\n①情報収集（Reconnaissance）:\n  - ECサイトのURL、IPアドレス、ドメイン情報を収集\n  - Webサーバ（Apache 2.4.41）、OS（Ubuntu 20.04）、PHP（7.4.3）を特定\n\n②脆弱性スキャン（Scanning）:\n  - 脆弱性診断ツール（Nmap、Nessus）でスキャン\n  - 脆弱性を発見：Apache 2.4.41に既知の脆弱性（CVE-2021-41773）、管理画面（/admin）が外部に公開されている\n\n③脆弱性の悪用（Exploitation）:\n  - Apacheの脆弱性を悪用し、Webサーバのシェルを取得\n  - 管理画面にアクセスし、デフォルトのパスワード（admin/admin）で管理者権限を取得\n\n④権限昇格（Privilege Escalation）:\n  - Webサーバのシェルから、OSの脆弱性を悪用し、root権限を取得\n\n⑤重要データへのアクセス（Data Access）:\n  - データベースサーバにアクセスし、顧客情報（氏名、住所、クレジットカード番号）を取得\n\n⑥痕跡の消去（Covering Tracks）:\n  - アクセスログを削除し、侵入の痕跡を消去\n\n【テスト結果のレポート】\n①発見された脆弱性：Apacheの脆弱性、管理画面の外部公開、デフォルトパスワード、OSの脆弱性\n②影響度：高（顧客情報の漏洩、システムの完全な制御）\n③推奨対策：セキュリティパッチの適用、管理画面のアクセス制限、パスワードの変更、OSのアップデート"
        },
        {
          "type": "highlight",
          "icon": "🔧",
          "title": "脆弱性診断とペネトレーションテストの違い",
          "content": "脆弱性診断は、既知の脆弱性を自動的に検査し、脆弱性の有無を確認します。ペネトレーションテストは、攻撃者の視点で実際に侵入を試み、脆弱性を悪用して、どこまで侵入できるかを検証します。脆弱性診断は「脆弱性があるか」を確認し、ペネトレーションテストは「脆弱性を悪用できるか」を確認します。ペネトレーションテストの方が高度で、実際の攻撃シナリオを検証できますが、コストと時間がかかります。"
        }
      ]
    },
    {
      "id": 5,
      "title": "ISMS（情報セキュリティマネジメントシステム）とインシデント対応",
      "sections": [
        {
          "type": "text",
          "content": "**ISMS（Information Security Management System、情報セキュリティマネジメントシステム）**とは、組織が情報セキュリティを管理するための仕組みです。ISMSは、国際規格ISO/IEC 27001に基づいており、①**情報セキュリティポリシーの策定**、②**リスクアセスメント**、③**セキュリティ対策の実施**、④**監査と見直し**、のPDCAサイクルで運用されます。ISMSの認証を取得することで、顧客や取引先に、情報セキュリティが適切に管理されていることを証明できます。"
        },
        {
          "type": "example",
          "title": "ISMSのPDCAサイクルの具体例",
          "content": "【Plan（計画）】\n①情報セキュリティポリシーの策定:\n  - 「機密情報は暗号化して保存する」「パスワードは8文字以上で、90日ごとに変更する」\n\n②リスクアセスメント:\n  - 情報資産（顧客情報、社内機密情報）を洗い出す\n  - 脅威（不正アクセス、ランサムウェア、内部不正）を特定\n  - リスクを評価（発生確率、影響度）\n  - リスク対応（回避、低減、移転、受容）を決定\n\n③セキュリティ対策の計画:\n  - ファイアウォールの導入、ウイルス対策ソフトの導入、セキュリティパッチの適用、従業員教育\n\n【Do（実行）】\n①セキュリティ対策の実施:\n  - ファイアウォールを設置し、不正なアクセスを遮断\n  - ウイルス対策ソフトを全社員のPCにインストール\n  - 毎月、セキュリティパッチを適用\n  - 年2回、セキュリティ教育を実施（フィッシング詐欺の見分け方、パスワード管理）\n\n【Check（評価）】\n①内部監査:\n  - 監査人が、セキュリティ対策が計画通り実施されているか確認\n  - 監査結果をレポートに記載（問題点、改善提案）\n\n②外部監査:\n  - 外部の認証機関が、ISMSが適切に運用されているか監査\n  - ISO/IEC 27001の認証を取得\n\n【Act（改善）】\n①監査結果に基づき、セキュリティ対策を改善\n  - 問題点：「セキュリティパッチの適用が遅れている」→ 改善策：「自動更新を有効化」\n  - 問題点：「従業員のパスワードが脆弱」→ 改善策：「パスワードポリシーを強化（最低12文字、記号を含む）」\n\n②次年度の計画に反映"
        },
        {
          "type": "text",
          "content": "**CSIRT（Computer Security Incident Response Team、シーサート）**とは、セキュリティインシデント（情報漏洩、不正アクセス、マルウェア感染）に対応するための組織です。CSIRTは、①**インシデントの検知**、②**インシデントの分析**、③**対応・復旧**、④**再発防止**、を担当します。CSIRTは、企業内部に設置される社内CSIRT、複数の組織で構成される業界CSIRTがあります。CSIRTは、24時間365日体制で、セキュリティインシデントに対応します。"
        },
        {
          "type": "example",
          "title": "インシデント対応の具体例：ランサムウェア感染への対応",
          "content": "【インシデント発生】\n2024年10月22日 9:00、社員のPCがランサムウェア「RansomX」に感染し、ファイルが暗号化されました。\n\n【①検知（Detection）】\n9:05、ウイルス対策ソフトがランサムウェアを検知し、CSIRTに自動アラート\n9:10、CSIRT担当者が、感染したPCを確認し、ランサムウェアであることを確認\n\n【②初動対応（Containment）】\n9:15、感染したPCをネットワークから切り離し（隔離）、他のPCへの感染拡大を防止\n9:20、全社員に「ランサムウェア感染が発生したため、不審なメールを開かない、USBメモリを挿入しない」と通知\n9:30、ネットワークのログを確認し、感染源を特定（フィッシングメールの添付ファイル）\n\n【③根本原因の分析（Eradication）】\n10:00、感染したPCのハードディスクを取り外し、フォレンジック調査（ランサムウェアの挙動、感染経路を分析）\n11:00、フィッシングメールが、社員100名に送信されていたことを確認\n12:00、ランサムウェアの亜種「RansomX v2」であることを特定\n\n【④復旧（Recovery）】\n13:00、感染したPCのOSを再インストール\n14:00、前日のバックアップから、ファイルを復元（データの損失なし）\n15:00、ウイルス対策ソフトの定義ファイルを更新し、RansomX v2を検知できるようにする\n16:00、感染したPCをネットワークに再接続し、業務再開\n\n【⑤事後対応（Post-Incident Activity）】\n17:00、インシデント報告書を作成（発生日時、感染経路、影響範囲、対応内容、復旧時間）\n翌日、全社員にフィッシング詐欺の見分け方を教育（添付ファイルを開く前に、送信者を確認）\n翌週、メールサーバにスパムフィルタを導入し、フィッシングメールを自動的に遮断\n翌月、インシデント対応のプロセスを見直し、初動対応時間を短縮（ネットワーク切り離しを自動化）"
        },
        {
          "type": "table",
          "headers": ["インシデント対応フェーズ", "主な作業", "目的"],
          "rows": [
            ["①検知（Detection）", "ウイルス対策ソフト、IDS/IPSのアラート確認、ログ分析", "インシデントを早期に発見"],
            ["②初動対応（Containment）", "感染したPCの隔離、ネットワークの遮断、緊急連絡", "被害の拡大を防止"],
            ["③根本原因の分析（Eradication）", "フォレンジック調査、ログ分析、マルウェアの解析", "インシデントの原因を特定し、完全に除去"],
            ["④復旧（Recovery）", "OSの再インストール、バックアップからの復元、システムの再起動", "システムを正常な状態に戻す"],
            ["⑤事後対応（Post-Incident Activity）", "報告書作成、再発防止策の実施、プロセスの見直し", "同じインシデントの再発を防止"]
          ]
        },
        {
          "type": "text",
          "content": "**インシデント対応手順書（Incident Response Plan）**とは、セキュリティインシデントが発生した際の対応手順を記載したドキュメントです。インシデント対応手順書には、①インシデントの定義、②連絡体制（CSIRTの担当者、経営層への報告）、③初動対応手順（PCの隔離、ネットワークの遮断）、④復旧手順（バックアップからの復元）、⑤報告手順、⑥再発防止策、などを記載します。インシデント対応手順書を事前に準備することで、インシデント発生時に迅速に対応できます。"
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "インシデント対応の重要なポイント",
          "content": "インシデント対応で最も重要なのは、①**迅速な初動対応**：被害の拡大を防ぐため、感染したPCをネットワークから切り離す、②**正確な原因分析**：同じインシデントの再発を防ぐため、根本原因を特定する、③**バックアップの定期取得**：データを復旧できるよう、定期的にバックアップを取得する、④**訓練と教育**：インシデント対応手順を訓練し、社員にセキュリティ教育を実施する、の4点です。インシデント対応は、事前の準備が成功の鍵です。"
        }
      ]
    }
  ]
}
