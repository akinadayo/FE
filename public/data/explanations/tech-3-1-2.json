{
  "topicId": "tech-3-1-2",
  "title": "入出力設計",
  "pages": [
    {
      "id": 1,
      "title": "入出力設計の基礎",
      "sections": [
        {
          "type": "text",
          "content": "入出力設計とは、システムに入力されるデータの形式や内容を定義し、正確なデータ処理を実現するための設計です。適切な入出力設計により、データの誤入力を防ぎ、システムの信頼性を高めることができます。"
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "入出力設計の目的",
          "content": "・データの正確性を確保する\n・入力ミスを防止する\n・データの一意性を保証する\n・効率的なデータ管理を実現する\n・システムの信頼性を向上させる"
        },
        {
          "type": "list",
          "items": [
            "コード設計：データを効率的に識別・分類するための符号化方式",
            "チェックディジット：入力ミスを検出するための検証用数字",
            "入力チェック：データの妥当性を検証する仕組み",
            "画面設計：使いやすい入力画面のレイアウト",
            "帳票設計：出力される帳票の形式"
          ]
        },
        {
          "type": "example",
          "title": "身近な入出力設計の例",
          "content": "【クレジットカード番号】\n・16桁の数字（例：1234 5678 9012 3456）\n・最後の1桁がチェックディジット\n・カード番号の入力ミスを自動検出\n\n【郵便番号】\n・7桁の数字（例：100-0001）\n・ハイフンで区切って入力しやすく\n・住所の自動補完に利用\n\n【商品コード（JAN）】\n・13桁のバーコード番号\n・最後の1桁がチェックディジット\n・読み取りエラーを検出"
        }
      ]
    },
    {
      "id": 2,
      "title": "コード設計の種類",
      "sections": [
        {
          "type": "text",
          "content": "コード設計は、データを効率的に識別・分類するための符号化方式です。用途に応じて適切なコード体系を選択することが重要です。"
        },
        {
          "type": "table",
          "title": "主なコード設計方式",
          "headers": ["方式", "説明", "具体例"],
          "rows": [
            ["順次コード", "連番で割り当てる。シンプルだが意味を持たない", "会員番号：0001, 0002, 0003,..."],
            ["区分コード", "カテゴリごとに範囲を分けて割り当てる", "部門コード：1xx=営業, 2xx=開発, 3xx=総務"],
            ["桁別コード", "各桁に意味を持たせる（階層的）", "商品コード：12-34-567（大分類-中分類-商品番号）"],
            ["表意コード", "名称の一部を使って意味を持たせる", "TYO=東京、OSA=大阪、NGY=名古屋"],
            ["合成コード", "複数の方式を組み合わせる", "社員番号：24-01-0123（入社年-部署-連番）"]
          ]
        },
        {
          "type": "highlight",
          "icon": "⚖️",
          "title": "各方式のメリット・デメリット",
          "content": "【順次コード】\nメリット：シンプル、管理しやすい、無限に追加可能\nデメリット：コードから意味がわからない\n\n【区分コード】\nメリット：分類がわかりやすい、範囲指定しやすい\nデメリット：範囲が足りなくなる可能性\n\n【桁別コード】\nメリット：階層構造を表現できる、分類が明確\nデメリット：桁数が増えやすい、柔軟性が低い"
        },
        {
          "type": "example",
          "title": "桁別コードの実例",
          "content": "【商品コードの例】\n12-34-567\n↓  ↓  ↓\n大  中  商品番号\n分  分\n類  類\n\n12 = 家電\n  34 = テレビ\n    567 = 567番目の商品\n\n→ このコードを見るだけで「家電のテレビカテゴリの商品」とわかる\n\n【社員番号の例】\n24-01-0123\n↓  ↓  ↓\n入  部  連番\n社  署\n年\n\n24 = 2024年入社\n  01 = 営業部\n    0123 = 123番目の社員\n\n→ 「2024年入社、営業部の123番目の社員」と識別できる"
        }
      ]
    },
    {
      "id": 3,
      "title": "チェックディジット",
      "sections": [
        {
          "type": "text",
          "content": "チェックディジットは、コードの末尾に付加する検証用の数字です。入力ミスや読み取りエラーを自動的に検出できます。"
        },
        {
          "type": "highlight",
          "icon": "✓",
          "title": "チェックディジットの仕組み",
          "content": "1. コードの各桁に重みを掛けて合計する\n2. 合計値を特定の数（通常10や11）で割った余りを求める\n3. 余りから検証用の数字を算出する\n4. この数字をコードの末尾に付加する\n\n入力時に同じ計算を行い、チェックディジットが一致するか確認することで、入力ミスを検出できます。"
        },
        {
          "type": "example",
          "title": "モジュラス10（重み3,1）の計算例",
          "content": "【ISBNコード（13桁）の計算】\nコード：978-4-12345-678-?\n\n①各桁に重み（1,3,1,3,...）を掛ける\n9×1 + 7×3 + 8×1 + 4×3 + 1×1 + 2×3 + 3×1 + 4×3 + 5×1 + 6×3 + 7×1 + 8×3\n= 9 + 21 + 8 + 12 + 1 + 6 + 3 + 12 + 5 + 18 + 7 + 24\n= 126\n\n②合計を10で割った余りを求める\n126 ÷ 10 = 12 余り 6\n\n③10から余りを引く\n10 - 6 = 4\n\n→ チェックディジットは「4」\n完成コード：978-4-12345-678-4"
        },
        {
          "type": "table",
          "title": "主なチェックディジット方式",
          "headers": ["方式", "使用例", "検出率"],
          "rows": [
            ["モジュラス10（重み3,1）", "ISBN、JAN（バーコード）", "単純な入力ミスのほぼ100%"],
            ["モジュラス11（重み2,3,4,5,6,7）", "クレジットカード番号", "転置エラーも検出可能"],
            ["モジュラス11（重み逆順）", "宅配便の伝票番号", "高精度な検出"]
          ]
        },
        {
          "type": "highlight",
          "icon": "🔍",
          "title": "チェックディジットで検出できるエラー",
          "content": "・単純な入力ミス：1234 → 1235（1桁間違い）\n・転置エラー：1234 → 1243（隣接する2桁の入れ替え）\n・ダブルエラー：1234 → 1134（同じ数字が続く）\n\nただし、すべてのエラーを100%検出できるわけではありません。複数桁のエラーや、特定のパターンは検出できない場合もあります。"
        }
      ]
    },
    {
      "id": 4,
      "title": "入力チェックの種類",
      "sections": [
        {
          "type": "text",
          "content": "入力チェックは、ユーザーが入力したデータが妥当かどうかを検証する仕組みです。不正なデータの混入を防ぎ、システムの信頼性を高めます。"
        },
        {
          "type": "table",
          "title": "主な入力チェックの種類",
          "headers": ["チェック名", "検証内容", "例"],
          "rows": [
            ["ニューメリックチェック", "数字のみで構成されているか", "電話番号：03-1234-5678（数字とハイフンのみ）"],
            ["リミットチェック", "値が上限・下限の範囲内か", "年齢：0～150歳、試験点数：0～100点"],
            ["フォーマットチェック", "形式が正しいか", "メールアドレス：xxx@yyy.zzz形式"],
            ["桁数チェック", "桁数が正しいか", "郵便番号：7桁、電話番号：10～11桁"],
            ["必須チェック", "必須項目が入力されているか", "氏名、メールアドレス等の必須項目"],
            ["重複チェック", "すでに登録されていないか", "会員IDの重複登録防止"],
            ["相関チェック", "複数項目の関係が正しいか", "開始日 ≦ 終了日"],
            ["チェックディジット", "計算結果が一致するか", "クレジットカード番号の妥当性"]
          ]
        },
        {
          "type": "example",
          "title": "リミットチェックの具体例",
          "content": "【生年月日の入力】\n年：1900～2024（下限～上限チェック）\n月：1～12（範囲チェック）\n日：1～31（範囲チェック。さらに月によって変動）\n\n【試験の点数入力】\n0～100点（範囲チェック）\n→ 101点や-10点は入力エラー\n\n【商品の注文数】\n1～999（最小1個、最大999個まで）\n→ 0個や1000個以上は入力エラー"
        },
        {
          "type": "highlight",
          "icon": "⚠️",
          "title": "入力チェックの実装タイミング",
          "content": "【リアルタイムチェック】\n・入力中または入力直後にチェック\n・ユーザーがすぐにミスに気づける\n・例：「メールアドレスに@が含まれていません」\n\n【送信時チェック】\n・フォーム送信時に全項目をまとめてチェック\n・サーバー側でも必ず検証する（クライアント側のチェックだけでは不十分）\n・例：「必須項目が未入力です」\n\n推奨：リアルタイムチェック + 送信時チェックの両方を実施"
        },
        {
          "type": "example",
          "title": "相関チェックの例",
          "content": "【日付の前後関係】\n開始日：2024/01/01\n終了日：2023/12/31\n→ エラー：終了日が開始日より前\n\n【年齢と生年月日の整合性】\n年齢：25歳\n生年月日：2010/01/01\n→ エラー：年齢と生年月日が矛盾\n\n【金額の合計チェック】\n小計：10,000円\n消費税（10%）：900円\n→ エラー：消費税が小計の10%（1,000円）と一致しない"
        }
      ]
    },
    {
      "id": 5,
      "title": "実践的な入出力設計",
      "sections": [
        {
          "type": "text",
          "content": "実際のシステム開発では、複数の入出力設計技術を組み合わせて使用します。ユーザーの使いやすさとデータの正確性を両立させることが重要です。"
        },
        {
          "type": "example",
          "title": "ECサイトの会員登録フォーム設計例",
          "content": "【会員ID】\n・桁別コード：24-0001-234（入会年-連番-チェックディジット）\n・自動採番（ユーザーは入力不要）\n\n【氏名】\n・必須チェック：未入力不可\n・フォーマットチェック：全角文字のみ\n・桁数チェック：1～50文字\n\n【メールアドレス】\n・必須チェック：未入力不可\n・フォーマットチェック：xxx@yyy.zzz形式\n・重複チェック：すでに登録済みでないか\n\n【生年月日】\n・リミットチェック：年1900～2024、月1～12、日1～31\n・相関チェック：年齢が13歳以上（利用規約）\n\n【電話番号】\n・ニューメリックチェック：数字とハイフンのみ\n・桁数チェック：10～11桁（ハイフン除く）\n\n【パスワード】\n・桁数チェック：8文字以上\n・フォーマットチェック：英数字記号を含む"
        },
        {
          "type": "table",
          "title": "入出力設計のベストプラクティス",
          "headers": ["項目", "推奨事項", "理由"],
          "rows": [
            ["コード設計", "将来の拡張を考慮した桁数", "後から桁数を増やすのは困難"],
            ["チェックディジット", "重要なコード（金額、ID等）に必ず付加", "入力ミスによる損失を防ぐ"],
            ["入力チェック", "クライアント側とサーバー側の両方で実施", "セキュリティと信頼性の確保"],
            ["エラーメッセージ", "具体的な修正方法を提示", "ユーザビリティ向上"],
            ["デフォルト値", "よく使う値を初期値に設定", "入力の手間を削減"]
          ]
        },
        {
          "type": "highlight",
          "icon": "📝",
          "title": "入出力設計の手順",
          "content": "1. 要件定義：どんなデータを入出力するか決める\n2. コード体系設計：識別用のコードを設計\n3. チェックディジット設計：検証方式を決める\n4. 入力画面設計：使いやすいレイアウトを設計\n5. 入力チェック設計：妥当性検証のルールを定義\n6. 帳票設計：出力される帳票の形式を決める\n7. テスト：正常系・異常系のテストを実施"
        },
        {
          "type": "example",
          "title": "入力チェックの失敗例と改善例",
          "content": "【失敗例】\nエラーメッセージ：「入力エラーです」\n→ 何が間違っているかわからない\n\n【改善例】\nエラーメッセージ：「郵便番号は7桁の数字で入力してください（例：100-0001）」\n→ 具体的で、すぐに修正できる\n\n【失敗例】\n電話番号：ハイフンなしで入力してください\n→ ユーザーが覚えて従う必要がある\n\n【改善例】\n電話番号：ハイフンありでもなしでも自動で処理\n→ ユーザーの負担を減らす"
        }
      ]
    }
  ]
}
