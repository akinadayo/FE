{
  "topicId": "tech-2-1-3",
  "title": "バスと入出力",
  "pages": [
    {
      "id": 1,
      "title": "バスの基礎",
      "sections": [
        {
          "type": "text",
          "content": "バスは、コンピュータ内部で各装置間のデータ転送を行うための共通の伝送路です。複数の装置が同じ経路を共有することで、配線を簡素化できます。"
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "バスとは",
          "content": "バス（bus）は「乗合バス」の意味で、複数の装置が共有する伝送路のことです。データ、アドレス、制御信号を転送します。"
        },
        {
          "type": "table",
          "headers": ["バスの種類", "役割", "転送内容"],
          "rows": [
            ["データバス", "データの転送", "命令やデータ"],
            ["アドレスバス", "アドレスの転送", "メモリやI/Oのアドレス"],
            ["制御バス", "制御信号の転送", "読み書き信号、割込み信号など"]
          ]
        },
        {
          "type": "text",
          "content": "バスは接続範囲によっても分類されます。"
        },
        {
          "type": "table",
          "headers": ["分類", "接続対象", "例"],
          "rows": [
            ["内部バス", "CPU内部の接続", "レジスタ間の接続"],
            ["システムバス", "CPU-メモリ-I/O間", "マザーボード上のバス"],
            ["外部バス", "コンピュータと周辺機器", "USB、HDMI、PCI Express"],
            ["拡張バス", "拡張カードとの接続", "PCIバス、AGPバス"]
          ]
        },
        {
          "type": "list",
          "items": [
            "バス幅：同時に転送できるビット数（32ビット、64ビットなど）",
            "バスクロック：データ転送の速度を決定",
            "バス帯域幅：単位時間あたりの最大転送量",
            "バスマスタ：バスの使用権を制御する装置"
          ]
        },
        {
          "type": "formula",
          "content": "バス帯域幅（MB/s） = バス幅（バイト） × バスクロック（MHz）",
          "explanation": "例：64ビット（8バイト）幅、100MHzのバスの帯域幅は 8 × 100 = 800MB/s"
        },
        {
          "type": "example",
          "title": "例題：バスの種類",
          "content": "CPUがメモリの読み書き場所を指定するために使用するバスはどれか。\n\nア：データバス\nイ：アドレスバス\nウ：制御バス\nエ：拡張バス",
          "solution": "答え：イ\n\n解説：アドレスバスは、CPUがアクセスするメモリやI/Oデバイスのアドレスを指定するために使用されます。データの転送はデータバスで行います。"
        }
      ]
    },
    {
      "id": 2,
      "title": "入出力制御方式",
      "sections": [
        {
          "type": "text",
          "content": "CPUと周辺装置（I/Oデバイス）の間でデータをやり取りする方法には、いくつかの方式があります。それぞれ特徴と用途が異なります。"
        },
        {
          "type": "table",
          "headers": ["方式", "CPUの関与", "転送速度", "用途"],
          "rows": [
            ["プログラム制御方式", "常時関与", "遅い", "簡単なI/O"],
            ["DMA方式", "最初と最後のみ", "速い", "ハードディスク、ネットワーク"],
            ["チャネル制御方式", "ほぼ不要", "非常に速い", "大型コンピュータ"]
          ]
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "プログラム制御方式",
          "content": "CPUがプログラムを実行しながら、直接I/Oデバイスとのデータ転送を制御します。CPUがビジーウェイト（待機）する必要があるため非効率です。"
        },
        {
          "type": "text",
          "content": "各方式の詳細を見てみましょう。"
        },
        {
          "type": "list",
          "items": [
            "プログラム制御：CPUが1バイトずつ転送。シンプルだが遅い",
            "割込み制御：I/Oデバイスが準備完了時に割込みでCPUに通知",
            "DMA：CPUを介さずにメモリとI/Oデバイス間で直接転送",
            "チャネル制御：専用プロセッサ（チャネル）がI/O処理を独立実行"
          ]
        },
        {
          "type": "highlight",
          "icon": "⚡",
          "title": "DMA（Direct Memory Access）",
          "content": "DMAコントローラがCPUに代わってメモリとI/Oデバイス間のデータ転送を行います。CPUは転送開始と終了の処理のみを行い、転送中は他の処理を実行できます。"
        },
        {
          "type": "table",
          "headers": ["段階", "動作", "CPUの状態"],
          "rows": [
            ["1. 初期設定", "CPUがDMAコントローラに転送条件を設定", "動作中"],
            ["2. データ転送", "DMAコントローラが転送を実行", "他の処理実行"],
            ["3. 転送完了", "DMAコントローラがCPUに割込み", "割込み処理"]
          ]
        },
        {
          "type": "example",
          "title": "例題：DMA方式",
          "content": "DMA方式の説明として適切なものはどれか。\n\nア：CPUがすべてのデータ転送を制御する\nイ：CPUを介さずにメモリとI/Oデバイス間で直接転送する\nウ：CPUが転送中も常に監視する必要がある\nエ：転送速度が最も遅い",
          "solution": "答え：イ\n\n解説：DMA（Direct Memory Access）方式は、DMAコントローラがCPUに代わってメモリとI/Oデバイス間のデータ転送を直接行います。CPUは転送中に他の処理を実行できるため効率的です。"
        }
      ]
    },
    {
      "id": 3,
      "title": "インタフェースの種類",
      "sections": [
        {
          "type": "text",
          "content": "コンピュータと周辺機器を接続するインタフェースには、パラレルインタフェースとシリアルインタフェースがあります。"
        },
        {
          "type": "table",
          "headers": ["種類", "データ転送", "特徴", "用途"],
          "rows": [
            ["パラレル", "複数ビットを同時転送", "短距離で高速、配線が複雑", "プリンタ（旧式）"],
            ["シリアル", "1ビットずつ順次転送", "長距離可能、配線が簡単", "USB、SATA"]
          ]
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "パラレルとシリアル",
          "content": "パラレルインタフェースは複数の信号線で同時にデータを転送しますが、信号のタイミングずれ（スキュー）が問題になります。シリアルインタフェースは1本の信号線で順次転送するため、長距離伝送に適しています。"
        },
        {
          "type": "text",
          "content": "現代のコンピュータでは、シリアルインタフェースが主流になっています。高速化技術の進歩により、シリアルでも十分な速度が得られるようになったためです。"
        },
        {
          "type": "list",
          "items": [
            "パラレルの問題：配線が複雑、クロックスキュー、ノイズに弱い",
            "シリアルの利点：配線が簡単、長距離伝送可能、ホットプラグ対応",
            "高速シリアル：差動伝送、エンコーディング技術で高速化",
            "現代の主流：USB、SATA、PCI Express、HDMIなどすべてシリアル"
          ]
        },
        {
          "type": "highlight",
          "icon": "⚡",
          "title": "差動伝送",
          "content": "2本の信号線で逆位相の信号を送り、受信側で差を取ることでノイズを除去する技術です。USB、HDMI、LANケーブルなどで使用されています。"
        },
        {
          "type": "example",
          "title": "例題：インタフェース",
          "content": "シリアルインタフェースの特徴として適切なものはどれか。\n\nア：複数ビットを同時に転送する\nイ：パラレルより配線が複雑\nウ：長距離伝送に適している\nエ：クロックスキューが発生しやすい",
          "solution": "答え：ウ\n\n解説：シリアルインタフェースは1ビットずつ順次転送するため、配線が簡単で長距離伝送に適しています。クロックスキューはパラレルインタフェースの問題です。"
        }
      ]
    },
    {
      "id": 4,
      "title": "主要なインタフェース規格",
      "sections": [
        {
          "type": "text",
          "content": "現代のコンピュータで使用される主要なインタフェース規格について学びます。それぞれ用途や転送速度が異なります。"
        },
        {
          "type": "table",
          "headers": ["規格", "種類", "最大速度", "用途"],
          "rows": [
            ["USB 2.0", "シリアル", "480Mbps", "キーボード、マウス、周辺機器"],
            ["USB 3.0", "シリアル", "5Gbps", "外付けHDD、高速周辺機器"],
            ["USB 3.1", "シリアル", "10Gbps", "外付けSSD、ディスプレイ"],
            ["SATA", "シリアル", "6Gbps", "内蔵HDD、SSD"],
            ["PCI Express", "シリアル", "32GB/s（x16）", "グラフィックカード、拡張カード"],
            ["HDMI", "シリアル", "18Gbps", "ディスプレイ、テレビ"],
            ["Thunderbolt", "シリアル", "40Gbps", "高速データ転送、ディスプレイ"]
          ]
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "USB（Universal Serial Bus）",
          "content": "最も普及している汎用インタフェースです。ホットプラグ（接続したまま抜き差し可能）やバスパワー（電力供給）に対応しています。"
        },
        {
          "type": "text",
          "content": "各規格の特徴を詳しく見てみましょう。"
        },
        {
          "type": "list",
          "items": [
            "USB：最大127台のデバイスを接続可能。Type-A、Type-B、Type-Cなどのコネクタ",
            "SATA：Serial ATA。パラレルATAを置き換えた内蔵ストレージ接続規格",
            "PCI Express：レーン数（x1、x4、x8、x16）で帯域幅が変わる",
            "HDMI：映像と音声を1本のケーブルで伝送。著作権保護機能付き",
            "Thunderbolt：Intel開発の高速規格。USB Type-Cコネクタを使用"
          ]
        },
        {
          "type": "highlight",
          "icon": "⚡",
          "title": "ホットプラグとプラグアンドプレイ",
          "content": "ホットプラグは電源を入れたまま抜き差し可能な機能。プラグアンドプレイは接続すると自動的に認識・設定される機能です。USBは両方に対応しています。"
        },
        {
          "type": "example",
          "title": "例題：USB",
          "content": "USB 3.0の説明として適切でないものはどれか。\n\nア：最大転送速度は5Gbpsである\nイ：ホットプラグに対応している\nウ：パラレルインタフェースである\nエ：バスパワーで周辺機器に電力供給できる",
          "solution": "答え：ウ\n\n解説：USBはシリアルインタフェースです（Universal Serial Bus）。ホットプラグ、バスパワーに対応し、USB 3.0の転送速度は5Gbpsです。"
        }
      ]
    },
    {
      "id": 5,
      "title": "割込み処理",
      "sections": [
        {
          "type": "text",
          "content": "割込みは、CPUが現在の処理を一時中断して、緊急度の高い処理を優先的に実行する仕組みです。効率的なシステム運用に不可欠な機能です。"
        },
        {
          "type": "table",
          "headers": ["割込みの種類", "発生原因", "例"],
          "rows": [
            ["外部割込み", "外部装置からの信号", "キーボード入力、タイマー"],
            ["内部割込み", "プログラム実行中の異常", "ゼロ除算、オーバーフロー"],
            ["ソフトウェア割込み", "プログラムからの要求", "システムコール"]
          ]
        },
        {
          "type": "highlight",
          "icon": "💡",
          "title": "割込み処理の流れ",
          "content": "1. 割込み発生、2. 実行中の処理を中断・退避、3. 割込みハンドラ実行、4. 元の処理に復帰、という流れで処理されます。"
        },
        {
          "type": "text",
          "content": "割込み処理の詳細な動作を見てみましょう。"
        },
        {
          "type": "list",
          "items": [
            "割込み要求：I/Oデバイスなどが割込み信号を送出",
            "割込み受付：CPUが割込みを検出し、受け付けるか判断",
            "コンテキスト保存：実行中のプログラムの状態（レジスタ等）を保存",
            "割込みハンドラ実行：割込み処理ルーチンを実行",
            "コンテキスト復帰：保存した状態を復元し、元の処理を再開"
          ]
        },
        {
          "type": "highlight",
          "icon": "⚡",
          "title": "割込み優先度",
          "content": "複数の割込みが同時に発生した場合、優先度の高い割込みから処理されます。一般的に、ハードウェア障害 > タイマー > I/O > ソフトウェア割込み の順です。"
        },
        {
          "type": "table",
          "headers": ["用語", "意味"],
          "rows": [
            ["多重割込み", "割込み処理中にさらに割込みを受け付ける"],
            ["割込みマスク", "特定の割込みを一時的に禁止する"],
            ["ベクタ割込み", "割込み要因ごとに異なる処理ルーチンを直接呼び出す"],
            ["ポーリング", "CPUが定期的にI/Oデバイスの状態を確認する（割込みを使わない）"]
          ]
        },
        {
          "type": "example",
          "title": "例題：割込み処理",
          "content": "I/Oデバイスからの入力完了を知らせる割込みは何に分類されるか。\n\nア：内部割込み\nイ：外部割込み\nウ：ソフトウェア割込み\nエ：プログラム割込み",
          "solution": "答え：イ\n\n解説：I/Oデバイスなど外部装置からの信号による割込みは外部割込みに分類されます。内部割込みはプログラム実行中の異常（ゼロ除算など）で発生します。"
        },
        {
          "type": "highlight",
          "icon": "📌",
          "title": "試験対策のまとめ",
          "content": "バスの種類（データ/アドレス/制御）、入出力制御方式（プログラム制御/DMA/チャネル）、インタフェース（パラレル/シリアル、USB等の規格）、割込み処理の流れを理解しましょう。"
        }
      ]
    }
  ]
}
