{
  "topicId": "tech-3-3-4",
  "title": "トランザクション処理",
  "flashcards": [
    {
      "id": "tech-3-3-4-fc-1",
      "front": "ACID特性の4つとは？各特性が違反した場合の問題は？",
      "back": "①原子性（Atomicity）：全て成功 or 全て失敗（違反：一部だけ成功し、データ消失）\n②一貫性（Consistency）：整合性を保つ（違反：総残高が変わる）\n③独立性（Isolation）：他トランザクションの影響を受けない（違反：競合状態でデータが壊れる）\n④永続性（Durability）：コミット後は永続的（違反：停電でデータが消える）",
      "importance": 5
    },
    {
      "id": "tech-3-3-4-fc-2",
      "front": "トランザクションとは？具体例は？",
      "back": "一連の操作をまとめた論理的な処理単位。「全て成功」または「全て失敗」のどちらかであり、途中の状態は存在しない。\n\n具体例：銀行振込\n①A口座から引き落とし\n②B口座へ入金\n→ この2つの操作は1つのトランザクション。一方が失敗したら両方とも取り消される（原子性）",
      "importance": 5
    },
    {
      "id": "tech-3-3-4-fc-3",
      "front": "共有ロック（S-Lock）と専有ロック（X-Lock）の違いは？",
      "back": "共有ロック（S-Lock）：読み取り専用。複数トランザクションが同時に取得可能。他のトランザクションは読み取り○、書き込み×（待機）\n例：商品一覧を複数ユーザーが同時に閲覧\n\n専有ロック（X-Lock）：書き込み用。1つのトランザクションのみが取得可能。他のトランザクションは読み取り×（待機）、書き込み×（待機）\n例：在庫数を更新中は他のトランザクションは待機",
      "importance": 5
    },
    {
      "id": "tech-3-3-4-fc-4",
      "front": "排他制御とは？なぜ必要か？",
      "back": "複数のトランザクションが同時に同じデータにアクセスする際、データの整合性を保つための仕組み。主な手法はロック。\n\n必要性：排他制御がないと、同時に在庫を読み取って更新した場合、在庫の不整合が発生する（10個→ユーザー1が5個購入、ユーザー2が5個購入→本来0個のはずが5個になる）",
      "importance": 4
    },
    {
      "id": "tech-3-3-4-fc-5",
      "front": "デッドロックとは？発生条件と解決方法は？",
      "back": "複数のトランザクションが互いにロックを待ち合って、永久に処理が進まなくなる状態。\n\n発生条件（4つ全て必要）：①相互排除、②占有と待機、③非プリエンプション、④循環待機\n\n解決方法：①デッドロック検出（発生したら一方をロールバック）、②デッドロック回避（ロック順序統一など）、③タイムアウト（一定時間待ってもロック取得できなければロールバック）",
      "importance": 5
    },
    {
      "id": "tech-3-3-4-fc-6",
      "front": "COMMITとROLLBACKの違いは？具体例は？",
      "back": "COMMIT：トランザクションの変更を確定し、データベースに永続的に反映\n例：振込成功→残高が確定（Aさん40,000円、Bさん40,000円）\n\nROLLBACK：トランザクションの変更を取り消し、トランザクション開始前の状態に戻す\n例：振込失敗（口座番号Bが存在しない）→残高が元に戻る（Aさん50,000円）",
      "importance": 5
    },
    {
      "id": "tech-3-3-4-fc-7",
      "front": "チェックポイント（Checkpoint）とは？役割は？",
      "back": "トランザクションログを定期的にデータベースに反映させ、障害発生時のリカバリ時間を短縮する仕組み。\n\n役割：チェックポイントを取得することで、それ以前のトランザクションはリカバリ不要になる。例えば、時刻50にチェックポイントを取得し、時刻100に障害が発生した場合、時刻50からのログのみ再生すれば良い（時刻0からのログを全て再生する必要がない）",
      "importance": 4
    },
    {
      "id": "tech-3-3-4-fc-8",
      "front": "2相コミット（2PC）とは？フェーズ1と2の内容は？",
      "back": "分散データベースで複数のサーバーにまたがるトランザクションを、全てのサーバーで一貫してコミットまたはロールバックするプロトコル。\n\nフェーズ1（準備）：全サーバーに「コミット可能か？」を問い合わせ\n→ 全員「YES」ならフェーズ2へ、1つでも「NO」なら全員ロールバック\n\nフェーズ2（コミット）：全サーバーに「コミット実行」を指示",
      "importance": 4
    },
    {
      "id": "tech-3-3-4-fc-9",
      "front": "ロールフォワードとロールバックの違いは？",
      "back": "ロールフォワード（Roll Forward）：チェックポイント後のログを再生し、コミット済みトランザクションを復元\n例：T1（コミット済み）の変更を再適用\n\nロールバック（Roll Back）：ログを逆再生して未コミットトランザクションを取り消し\n例：T2（未コミット）の変更を取り消し\n\nシステム障害時は両方を実行：①ロールフォワードで確定済みデータを復元、②ロールバックで中途半端なデータを削除",
      "importance": 4
    },
    {
      "id": "tech-3-3-4-fc-10",
      "front": "ロックの粒度とは？3種類と並行性の関係は？",
      "back": "ロックの粒度（範囲）には3種類：\n①行レベルロック（1行のみロック）：並行性が高い、管理が複雑\n②ページレベルロック（複数行を含むページ単位）：中間\n③表レベルロック（表全体をロック）：並行性が低い、管理が簡単\n\n関係：粒度が細かい（行レベル）ほど並行性が高く、粒度が粗い（表レベル）ほど並行性が低下",
      "importance": 3
    },
    {
      "id": "tech-3-3-4-fc-11",
      "front": "デッドロック発生の4条件とは？",
      "back": "①相互排除（Mutual Exclusion）：資源を排他的に使用\n②占有と待機（Hold and Wait）：資源を保持しながら別の資源を待つ\n③非プリエンプション（No Preemption）：資源を強制的に取り上げられない\n④循環待機（Circular Wait）：AがBを待ち、BがCを待ち、CがAを待つ\n\n4つ全てが揃うとデッドロックが発生。どれか1つでも満たさなければデッドロックは発生しない",
      "importance": 4
    },
    {
      "id": "tech-3-3-4-fc-12",
      "front": "デッドロック対策3種類の長所と短所は？",
      "back": "①デッドロック検出：発生したら一方をロールバック\n長所：柔軟（どんな場合でも対応可能）\n短所：ロールバック後の再実行が必要\n\n②デッドロック回避：発生しないように設計（ロック順序統一など）\n長所：デッドロックが発生しない\n短所：設計が複雑、全トランザクションでルール統一が必要\n\n③タイムアウト：一定時間待ってもロック取得できなければロールバック\n長所：実装が簡単\n短所：デッドロックでなくても単に遅い場合も中断される",
      "importance": 4
    }
  ]
}
