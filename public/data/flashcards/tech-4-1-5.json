{
  "topicId": "tech-4-1-5",
  "title": "開発ツール",
  "flashcards": [
    {
      "id": "tech-4-1-5-fc-1",
      "front": "開発ツールの4つの主要カテゴリは？",
      "back": "①CASEツール（要件定義・設計支援）\n②バージョン管理ツール（履歴管理・共同開発）\n③統合開発環境（IDE、コード編集・ビルド・実行・デバッグ統合）\n④デバッガ（バグ特定・修正支援）",
      "importance": 5
    },
    {
      "id": "tech-4-1-5-fc-2",
      "front": "CASE（Computer Aided Software Engineering）ツールとは？",
      "back": "ソフトウェア開発の上流工程（要件定義・設計）を支援するツール。UML図・ER図の作成、設計図からのコード自動生成、ドキュメント自動生成などの機能を提供。例：Enterprise Architect、Astah",
      "importance": 5
    },
    {
      "id": "tech-4-1-5-fc-3",
      "front": "上流CASE、下流CASE、統合CASEの違いは？",
      "back": "上流CASE：要件定義・設計（UML図作成、設計書生成）\n下流CASE：実装・テスト（コード自動生成、テストケース生成）\n統合CASE（I-CASE）：上流と下流を統合し、設計からコード生成まで一貫して支援",
      "importance": 4
    },
    {
      "id": "tech-4-1-5-fc-4",
      "front": "バージョン管理ツールの主なメリット5つは？",
      "back": "①変更履歴の記録（いつ、誰が、何を変更したか追跡）\n②過去のバージョンに戻せる（ロールバック）\n③複数人での同時開発（競合を自動検出・解決）\n④ブランチによる並行開発（本番環境を壊さず新機能開発）\n⑤バックアップ（リモートリポジトリに保存）",
      "importance": 5
    },
    {
      "id": "tech-4-1-5-fc-5",
      "front": "Gitの分散型とSVNの集中型の違いは？",
      "back": "Git（分散型）：各開発者がローカルに完全な履歴を持つ、高速、ブランチが軽量、オフライン作業可能\nSVN（集中型）：中央サーバーで履歴を一元管理、シンプル、ファイル単位の管理が容易、ネットワーク必須",
      "importance": 4
    },
    {
      "id": "tech-4-1-5-fc-6",
      "front": "Gitの基本用語6つは？",
      "back": "①リポジトリ：コードと履歴を保存する場所\n②コミット：変更を履歴として記録\n③ブランチ：開発の分岐（main、develop、feature等）\n④マージ：ブランチを統合\n⑤プッシュ：ローカル→リモートに送信\n⑥プル：リモート→ローカルに取得",
      "importance": 5
    },
    {
      "id": "tech-4-1-5-fc-7",
      "front": "IDE（統合開発環境）とは？主な機能は？",
      "back": "コードエディタ、コンパイラ、デバッガ、ビルドツール等を統合したツール。主な機能：①コード補完、②シンタックスハイライト、③エラー検出、④リファクタリング支援、⑤デバッガ統合、⑥ビルド・実行、⑦Git連携、⑧テスト実行",
      "importance": 5
    },
    {
      "id": "tech-4-1-5-fc-8",
      "front": "主なIDEと対応言語は？",
      "back": "Visual Studio Code：JavaScript、Python、汎用（拡張機能で多言語）\nIntelliJ IDEA：Java、Kotlin、Android開発\nEclipse：Java、C++、PHP\nVisual Studio：C#、Windowsアプリ\nXcode：Swift、iOS/macOSアプリ",
      "importance": 4
    },
    {
      "id": "tech-4-1-5-fc-9",
      "front": "デバッガの主な機能5つは？",
      "back": "①ブレークポイント：指定行で実行を一時停止\n②ステップ実行：1行ずつ実行（F10：ステップオーバー、F11：ステップイン）\n③ウォッチ式：変数の値をリアルタイムで監視\n④コールスタック：関数呼び出しの履歴を表示\n⑤条件付きブレークポイント：特定条件を満たした時のみ停止",
      "importance": 5
    },
    {
      "id": "tech-4-1-5-fc-10",
      "front": "デバッグの基本的な流れは？",
      "back": "①バグの発生を確認→②仮説を立てる→③ブレークポイントを設定→④デバッグ実行→⑤変数の値を確認（ウォッチ式）→⑥ステップ実行で追跡→⑦原因を特定→⑧コードを修正→⑨再テスト",
      "importance": 4
    },
    {
      "id": "tech-4-1-5-fc-11",
      "front": "CASEツールのメリットとデメリットは？",
      "back": "【メリット】設計図作成の効率化、コード自動生成、設計変更が容易、ドキュメント自動生成、整合性チェック\n【デメリット】ツール習得コスト、小規模開発では不要、自動生成コードの品質問題",
      "importance": 3
    },
    {
      "id": "tech-4-1-5-fc-12",
      "front": "IDEとメモ帳でのコーディングの生産性の違いは？",
      "back": "IDEの優位性：①コード補完で入力速度向上、②入力中にエラー検出（赤い波線）、③シンタックスハイライトで見やすい、④F5キーで即実行、⑤デバッガで変数監視\n→生産性は約2倍（100行を60分→30分）",
      "importance": 3
    }
  ]
}
