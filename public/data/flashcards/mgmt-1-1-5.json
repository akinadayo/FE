{
  "topicId": "mgmt-1-1-5",
  "title": "品質管理",
  "flashcards": [
    {
      "id": "mgmt-1-1-5-fc-1",
      "front": "プロジェクト品質管理の3つの主要プロセスは? それぞれの目的は?",
      "back": "①品質計画(Quality Planning):\n目的:品質目標と品質基準を定義\n活動:品質方針策定、品質指標設定、品質管理計画書作成\n\n②品質保証(Quality Assurance, QA):\n目的:プロセスが適切に実施されているか監視\n活動:プロセス監査、標準遵守の確認、改善提案\n対象:開発プロセス、レビュープロセス、テストプロセス\n\n③品質管理(Quality Control, QC):\n目的:成果物が品質基準を満たしているか検証\n活動:レビュー、テスト、検査、不具合修正\n対象:設計書、コード、テストケース\n\nQAは「プロセスの品質」、QCは「成果物の品質」を対象とする点が重要。",
      "importance": 5
    },
    {
      "id": "mgmt-1-1-5-fc-2",
      "front": "品質保証(QA)と品質管理(QC)の違いは?",
      "back": "【品質保証(QA: Quality Assurance)】\n対象:プロセスの品質\n活動:プロセス監査、標準遵守の確認、改善提案\n目的:プロセスが適切に実施されているか監視\n性質:予防的(問題を未然に防ぐ)\n担当:品質保証チーム\n\n【品質管理(QC: Quality Control)】\n対象:成果物の品質\n活動:レビュー、テスト、検査、不具合修正\n目的:成果物が品質基準を満たしているか検証\n性質:検出的(問題を発見して修正)\n担当:開発チーム、テストチーム\n\n例:\nQA:「コードレビューが全コードで実施されているか監査」\nQC:「コードレビューで実際にバグを発見して修正」",
      "importance": 5
    },
    {
      "id": "mgmt-1-1-5-fc-3",
      "front": "品質コストの法則とは? なぜ早期の品質確保が重要か?",
      "back": "品質コストの法則:\nバグの修正コストは、発見が遅れるほど指数関数的に増大する。\n\n一般的な比率:\n- 開発フェーズ(設計・コーディング):修正コスト = 1\n- テストフェーズ:修正コスト = 10(開発の10倍)\n- 本番稼働後:修正コスト = 100(開発の100倍)\n\n理由:\n①影響範囲が広がる(設計のバグは全コードに影響)\n②修正の複雑さ(既存機能への影響を確認する必要)\n③顧客への影響(本番稼働後は業務停止、信頼失墜)\n\n結論:\n早期の品質確保(要件定義レビュー、設計レビュー)は、長期的にはコスト削減につながる。品質を犠牲にした短期的なコスト削減は、後で大きなコスト増を招く。",
      "importance": 5
    },
    {
      "id": "mgmt-1-1-5-fc-4",
      "front": "インスペクション(Inspection)とウォークスルー(Walkthrough)の違いは?",
      "back": "【インスペクション(Inspection)】\n性質:正式なレビュー\n役割分担:あり(モデレータ、レビューア、記録者)\n準備:各レビューアが個別に事前準備(問題点リストアップ)\n進行:モデレータが進行、体系的にレビュー\n利点:精度が高い、体系的\n欠点:準備に時間がかかる\n代表例:Fagan Inspection\n\n【ウォークスルー(Walkthrough)】\n性質:非公式なレビュー\n役割分担:なし(作成者が説明役)\n準備:作成者が説明を準備\n進行:作成者が説明、レビューアが質問・指摘\n利点:軽量、柔軟、知識共有\n欠点:体系的でない、問題を見逃す可能性\n\n使い分け:\n- 重要な成果物(要件定義書、基本設計書):インスペクション\n- 軽量なレビュー(コードレビュー):ウォークスルー",
      "importance": 4
    },
    {
      "id": "mgmt-1-1-5-fc-5",
      "front": "レビューの主な利点は? レビューの注意点は?",
      "back": "【レビューの利点】\n①早期のバグ発見:\n  - コーディング前の設計段階でバグを発見できる\n  - レビューで30～70%のバグを発見可能(テスト前に発見)\n\n②コスト対効果が高い:\n  - 1時間のレビューで10時間のデバッグ時間を削減(10倍の効果)\n\n③人間の判断が必要な問題を発見:\n  - アルゴリズムの選択、設計の妥当性、保守性\n\n④知識の共有:\n  - レビューを通じてチームメンバーが学習\n\n【レビューの注意点】\n①人格攻撃をしない:成果物を評価、人を評価しない\n②建設的なフィードバック:問題点だけでなく改善案を提示\n③時間を守る:レビュー会議は2時間以内(集中力の限界)\n④事前準備:レビューアは事前に成果物を読む\n⑤全員参加:レビューはチーム全体の品質向上の機会",
      "importance": 5
    },
    {
      "id": "mgmt-1-1-5-fc-6",
      "front": "PDCAサイクルとは? 品質管理での活用例は?",
      "back": "PDCAサイクル:\n継続的にプロセスを改善する手法。4つのステップを繰り返す。\n\n①Plan(計画):\n  品質目標と実施計画を立てる\n  例:コードレビュー合格率を90%にする\n\n②Do(実行):\n  計画に従ってプロセスを実施\n  例:レビューガイドラインを作成、教育実施\n\n③Check(確認):\n  実施結果を測定し、計画と比較\n  例:1か月後、合格率を測定 → 82%(目標未達)\n\n④Act(改善):\n  差異があれば原因を分析し、改善策を実施\n  例:原因分析 → レビューア追加、レビュー時間確保\n\nPDCAを繰り返すことで、プロセスが継続的に改善される。品質保証では、PDCAサイクルを用いてプロセス(レビュー、テスト、コーディング)を改善する。",
      "importance": 5
    },
    {
      "id": "mgmt-1-1-5-fc-7",
      "front": "主な品質指標(Quality Metrics)は? それぞれの意味と目標値は?",
      "back": "①バグ密度(Defect Density):\n  計算:バグ数 ÷ ソースコード行数 × 1,000\n  意味:コードの品質(バグが少ないほど高品質)\n  目標:1.0以下(業界標準:3～5)\n\n②コードカバレッジ(Code Coverage):\n  計算:実行されたコード行数 ÷ 総コード行数 × 100\n  意味:テストの網羅性(多くのコードをテストできているか)\n  目標:80%以上\n\n③バグ発見率:\n  計算:発見したバグ数 ÷ 総バグ数 × 100\n  意味:テストの効果(どれだけバグを発見できたか)\n  目標:80%以上\n\n④レビュー効率:\n  計算:レビューで発見したバグ数 ÷ レビュー時間\n  意味:レビューの効果(効率的にバグを発見できているか)\n  目標:3個/時間以上\n\n品質指標を定期的に測定し、品質目標と比較して改善策を実施する。",
      "importance": 5
    },
    {
      "id": "mgmt-1-1-5-fc-8",
      "front": "テスト計画の主な要素は? テストの完了基準とは?",
      "back": "【テスト計画の主な要素】\n①テスト戦略:\n  - テスト方針(全機能をテスト、重要機能を詳細にテスト)\n  - テストレベル(単体、結合、システム、受け入れ)\n  - テスト手法(ブラックボックス、ホワイトボックス)\n\n②テストスケジュール:\n  - 各テストレベルの期間、担当者\n\n③テストリソース:\n  - テスト担当者、テスト環境、テストツール\n\n④テストの完了基準:\n  - 全テストケースを実行(テストカバレッジ100%)\n  - 重大バグ:0件\n  - 軽微バグ:〇件以下\n  - コードカバレッジ:〇%以上\n  - 顧客の受け入れテスト合格\n\nテストの完了基準を満たさない場合、リリースを延期し、品質を確保する。",
      "importance": 4
    },
    {
      "id": "mgmt-1-1-5-fc-9",
      "front": "テストケースの構成要素は? テストケース設計のポイントは?",
      "back": "【テストケースの構成要素】\n①テストケースID:TC-001\n②テスト項目:何をテストするか(例:正常ログイン)\n③テスト手順:操作手順(例:①ID入力 ②パスワード入力 ③ログイン)\n④テストデータ:入力データ(例:ID=test001、パスワード=Pass1234)\n⑤期待結果:期待される出力(例:ログイン成功、ホーム画面表示)\n\n【テストケース設計のポイント】\n①正常系テスト:仕様通りの動作を確認\n②異常系テスト:エラーケースを確認(入力エラー、権限エラー)\n③境界値テスト:入力の境界値を確認(最小値、最大値、最小値-1、最大値+1)\n④セキュリティテスト:攻撃に対する防御を確認(SQLインジェクション、XSS)\n\nテストケースは、要件定義書や設計書を基に作成。網羅性を高めるため、テスト技法(同値分割、境界値分析)を活用。",
      "importance": 4
    },
    {
      "id": "mgmt-1-1-5-fc-10",
      "front": "不具合管理のバグ優先度と重要度の違いは? 修正順序の決定方法は?",
      "back": "【優先度(Priority)】\n意味:どれだけ早く修正すべきか(スケジュールへの影響)\n評価:高・中・低\n\n【重要度(Severity)】\n意味:システムへの影響の大きさ(機能への影響)\n評価:致命的・重大・軽微\n\n【修正順序の決定(優先度×重要度の組み合わせ)】\n①優先度:高、重要度:高 → すぐに修正\n  例:決済機能が動かない(システムダウン)\n\n②優先度:高、重要度:低 → リリース前に修正\n  例:ロゴ画像の位置がずれている(見た目の問題だが目立つ)\n\n③優先度:低、重要度:高 → 次のリリースで修正\n  例:レアケースで発生する重大バグ(発生頻度は低いが影響大)\n\n④優先度:低、重要度:低 → 修正しない可能性もある\n  例:マイナーな表示崩れ(影響小、発生頻度低)\n\nバグトラッキングシステム(Jira、Redmine)で管理。",
      "importance": 4
    },
    {
      "id": "mgmt-1-1-5-fc-11",
      "front": "根本原因分析(RCA)とは? なぜなぜ分析(5 Whys)の手順は?",
      "back": "【根本原因分析(Root Cause Analysis, RCA)】\n定義:問題の表面的な原因ではなく、根本的な原因を特定し、再発を防止する手法。\n\n【なぜなぜ分析(5 Whys)】\n手順:問題に対して「なぜ?」を5回繰り返し、根本原因にたどり着く。\n\n例:\n問題:バグが多い\n①なぜバグが多い? → テストが不足\n②なぜテストが不足? → テスト時間が確保されていない\n③なぜテスト時間が確保されていない? → スケジュールが厳しい\n④なぜスケジュールが厳しい? → 見積もりが甘かった\n⑤なぜ見積もりが甘かった? → 過去の実績データを活用していなかった\n\n根本原因:過去の実績データを活用していない見積もりプロセス\n\n対策:見積もりプロセスを改善(過去の実績データを蓄積・活用)\n\n根本原因に対策することで、同じ問題の再発を防げる。",
      "importance": 4
    },
    {
      "id": "mgmt-1-1-5-fc-12",
      "front": "品質管理の成功要因とベストプラクティスは?",
      "back": "【品質管理の成功要因】\n①経営層のコミットメント:品質を重視、リソース確保\n②明確な品質目標:SMART(Specific、Measurable、Achievable、Relevant、Time-bound)\n③早期の品質確保:要件定義、設計段階でレビュー実施\n④継続的な測定と改善:品質指標を定期測定、PDCAサイクル\n⑤チーム全体の品質意識:QAチームだけでなく全員の責任\n\n【ベストプラクティス】\n①レビューの徹底:要件定義、設計、コードレビューを全て実施\n②自動テストの活用:単体テスト、結合テストを自動化\n③CI/CD:コミットごとに自動ビルド・テスト実行\n④静的解析ツール:コーディング規約違反、潜在バグを自動検出\n⑤品質指標のダッシュボード化:リアルタイムで可視化\n⑥振り返り会議:プロジェクト終了後、成功要因と改善点を議論\n\n品質第一の文化を育てることが、持続的なプロジェクト成功につながる。",
      "importance": 5
    }
  ]
}
