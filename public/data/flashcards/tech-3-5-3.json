{
  "topicId": "tech-3-5-3",
  "title": "認証とアクセス制御",
  "flashcards": [
    {
      "id": "tech-3-5-3-fc-1",
      "front": "認証の三要素とは？各要素の具体例は？",
      "back": "①知識（Something You Know）:\n本人だけが知っている情報\n例: パスワード、暗証番号、秘密の質問\n\n②所有物（Something You Have）:\n本人だけが持っている物\n例: ICカード、スマートフォン、ワンタイムパスワードトークン\n\n③生体（Something You Are）:\n本人の身体的特徴\n例: 指紋、顔、虹彩、声紋、静脈パターン\n\nこれらを組み合わせることで、セキュリティ強度を高めることができます（多要素認証）。",
      "importance": 5
    },
    {
      "id": "tech-3-5-3-fc-2",
      "front": "パスワードをハッシュ化して保存する理由は？ハッシュ化の仕組みは？",
      "back": "【理由】\n平文（元のパスワード）を保存すると、データベースが漏洩した際にパスワードが解読されてしまいます。ハッシュ化することで、漏洩しても元のパスワードを逆算できません。\n\n【仕組み】\n①ユーザー登録時、パスワードをハッシュ関数（SHA-256など）で一方向暗号化\n  例: SHA-256(\"MyP@ssw0rd\") = \"e3b0c44...（64文字のハッシュ値）\"\n②データベースにハッシュ値のみ保存（平文は保存しない）\n③ログイン時、入力されたパスワードをハッシュ化し、保存されているハッシュ値と比較\n④一致すれば認証成功\n\n【対策】\nレインボーテーブル攻撃を防ぐため、ソルト（ランダムな文字列）を追加してハッシュ化することが推奨されます。",
      "importance": 5
    },
    {
      "id": "tech-3-5-3-fc-3",
      "front": "パスワード攻撃の4つの種類と対策は？",
      "back": "①総当たり攻撃（Brute Force Attack）:\n考えられる全てのパスワードを試す攻撃\n対策: パスワードを長く複雑にする、ログイン失敗回数を制限\n\n②辞書攻撃（Dictionary Attack）:\n辞書にある単語や、よく使われるパスワードのリストを試す攻撃\n対策: 辞書にない文字列を使う\n\n③パスワードリスト攻撃:\n他のサービスから漏洩したユーザーID・パスワードのリストを使い、複数のサービスで試す攻撃\n対策: 同じパスワードを使い回さない\n\n④レインボーテーブル攻撃:\n事前計算されたハッシュ値のテーブルを使い、ハッシュ値から元のパスワードを逆引きする攻撃\n対策: ソルト（ランダムな文字列）を追加してハッシュ化",
      "importance": 5
    },
    {
      "id": "tech-3-5-3-fc-4",
      "front": "バイオメトリクス認証の利点と欠点は？FRRとFARとは？",
      "back": "【利点】\n①偽造が困難\n②紛失・忘れる心配がない\n③利便性が高い（パスワード入力不要）\n\n【欠点】\n①誤認識の可能性（本人拒否率FRR、他人受入率FAR）\n②認証装置のコストが高い\n③身体的特徴が変化する可能性（怪我、加齢）\n④プライバシーの懸念（生体情報の漏洩は取り返しがつかない）\n\n【FRRとFAR】\nFRR（False Rejection Rate）: 本人拒否率 - 本人を誤って拒否する確率\nFAR（False Acceptance Rate）: 他人受入率 - 他人を誤って受け入れる確率\nEER（Equal Error Rate）: 等価エラー率 - FRRとFARが等しくなる点。EERが低いほど精度が高い。",
      "importance": 4
    },
    {
      "id": "tech-3-5-3-fc-5",
      "front": "多要素認証（MFA）とは？二要素認証の具体例は？",
      "back": "【多要素認証（MFA）】\n認証の三要素（知識、所有物、生体）のうち、2つ以上を組み合わせて認証する方式。1つの要素が破られても、他の要素で防御できるため、セキュリティが大幅に向上します。\n\n【二要素認証の具体例】\n①パスワード（知識）+ スマートフォンのワンタイムパスワード（所有物）\n  例: オンラインバンキングのログイン\n②パスワード（知識）+ 指紋認証（生体）\n  例: スマートフォンのロック解除\n③ICカード（所有物）+ 暗証番号（知識）\n  例: ATMでの現金引き出し\n\n【効果】\nMicrosoftの調査によると、二要素認証により99.9%の自動攻撃を防げるとされています。",
      "importance": 5
    },
    {
      "id": "tech-3-5-3-fc-6",
      "front": "ワンタイムパスワード（OTP）の2つの生成方式の違いは？",
      "back": "①TOTP（Time-based One-Time Password、時刻ベース）:\n生成方法: 現在時刻 + 秘密鍵\n有効期限: 30秒～1分\n具体例: Google Authenticator、Microsoft Authenticator\n利点: オフラインで生成可能、サーバと同期不要\n欠点: 時刻ずれで認証失敗の可能性\n\n②HOTP（HMAC-based One-Time Password、イベントベース）:\n生成方法: カウンタ（ログイン回数） + 秘密鍵\n有効期限: 無期限（1回使用まで）\n具体例: ハードウェアトークン（銀行のワンタイムパスワード生成器）\n利点: 時刻ずれの影響なし\n欠点: カウンタの同期が必要\n\n一般的にTOTPが広く使われています（スマートフォンアプリで利用可能）。",
      "importance": 4
    },
    {
      "id": "tech-3-5-3-fc-7",
      "front": "CAPTCHA（キャプチャ）とは？目的と種類は？",
      "back": "【CAPTCHA】\n人間とボット（自動プログラム）を区別するための認証技術。「Completely Automated Public Turing test to tell Computers and Humans Apart」の略。\n\n【目的】\n①スパム投稿の防止（掲示板、コメント欄）\n②総当たり攻撃の防止（ログイン画面）\n③自動登録の防止（無料サービスの大量登録）\n\n【種類】\n①テキストCAPTCHA: 歪んだ文字列を読み取る\n②画像CAPTCHA: 「信号機を全て選択してください」などの画像選択\n③reCAPTCHA v2: 「私はロボットではありません」のチェックボックス\n④reCAPTCHA v3: バックグラウンドでユーザーの行動を分析し、スコア化（ユーザー操作不要）\n\nreCAPTCHA v3は、シームレスに認証でき、ユーザー体験が向上します。",
      "importance": 4
    },
    {
      "id": "tech-3-5-3-fc-8",
      "front": "シングルサインオン（SSO）とは？利点と欠点は？",
      "back": "【SSO】\n1回の認証で複数のシステムやサービスにアクセスできる仕組み。ユーザーは、認証サーバ（IDプロバイダ）でログインすると、他のシステム（サービスプロバイダ）に自動的にログインできます。\n\n【利点】\n①ユーザーの利便性向上（複数のパスワードを覚える必要がない）\n②セキュリティの向上（パスワードの使い回しを防ぐ、統一的なパスワードポリシーを適用）\n③管理コストの削減（ユーザー管理を集中化）\n\n【欠点】\n①シングルポイント障害: 認証サーバが停止すると、全てのシステムにアクセスできなくなる\n②認証情報の漏洩: 認証サーバのパスワードが漏洩すると、全てのシステムにアクセスされる\n\n【実現方式】\nSAML（企業の社内システム）、OAuth（SNSログイン）、OpenID Connect",
      "importance": 5
    },
    {
      "id": "tech-3-5-3-fc-9",
      "front": "OAuth 2.0の流れ（Googleアカウントでログインする例）を簡潔に説明してください。",
      "back": "①ユーザーがWebサービスで「Googleアカウントでログイン」をクリック\n②WebサービスがユーザーをGoogleの認証ページにリダイレクト\n③ユーザーがGoogleアカウントでログイン\n④Googleが「Webサービスがあなたのプロフィール情報にアクセスすることを許可しますか?」と確認\n⑤ユーザーが「許可」をクリック\n⑥Googleが認可コードを発行し、Webサービスにリダイレクト\n⑦Webサービスが認可コードを使って、Googleからアクセストークンを取得\n⑧Webサービスがアクセストークンを使って、GoogleのAPIからプロフィール情報を取得\n⑨Webサービスがユーザーのアカウントを作成し、ログインを許可\n\n【重要】ユーザーはGoogleのパスワードをWebサービスに渡す必要がありません。",
      "importance": 5
    },
    {
      "id": "tech-3-5-3-fc-10",
      "front": "アクセス制御リスト（ACL）とは？ユーザーベースACLとグループベースACLの違いは？",
      "back": "【ACL】\n各リソース（ファイル、フォルダ、データベース）に対して、どのユーザーがどのような操作（読み取り、書き込み、実行、削除）を実行できるかを定義したリスト。任意アクセス制御（DAC）の実装方式の1つ。\n\n【ユーザーベースACL】\n個々のユーザーに対してアクセス権限を設定\n例: 「田中太郎」に「読み取り」権限を付与\n\n【グループベースACL】\nユーザーグループに対してアクセス権限を設定\n例: 「営業部グループ」に「読み取り、書き込み」権限を付与\n利点: ユーザー数が多い場合、グループ単位で管理できるため、管理が容易\n\n【アクセス権限の種類】\n読み取り（Read）、書き込み（Write）、実行（Execute）、削除（Delete）、フルアクセス（Full Control）",
      "importance": 4
    },
    {
      "id": "tech-3-5-3-fc-11",
      "front": "ロールベースアクセス制御（RBAC）とは？利点は？",
      "back": "【RBAC】\nユーザーの役割（ロール）に基づいてアクセス権限を決定する方式。ユーザーにロールを割り当て、ロールに対してアクセス権限を設定します。\n\n【利点】\n①管理が容易: ユーザー数が多くても、ロール単位で権限を管理できる\n②柔軟性: ユーザーの異動や役割変更に対応しやすい（ロールを変更するだけ）\n③最小権限の原則: 必要最小限の権限を付与できる\n\n【具体例】\nECサイトの管理システム:\n- システム管理者: 全ての機能にアクセス可能\n- 商品管理者: 商品の追加・編集・削除のみ\n- 注文管理者: 注文の確認・ステータス変更のみ\n- カスタマーサポート: 問い合わせの確認、注文の参照のみ\n\nRBACは、大規模な企業システムやクラウドサービス（AWS IAM、Azure RBAC）で広く使われています。",
      "importance": 5
    },
    {
      "id": "tech-3-5-3-fc-12",
      "front": "アクセス制御のベストプラクティス5つは？",
      "back": "①最小権限の原則（Principle of Least Privilege）:\nユーザーには、業務遂行に必要最小限の権限のみを付与。必要以上の権限を与えると、誤操作や不正アクセスのリスクが高まる。\n\n②職務分離（Separation of Duties）:\n重要な処理（支払い承認など）を複数の人が関与するようにし、1人が全ての権限を持たないようにする。不正を防止できる。\n\n③定期的な権限の見直し:\nユーザーの異動や退職に伴い、不要になった権限を削除。放置すると、元社員のアカウントが悪用されるリスクがある。\n\n④アクセスログの記録:\n誰がいつ何にアクセスしたかを記録し、不正アクセスを検知できるようにする。\n\n⑤多層防御（Defense in Depth）:\nアクセス制御だけでなく、暗号化、ファイアウォール、侵入検知システムなど、複数のセキュリティ対策を組み合わせる。",
      "importance": 5
    }
  ]
}
