{
  "topicId": "mgmt-1-1-2",
  "title": "プロジェクト統合マネジメント",
  "flashcards": [
    {
      "id": "mgmt-1-1-2-fc-1",
      "front": "プロジェクト憲章の目的と主要な記載内容は？誰が作成・承認するか？",
      "back": "目的:プロジェクトの開始を正式に承認し、プロジェクトマネージャに権限を付与する文書。\n\n主要な記載内容:\n①プロジェクトの目的(なぜ実施するのか)\n②プロジェクトの概要(何を作るのか)\n③ビジネスケース(期待される効果・ROI)\n④主要なステークホルダ\n⑤スケジュール・予算の概要\n⑥前提条件・制約条件\n⑦主要なリスク\n⑧プロジェクトマネージャの任命\n\n作成・承認者:経営層またはプロジェクトスポンサー\n\nプロジェクト憲章により、PMは予算執行、メンバーアサイン、スケジュール調整などの権限を得る。",
      "importance": 5
    },
    {
      "id": "mgmt-1-1-2-fc-2",
      "front": "プロジェクト計画書とプロジェクト憲章の違いは？",
      "back": "プロジェクト憲章:\n①目的:プロジェクトの開始を正式に承認\n②内容:「何を作るか」を定義(目的、概要、ビジネスケース)\n③作成者:経営層・プロジェクトスポンサー\n④作成時期:プロジェクト立ち上げ時(最初に作成)\n⑤レベル:高レベル(概要)\n\nプロジェクト計画書:\n①目的:プロジェクトの実行方法を定義\n②内容:「どうやって作るか」を定義(スコープ、スケジュール、コスト、品質、リスク、コミュニケーション、調達など)\n③作成者:プロジェクトマネージャ\n④作成時期:プロジェクト計画フェーズ(憲章の後)\n⑤レベル:詳細レベル(具体的な計画)\n\nプロジェクト憲章が「開始許可証」、プロジェクト計画書が「実行計画」。",
      "importance": 5
    },
    {
      "id": "mgmt-1-1-2-fc-3",
      "front": "WBS(作業分解構成図)の目的と作成ルールは？",
      "back": "目的:\nプロジェクトの成果物を階層的に分解し、①スコープを明確化、②スケジュール・コストを見積もりやすくする、③担当者を明確にする。\n\n作成ルール:\n①成果物ベースで分解:「何をするか」ではなく「何を作るか」で分解\n  例:○業務要件定義書 ×業務をヒアリングする\n\n②100%ルール:全ての作業を漏れなく含める\n\n③8/80ルール:最小単位の作業は8時間~80時間(1日~10日)\n\n④階層構造:通常3~5階層で分解\n  レベル1:プロジェクト全体\n  レベル2:主要な成果物(フェーズ)\n  レベル3:詳細な成果物\n  レベル4:ワークパッケージ(実際の作業単位)\n\n⑤一意なID付与:各要素に一意なIDを付与(例:1.2.1.1)\n\nWBSは、スコープ、スケジュール、コスト管理の基礎。",
      "importance": 5
    },
    {
      "id": "mgmt-1-1-2-fc-4",
      "front": "変更管理プロセスの6つのステップは？",
      "back": "①変更要求の受付:\nステークホルダから変更要求を受け付ける(変更要求書を作成)\n\n②変更の影響分析:\nスコープ、スケジュール、コスト、品質、リスクへの影響を分析\n例:工数2人月、コスト200万円、スケジュール1ヶ月遅延\n\n③変更管理委員会で審議:\n変更を承認するか却下するか審議\n参加者:PMO、PM、プロジェクトスポンサー\n\n④ベースラインの更新:\n承認された変更をベースラインに反映\nスコープ、スケジュール、コスト計画を更新\n\n⑤変更の実施:\n変更を実施し、ステークホルダに通知\n\n⑥変更の記録:\n変更履歴を記録(変更管理台帳に記録)\n\n変更管理により、スコープクリープを防止。",
      "importance": 5
    },
    {
      "id": "mgmt-1-1-2-fc-5",
      "front": "スコープクリープとは？防止方法は？",
      "back": "スコープクリープ(Scope Creep):\nプロジェクトのスコープが、際限なく拡大する現象。「この機能も追加してほしい」という要求が続き、スケジュール遅延、コスト超過、品質低下が発生。プロジェクト失敗の最大の原因の1つ。\n\n防止方法:\n①変更管理プロセスを確立:\n  全ての変更要求を記録し、影響分析、承認・却下を判断\n  承認されない変更は実施しない\n\n②スコープベースラインを明確化:\n  WBS、要件定義書をベースラインとして確定\n  変更はベースラインからの差分として管理\n\n③ステークホルダとの合意:\n  要件定義フェーズで、全ての要件を洗い出し、合意\n  「これ以上は追加しない」という合意\n\n④変更管理委員会の設置:\n  変更の承認・却下を判断する組織\n  PMだけでなく、スポンサー、PMOも参加\n\nスコープクリープを防ぐには、「NO」と言える勇気が必要。",
      "importance": 5
    },
    {
      "id": "mgmt-1-1-2-fc-6",
      "front": "構成管理の目的と対象は？バージョン管理との関係は？",
      "back": "目的:\nプロジェクトの成果物(文書、プログラムコード、設定ファイル)のバージョンを管理し、誰が・いつ・何を変更したかを追跡。\n\n効果:\n①成果物の最新版を特定できる\n②過去のバージョンに戻せる(ロールバック)\n③複数人が同時に作業しても、変更が競合しない\n④変更履歴を追跡できる\n\n対象:\n①文書:要件定義書、設計書、テスト計画書\n②プログラムコード:ソースコード、スクリプト\n③データベーススキーマ:テーブル定義、インデックス\n④設定ファイル:サーバ設定、環境変数\n⑤インフラ:サーバ構成、ネットワーク構成\n\nバージョン管理との関係:\n構成管理の一部がバージョン管理。\n構成管理は、バージョン管理 + ベースライン管理 + 変更管理。",
      "importance": 5
    },
    {
      "id": "mgmt-1-1-2-fc-7",
      "front": "バージョン番号のルール(セマンティックバージョニング)は？",
      "back": "メジャー.マイナー.パッチ\n例:v1.0.0 → v1.1.0 → v2.0.0\n\n①メジャーバージョン(最初の数字):\n大幅な変更(全体の構成変更、章の追加・削除、後方互換性のない変更)\n例:v1.0.0 → v2.0.0\n\n②マイナーバージョン(2番目の数字):\n中程度の変更(機能の追加・修正、後方互換性のある変更)\n例:v1.0.0 → v1.1.0\n\n③パッチ(3番目の数字、リビジョン):\n軽微な変更(バグ修正、誤字修正、文言修正)\n例:v1.0.0 → v1.0.1\n\n例:\nv1.0.0:初版\nv1.1.0:機能追加(在庫管理機能を追加)\nv1.1.1:バグ修正(在庫計算のバグを修正)\nv2.0.0:全体構成変更(要件定義書の章立てを変更)\n\nバージョン番号により、変更の大きさを把握できる。",
      "importance": 4
    },
    {
      "id": "mgmt-1-1-2-fc-8",
      "front": "ベースライン(Baseline)とは？3つの代表的なベースラインは？",
      "back": "ベースライン(Baseline):\n正式に承認された成果物のバージョン。プロジェクトの基準となり、以降の変更は全てベースラインからの差分として管理される。\n\n効果:\n①プロジェクトの進捗を測定できる(ベースラインと実績を比較)\n②変更を適切にコントロールできる(ベースラインからの変更は、変更管理プロセスで承認が必要)\n\n3つの代表的なベースライン:\n①スコープベースライン:\n  WBS、要件定義書\n  「何を作るか」の基準\n\n②スケジュールベースライン:\n  ガントチャート、アローダイアグラム\n  「いつまでに作るか」の基準\n\n③コストベースライン:\n  予算、コスト計画\n  「いくらで作るか」の基準\n\nベースラインは、プロジェクト管理の「基準点」。",
      "importance": 5
    },
    {
      "id": "mgmt-1-1-2-fc-9",
      "front": "成果物の承認プロセスの流れは？レビューの種類は？",
      "back": "承認プロセスの流れ:\n①成果物を作成(例:要件定義書)\n②内部レビュー(開発チーム内)\n③指摘事項を修正\n④外部レビュー(ステークホルダ)\n⑤指摘事項を修正\n⑥最終承認(プロジェクトスポンサー)\n⑦ベースラインとして確定\n⑧ステークホルダに通知\n\nレビューの種類:\n①インスペクション(Inspection):\n  正式なレビュー会議。事前準備が必要。厳格だが時間がかかる。\n  対象:重要な成果物(要件定義書、設計書)\n\n②ウォークスルー(Walkthrough):\n  作成者が説明し、参加者が質問・指摘。軽量。\n  対象:中程度の成果物(画面設計、テスト計画書)\n\n③ピアレビュー(Peer Review):\n  同僚同士で相互レビュー。気軽に実施。\n  対象:プログラムコード、文書\n\n④デスクチェック:\n  作成者本人が見直す。最も基本的なレビュー。\n\nレビューにより、バグを早期に発見、品質向上。",
      "importance": 4
    },
    {
      "id": "mgmt-1-1-2-fc-10",
      "front": "プロジェクト統合マネジメントの主要プロセスは？",
      "back": "プロジェクト統合マネジメントは、プロジェクト全体を調整する中心的な役割。\n\n主要プロセス:\n①プロジェクト憲章の作成:\n  プロジェクトの開始を正式に承認\n\n②プロジェクト計画書の作成:\n  プロジェクトの実行方法を定義\n\n③プロジェクト作業の指揮・マネジメント:\n  計画に基づいて作業を実行、チームを指揮\n\n④プロジェクト作業の監視・コントロール:\n  進捗を監視し、必要に応じて是正措置\n\n⑤統合変更管理:\n  変更要求を評価・承認・実施\n\n⑥プロジェクトまたはフェーズの終結:\n  成果物を納品、プロジェクトを正式に終了\n  教訓を記録\n\nこれらのプロセスにより、プロジェクト全体を統合的に管理。",
      "importance": 4
    },
    {
      "id": "mgmt-1-1-2-fc-11",
      "front": "プロジェクトマネージャの権限はどこから得られるか？権限の範囲は？",
      "back": "権限の源泉:\nプロジェクト憲章により、プロジェクトスポンサーがプロジェクトマネージャに権限を付与。プロジェクト憲章がないと、PMは正式な権限を持たない。\n\n権限の範囲(プロジェクト憲章に記載):\n①予算執行:\n  承認された予算の範囲内で、費用を執行\n  例:予算5,000万円の範囲内で、開発費、インフラ費を執行\n\n②メンバーアサイン:\n  プロジェクトメンバーを選定、アサイン\n  例:社内メンバー3名、外部ベンダー3名をアサイン\n\n③スケジュール調整:\n  タスクのスケジュールを調整\n  例:開発期間を5ヶ月に設定\n\n④スコープ変更の承認:\n  軽微なスコープ変更を承認(重大な変更は変更管理委員会で審議)\n\n⑤リスク対応:\n  リスクが発生した際、対応策を決定・実施\n\n制約:\nPMの権限は、プロジェクト憲章で定義された範囲内。予算超過、スコープの大幅変更は、スポンサーの承認が必要。",
      "importance": 4
    },
    {
      "id": "mgmt-1-1-2-fc-12",
      "front": "構成管理システム(Git)の主要機能は？",
      "back": "Git(バージョン管理システム)の主要機能:\n\n①コミット(Commit):\n  変更をローカルリポジトリに記録\n  コミットメッセージ、コミットID、コミット者、日時を記録\n\n②プッシュ(Push):\n  ローカルリポジトリの変更を、リモートリポジトリに送信\n  チーム全体で共有\n\n③プル(Pull):\n  リモートリポジトリの最新版を、ローカルリポジトリにダウンロード\n\n④マージ(Merge):\n  複数の変更を統合\n  競合(Conflict)が発生した場合、手動で解決\n\n⑤ブランチ(Branch):\n  開発版と本番版を分離\n  例:mainブランチ(本番版)、developブランチ(開発版)、featureブランチ(機能追加)\n\n⑥ロールバック(Rollback):\n  過去のバージョンに戻す\n  特定のコミットIDに戻す\n\nGitにより、変更履歴を全て記録、複数人が同時作業可能。",
      "importance": 3
    }
  ]
}
