{
  "topicId": "tech-3-5-4",
  "title": "暗号化技術",
  "flashcards": [
    {
      "id": "tech-3-5-4-fc-1",
      "front": "共通鍵暗号方式と公開鍵暗号方式の違いは？各方式の利点と欠点は？",
      "back": "【共通鍵暗号方式】\n暗号化と復号に同じ鍵を使用\n利点: 処理が高速（公開鍵暗号の100～1000倍）、大量データに適している\n欠点: 鍵の共有が必要（鍵の配送問題）、鍵の管理が困難（N人で通信する場合、N×(N-1)/2個の鍵が必要）\n代表例: AES、DES\n\n【公開鍵暗号方式】\n暗号化と復号に異なる鍵（公開鍵と秘密鍵）を使用\n利点: 鍵の配送問題が解決（公開鍵は公開しても問題ない）、鍵の管理が容易（N人で通信する場合、各人が1つの鍵ペア）\n欠点: 処理が遅い（共通鍵暗号の100～1000倍遅い）、大量データには不向き\n代表例: RSA",
      "importance": 5
    },
    {
      "id": "tech-3-5-4-fc-2",
      "front": "AESとDESの違いは？なぜDESは非推奨なのか？",
      "back": "【DES（Data Encryption Standard）】\n鍵長: 56ビット\n問題点: 鍵長が短く、現在のコンピュータの性能では総当たり攻撃で数時間で解読可能\n状態: 現在は非推奨\n\n【AES（Advanced Encryption Standard）】\n鍵長: 128、192、256ビット\n特徴: 鍵長が長く、総当たり攻撃では現実的な時間で解読不可能。高速で強固\n状態: 現在、最も広く使用される共通鍵暗号方式（推奨）\n用途: Wi-Fi（WPA2/WPA3）、VPN、ファイル暗号化、HTTPS通信など\n\n基本情報技術者試験では、AESが共通鍵暗号方式の代表例として頻出",
      "importance": 5
    },
    {
      "id": "tech-3-5-4-fc-3",
      "front": "公開鍵暗号方式（RSA）の仕組みは？暗号化・復号の流れは？",
      "back": "【鍵ペア】\n①公開鍵: 誰にでも公開できる鍵、暗号化に使用\n②秘密鍵: 自分だけが保管する鍵、復号に使用\n\n【送信の流れ】\nAさんがBさんにメールを暗号化して送信\n①Aさんが、Bさんの公開鍵を入手（Webサイト、メールなど）\n②Aさんが、Bさんの公開鍵で平文を暗号化\n③Aさんが、暗号文をBさんに送信\n④Bさんが、自分の秘密鍵で暗号文を復号\n\n【セキュリティ】\n公開鍵で暗号化された暗号文は、対応する秘密鍵でしか復号できない。Bさんの秘密鍵はBさんだけが保管しているため、第三者は復号できない\n\n【鍵の配送問題の解決】\n公開鍵は誰にでも公開できるため、事前に鍵を安全に共有する必要がない（共通鍵暗号方式の鍵の配送問題が解決）",
      "importance": 5
    },
    {
      "id": "tech-3-5-4-fc-4",
      "front": "ハイブリッド暗号方式とは？なぜHTTPS通信でハイブリッド暗号方式を使うのか？",
      "back": "【ハイブリッド暗号方式】\n共通鍵暗号方式と公開鍵暗号方式を組み合わせた暗号化方式\n\n【流れ】\n①送信者が、ランダムな共通鍵（セッション鍵）を生成\n②送信者が、共通鍵でデータを暗号化（高速、AES）\n③送信者が、受信者の公開鍵で共通鍵を暗号化（RSA）\n④送信者が、暗号化されたデータと暗号化された共通鍵を送信\n⑤受信者が、自分の秘密鍵で共通鍵を復号（RSA）\n⑥受信者が、共通鍵でデータを復号（AES）\n\n【なぜ使うのか？】\n大量データ（数KB～数MB）を公開鍵暗号で暗号化すると処理に数秒かかる → 共通鍵暗号で暗号化すれば数ミリ秒で完了（高速）\nしかし、共通鍵を安全に共有する必要がある → 共通鍵を公開鍵暗号で暗号化して送信（共通鍵は短い32バイト程度なので公開鍵暗号でも短時間）\n\n【用途】\nSSL/TLS（HTTPS通信）、PGP（メール暗号化）など",
      "importance": 5
    },
    {
      "id": "tech-3-5-4-fc-5",
      "front": "ハッシュ関数の3つの性質は？ハッシュ関数の用途は？",
      "back": "【ハッシュ関数の3つの性質】\n①一方向性: ハッシュ値から元のデータを計算することが困難（復元不可能）\n②衝突困難性: 異なるデータが同じハッシュ値を持つことが困難\n③雪崩効果: 元のデータがわずかに変わると、ハッシュ値が大きく変わる\n\n【用途】\n①改ざん検知: ファイルのハッシュ値を公開し、ダウンロード後にユーザーが検証（例: LinuxのISOファイル）\n②パスワードの保存: パスワードをハッシュ化してデータベースに保存（データベースが漏洩してもパスワードを復元できない）\n③デジタル署名: 文書のハッシュ値を秘密鍵で暗号化して署名を生成\n④データの整合性確認: 通信データのハッシュ値を送信し、受信者が整合性を確認\n\n【代表的なハッシュ関数】\nSHA-256（推奨）、SHA-512（推奨）\nMD5（非推奨、衝突が発見）、SHA-1（非推奨、衝突が発見）",
      "importance": 5
    },
    {
      "id": "tech-3-5-4-fc-6",
      "front": "SHA-256とMD5の違いは？なぜMD5は非推奨なのか？",
      "back": "【MD5（Message Digest Algorithm 5）】\nハッシュ値の長さ: 128ビット（32文字の16進数）\n問題点: 衝突攻撃により、異なるデータが同じハッシュ値を持つことが実証された。攻撃者が、正規のファイルと悪意のあるファイルで同じMD5ハッシュ値を持つように細工できる\n状態: 現在は非推奨\n\n【SHA-256（Secure Hash Algorithm 256-bit）】\nハッシュ値の長さ: 256ビット（64文字の16進数）\n特徴: 衝突困難性が高く、現在、最も広く使用されるハッシュ関数\n状態: 推奨\n用途: ファイルの改ざん検知、デジタル署名、ブロックチェーン（Bitcoin）など\n\n【SHA-1（160ビット）】\nMD5より強固だが、衝突が発見され、現在は非推奨\n\n基本情報技術者試験では、SHA-256が安全なハッシュ関数の代表例として出題",
      "importance": 5
    },
    {
      "id": "tech-3-5-4-fc-7",
      "front": "デジタル署名の仕組みは？デジタル署名が証明することは？",
      "back": "【デジタル署名の仕組み】\n①送信者が、文書のハッシュ値（SHA-256）を計算\n②送信者が、ハッシュ値を自分の秘密鍵（RSA）で暗号化 → デジタル署名を生成\n③送信者が、文書とデジタル署名を受信者に送信\n④受信者が、送信者の公開鍵でデジタル署名を復号 → ハッシュ値を取得\n⑤受信者が、受信した文書のハッシュ値を計算\n⑥受信者が、復号したハッシュ値と計算したハッシュ値を比較\n  - 一致 → 文書は改ざんされておらず、送信者が本人\n  - 異なる → 文書が改ざんされているか、送信者が偽物\n\n【デジタル署名が証明すること】\n①本人性（認証）: 文書が送信者によって作成された（送信者の秘密鍵でしか署名を生成できない）\n②完全性（改ざん検知）: 文書が改ざんされていない（ハッシュ値の一致）\n③否認防止: 送信者は後から「文書を作成していない」と否認できない\n\n【用途】\n契約書の電子署名、ソフトウェアの署名、電子メールの署名（S/MIME）など",
      "importance": 5
    },
    {
      "id": "tech-3-5-4-fc-8",
      "front": "公開鍵証明書（SSL証明書）とは？公開鍵証明書の役割は？",
      "back": "【公開鍵証明書とは】\n公開鍵の正当性を証明する電子証明書。信頼できる第三者機関（認証局、CA: Certificate Authority）が、公開鍵と所有者の情報（会社名、ドメイン名）を結びつけ、デジタル署名をした証明書を発行\n\n【証明書の内容】\n①証明書の所有者（会社名、ドメイン名）\n②公開鍵\n③有効期限\n④発行者（認証局）\n⑤認証局のデジタル署名\n\n【役割】\n公開鍵が特定の人・組織のものであることを証明し、なりすましを防ぐ\n\n【具体例: HTTPS通信】\nWebサーバが、ブラウザに公開鍵証明書を送信 → ブラウザが証明書を検証（認証局のデジタル署名を確認） → 検証成功 → Webサーバが本物であることが証明される → ブラウザのアドレスバーに鍵マークが表示される\n\n【攻撃者のなりすまし防止】\n攻撃者が偽のWebサイトを作成しても、正規の公開鍵証明書を持っていないため、ブラウザは証明書の検証に失敗し、警告を表示",
      "importance": 4
    },
    {
      "id": "tech-3-5-4-fc-9",
      "front": "SSL/TLS（HTTPS）の役割は？TLSハンドシェイクの流れは？",
      "back": "【SSL/TLSの役割】\n①暗号化: 通信内容を第三者に盗聴されないように暗号化\n②認証: 通信相手が本物であることを証明（公開鍵証明書を使用）\n③完全性: 通信内容が改ざんされていないことを保証\n\n【TLSハンドシェイクの流れ（HTTPS通信の確立）】\n①ブラウザ → サーバ: TLS通信を開始したい\n②サーバ → ブラウザ: 使用する暗号化方式（AES-256など）と公開鍵証明書を送信\n③ブラウザが、サーバの公開鍵証明書を検証（認証局のデジタル署名を確認）\n④ブラウザが、ランダムな共通鍵（セッション鍵）を生成\n⑤ブラウザ → サーバ: 共通鍵をサーバの公開鍵（RSA）で暗号化して送信\n⑥サーバが、自分の秘密鍵（RSA）で共通鍵を復号\n⑦ブラウザとサーバが、共通鍵（AES-256）で通信内容を暗号化して送受信\n\n【ブラウザの鍵マーク】\nHTTPS通信が正常に確立されると、ブラウザのアドレスバーに鍵マークが表示される\n\n【用途】\nHTTPS（Webサイト）、SMTPS（メール送信）、FTPS（ファイル転送）など",
      "importance": 4
    },
    {
      "id": "tech-3-5-4-fc-10",
      "front": "VPN（IPsecとSSL-VPN）の違いは？各VPNの用途は？",
      "back": "【VPNとは】\nインターネット上に仮想的な専用回線を構築し、安全に通信する技術\nメリット: 通信内容が暗号化される、遠隔地の拠点間を安全に接続できる、外出先から社内ネットワークに安全にアクセスできる\n\n【IPsec】\n暗号化の階層: IP層（ネットワーク層）\n用途: 拠点間VPN（本社と支社を接続）\nメリット: 全ての通信を暗号化（アプリケーションに依存しない）\nデメリット: 設定が複雑、専用ソフトウェアが必要\n\n【SSL-VPN】\n暗号化の階層: SSL/TLS（アプリケーション層）\n用途: リモートアクセスVPN（外出先から社内ネットワークにアクセス）\nメリット: 導入が容易（Webブラウザで接続可能）\nデメリット: アプリケーション層のため、一部の通信は暗号化されない場合がある\n\n【具体例】\nリモートワーク、出張先からのアクセス、本社と支社の拠点間接続などで使用",
      "importance": 4
    },
    {
      "id": "tech-3-5-4-fc-11",
      "front": "公開鍵基盤（PKI）とは？PKIの構成要素は？",
      "back": "【PKI（Public Key Infrastructure）とは】\n公開鍵暗号方式を利用するための基盤。インターネット上で安全に公開鍵を配布し、通信相手の本人性を確認するための仕組み\n\n【PKIの構成要素】\n①認証局（CA: Certificate Authority）: 公開鍵証明書を発行する信頼できる第三者機関（例: DigiCert、Let's Encrypt）\n②登録局（RA: Registration Authority）: 証明書の申請者の本人確認を行う機関\n③公開鍵証明書: 公開鍵の正当性を証明する証明書\n④証明書失効リスト（CRL: Certificate Revocation List）: 失効した証明書のリスト（秘密鍵が漏洩した場合など）\n\n【用途】\nHTTPS通信、電子メールの暗号化（S/MIME）、電子署名など、様々な場面で使用\n\n【認証局の役割】\n公開鍵証明書を発行し、公開鍵が特定の人・組織のものであることを証明。ブラウザは、信頼できる認証局のリストを持っており、証明書を検証",
      "importance": 3
    },
    {
      "id": "tech-3-5-4-fc-12",
      "front": "暗号化技術の使い分けは？各技術の用途は？",
      "back": "【用途に応じた使い分け】\n①ファイルの暗号化・大量データの暗号化:\n  共通鍵暗号（AES）を使用（高速）\n  例: ファイルの暗号化、ディスク全体の暗号化（BitLocker）\n\n②通信の暗号化（HTTPS、メール）:\n  ハイブリッド暗号方式を使用（共通鍵暗号と公開鍵暗号を組み合わせ）\n  例: HTTPS通信、メール暗号化（PGP、S/MIME）\n\n③パスワードの保存、改ざん検知:\n  ハッシュ関数（SHA-256）を使用\n  例: パスワードのハッシュ化、ファイルの整合性確認\n\n④電子署名、本人確認:\n  公開鍵暗号（RSA）+ ハッシュ関数を使用\n  例: 契約書の電子署名、ソフトウェアの署名\n\n⑤リモートアクセス、拠点間接続:\n  VPN（IPsec、SSL-VPN）を使用\n  例: リモートワーク、本社と支社の接続\n\n基本情報技術者試験では、具体的なシナリオから、どの暗号化技術が使用されているかを判断する問題が出題される",
      "importance": 5
    }
  ]
}
