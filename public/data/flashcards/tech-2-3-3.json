{
  "topicId": "tech-2-3-3",
  "title": "タスク管理",
  "flashcards": [
    {
      "id": "tech-2-3-3-001",
      "front": "タスクとプロセスの違いを説明してください。",
      "back": "両者はほぼ同じ意味で、実行中のプログラムを指します。プロセスは独立したメモリ空間を持つ実行単位で、OSから見た実行管理の単位です。タスクはより広い概念で使われることもあります。現代のOSでは「プロセス」という用語が一般的です。1つのプログラムから複数のプロセスが生成されることもあります。",
      "importance": "high"
    },
    {
      "id": "tech-2-3-3-002",
      "front": "タスクの3つの状態とその遷移を説明してください。",
      "back": "1) 実行状態（running）：CPUで実行中、2) 実行可能状態（ready）：実行待ち、CPUが割り当てられれば即実行可能、3) 待ち状態（waiting/blocked）：入出力完了などのイベント待ち。遷移は、ready→running（ディスパッチ）、running→ready（タイムアウト）、running→waiting（I/O要求）、waiting→ready（イベント発生）です。OSはこの状態遷移を管理します。",
      "importance": "high"
    },
    {
      "id": "tech-2-3-3-003",
      "front": "タスクスケジューリングとは何ですか？",
      "back": "複数の実行可能状態のタスクの中から、次にCPUを割り当てるタスクを選択する処理です。スケジューリング方式には、1) ラウンドロビン：タイムスライスで順番に実行、2) 優先度順：優先度が高いタスクを優先、3) 最短処理時間優先、などがあります。目的は、公平性の確保、応答時間の短縮、スループットの向上などです。",
      "importance": "high"
    },
    {
      "id": "tech-2-3-3-004",
      "front": "ディスパッチャとは何ですか？",
      "back": "スケジューラが選択したタスクに実際にCPUを割り当てる（コンテキストスイッチを実行する）OSの機能です。処理内容は、1) 実行中タスクのレジスタ値を保存、2) 次に実行するタスクのレジスタ値を復元、3) CPUの制御を新しいタスクに移す、などです。ディスパッチャの処理時間（ディスパッチレイテンシ）は短いほど良いです。",
      "importance": "high"
    },
    {
      "id": "tech-2-3-3-005",
      "front": "マルチプログラミングとは何ですか？",
      "back": "メモリに複数のプログラム（タスク）を常駐させ、1つのCPUでそれらを交互に実行する方式です。あるタスクがI/O待ちになったら、別のタスクにCPUを割り当てることで、CPU稼働率を向上させます。単一CPU環境でも複数タスクの並行実行が可能になり、システムの効率が大幅に改善されます。マルチタスクの基本概念です。",
      "importance": "high"
    },
    {
      "id": "tech-2-3-3-006",
      "front": "割り込みとは何ですか？また種類を挙げてください。",
      "back": "プログラムの実行中に、予定外の事象が発生したときにCPUに通知する仕組みです。種類は、1) 外部割り込み：I/O完了、タイマ、電源異常など、2) 内部割り込み：ゼロ除算、不正命令などのプログラム例外、3) ソフトウェア割り込み：プログラムからのシステムコール。割り込み発生時、CPUは現在の処理を中断し、割り込み処理ルーチンを実行します。",
      "importance": "high"
    },
    {
      "id": "tech-2-3-3-007",
      "front": "ラウンドロビン方式のスケジューリングを説明してください。",
      "back": "実行可能状態のタスクに順番にCPU時間（タイムクォンタム）を割り当てる方式です。各タスクは一定時間（例：100ms）だけ実行され、時間切れになると次のタスクにCPUが移ります。公平性が高く、応答時間のばらつきが少ないため、タイムシェアリングシステムで広く使用されます。タイムクォンタムが短すぎるとオーバーヘッドが増加します。",
      "importance": "medium"
    },
    {
      "id": "tech-2-3-3-008",
      "front": "優先度スケジューリングとは何ですか？",
      "back": "各タスクに優先度を設定し、優先度が最も高い実行可能タスクにCPUを割り当てる方式です。重要なタスクを優先的に処理できますが、低優先度タスクが永久に実行されない飢餓状態（スタベーション）が発生する可能性があります。対策として、待ち時間に応じて優先度を動的に上げるエージング技法があります。リアルタイムシステムでよく使用されます。",
      "importance": "medium"
    },
    {
      "id": "tech-2-3-3-009",
      "front": "プリエンプティブとノンプリエンプティブの違いは何ですか？",
      "back": "プリエンプティブ（preemptive、横取り方式）は、実行中のタスクを強制的に中断して別のタスクに切り替えることができます。優先度の高いタスクが即座に実行でき、応答性が向上します。ノンプリエンプティブ（non-preemptive、非横取り方式）は、実行中のタスクは完了まで中断されません。実装は簡単ですが、応答時間が長くなる可能性があります。",
      "importance": "medium"
    },
    {
      "id": "tech-2-3-3-010",
      "front": "コンテキストスイッチとは何ですか？",
      "back": "CPUの実行対象をあるタスクから別のタスクに切り替える処理です。現在のタスクのCPUレジスタ（プログラムカウンタ、汎用レジスタなど）の値を保存し、次のタスクのレジスタ値を復元します。コンテキストスイッチには時間がかかるため（数マイクロ秒～数ミリ秒）、頻繁に発生するとオーバーヘッドになります。マルチタスクの実現に不可欠な処理です。",
      "importance": "medium"
    },
    {
      "id": "tech-2-3-3-011",
      "front": "タイムスライス（タイムクォンタム）とは何ですか？",
      "back": "ラウンドロビン方式などで、各タスクに割り当てられるCPU時間の単位です。例えば100msのタイムスライスでは、各タスクは最大100ms実行された後、次のタスクに切り替わります。タイムスライスが長すぎると応答性が悪化し、短すぎるとコンテキストスイッチのオーバーヘッドが増加します。システムの特性に応じて適切な値を設定します。",
      "importance": "medium"
    },
    {
      "id": "tech-2-3-3-012",
      "front": "タスクの生成と消滅の流れを説明してください。",
      "back": "生成：1) プログラムの実行要求、2) OSがメモリを確保してプログラムをロード、3) タスク制御ブロック（TCB）を作成、4) 初期状態を「実行可能」に設定。消滅：1) タスクが終了、2) 使用していたリソース（メモリ、ファイルなど）を解放、3) TCBを削除、4) 親タスクに終了を通知。OSはタスクのライフサイクル全体を管理します。",
      "importance": "low"
    },
    {
      "id": "tech-2-3-3-013",
      "front": "割り込み処理の流れを説明してください。",
      "back": "1) 割り込み発生：ハードウェアまたはソフトウェアが割り込み信号を送信、2) 現在の実行状態を保存：プログラムカウンタなどのレジスタ値を退避、3) 割り込みハンドラ実行：割り込み原因に応じた処理ルーチンを実行、4) 状態復元：保存したレジスタ値を復元、5) 元のプログラムに戻る。割り込み処理は高速に行う必要があり、最小限の処理のみ実行します。",
      "importance": "low"
    },
    {
      "id": "tech-2-3-3-014",
      "front": "マルチスレッドとマルチプロセスの違いは何ですか？",
      "back": "マルチプロセスは複数の独立したプロセスが並行実行され、各プロセスは独立したメモリ空間を持ちます。安全性が高いですが、プロセス間通信が必要です。マルチスレッドは1つのプロセス内に複数の実行フロー（スレッド）があり、メモリ空間を共有します。スレッド間のデータ共有は容易ですが、同期制御が必要です。マルチスレッドの方がコンテキストスイッチが高速です。",
      "importance": "low"
    }
  ]
}