{
  "topicId": "tech-3-3-1",
  "title": "データベース方式",
  "flashcards": [
    {
      "id": "tech-3-3-1-fc-1",
      "front": "ファイルシステムとデータベースの違いは？（5つ）",
      "back": "①データ管理：ファイル（各アプリが個別）、DB（DBMSが一元管理）\n②データ共有：ファイル（困難）、DB（容易）\n③データ整合性：ファイル（低い、重複データが矛盾）、DB（高い、DBMSが保証）\n④柔軟性：ファイル（固定形式）、DB（柔軟なクエリ）\n⑤コスト：ファイル（低い）、DB（高い）",
      "importance": 5
    },
    {
      "id": "tech-3-3-1-fc-2",
      "front": "DBMS（データベース管理システム）とは？主な機能3つは？",
      "back": "データベースを管理するソフトウェア（例：Oracle Database、MySQL、PostgreSQL、SQL Server）\n主な機能：①データ定義（DDL：表作成・削除）、②データ操作（DML：検索・挿入・更新・削除）、③データ制御（DCL：権限管理、トランザクション管理）",
      "importance": 5
    },
    {
      "id": "tech-3-3-1-fc-3",
      "front": "関係データベースの基本構造3つは？",
      "back": "①表（テーブル、Table）：データの集まり（例：社員表、部署表）\n②行（レコード、Row、Tuple）：1つのデータ実体（例：社員ID=1の「佐藤太郎」のデータ1行）\n③列（カラム、Column、属性）：データの項目（例：社員ID、氏名、所属部署ID、入社日）",
      "importance": 5
    },
    {
      "id": "tech-3-3-1-fc-4",
      "front": "主キー（Primary Key）の3つの制約は？",
      "back": "①一意性制約：各行を一意に識別（同じ値が複数行に存在してはならない）\n②非NULL制約：主キーはNULL（空値）を許容しない\n③不変性（推奨）：一度設定したら変更しない（例：社員IDは退職まで変えない）",
      "importance": 5
    },
    {
      "id": "tech-3-3-1-fc-5",
      "front": "外部キー（Foreign Key）とは？参照整合性制約の具体例は？",
      "back": "他の表の主キーを参照する列。参照整合性制約により「存在しない値」を参照できない\n例：社員表の所属部署ID（外部キー）は、部署表の部署ID（主キー）に存在する値のみ登録可能\n→ 部署ID=999が部署表に存在しない場合、社員表に所属部署ID=999を登録できない（DBMSがエラー）",
      "importance": 5
    },
    {
      "id": "tech-3-3-1-fc-6",
      "front": "3層スキーマアーキテクチャとは？各層の役割は？",
      "back": "①外部スキーマ（ユーザービュー）：各ユーザー・アプリごとの見え方（例：営業部は顧客情報のみ閲覧）\n②概念スキーマ（論理構造）：データベース全体の論理的構造（全ての表、列、制約の定義）\n③内部スキーマ（物理構造）：データの物理的な格納方法（ファイル、インデックス、ストレージ）",
      "importance": 4
    },
    {
      "id": "tech-3-3-1-fc-7",
      "front": "データ独立性（論理的独立性・物理的独立性）とは？",
      "back": "①論理的独立性：概念スキーマを変更（表追加）しても、外部スキーマ（アプリ）に影響しない\n例：新しい表を追加しても、既存アプリは変更不要\n②物理的独立性：内部スキーマを変更（ストレージ変更、インデックス追加）しても、概念スキーマに影響しない\n例：HDDからSSDに変更しても、アプリケーションは変更不要",
      "importance": 4
    },
    {
      "id": "tech-3-3-1-fc-8",
      "front": "トランザクションとは？ACID特性4つは？",
      "back": "トランザクション：データベース操作の論理的な単位（全て成功 or 全て失敗）\nACID特性：①原子性（Atomicity）：全て成功 or 全て失敗、②一貫性（Consistency）：整合性を保つ、③独立性（Isolation）：他トランザクションの影響を受けない、④永続性（Durability）：コミット後は永続的に保存",
      "importance": 5
    },
    {
      "id": "tech-3-3-1-fc-9",
      "front": "コミット（COMMIT）とロールバック（ROLLBACK）の違いは？",
      "back": "コミット（COMMIT）：トランザクションの変更を確定し、データベースに永続的に反映\n例：振込成功時、残高更新を確定\nロールバック（ROLLBACK）：トランザクションの変更を取り消し、開始前の状態に戻す\n例：振込失敗時、引き落としを取り消し、元の残高に戻す",
      "importance": 4
    },
    {
      "id": "tech-3-3-1-fc-10",
      "front": "DDL、DML、DCLとは？各言語の代表的な命令は？",
      "back": "①DDL（Data Definition Language）：データ定義言語。CREATE（表作成）、ALTER（表変更）、DROP（表削除）\n②DML（Data Manipulation Language）：データ操作言語。SELECT（検索）、INSERT（挿入）、UPDATE（更新）、DELETE（削除）\n③DCL（Data Control Language）：データ制御言語。GRANT（権限付与）、REVOKE（権限剥奪）、COMMIT、ROLLBACK",
      "importance": 4
    },
    {
      "id": "tech-3-3-1-fc-11",
      "front": "参照整合性制約の削除時・更新時のオプション3つは？",
      "back": "①RESTRICT（制限）：参照されている行は削除・更新不可（エラー）\n②CASCADE（連鎖）：参照元も一緒に削除・更新\n例：部署ID=10を削除→所属部署ID=10の全社員も自動削除\n③SET NULL：参照元の外部キーをNULLに設定\n例：部署ID=10を削除→所属部署ID=10の社員の所属部署IDをNULLに変更",
      "importance": 3
    },
    {
      "id": "tech-3-3-1-fc-12",
      "front": "データベース方式の主な利点5つは？",
      "back": "①データの一元管理（重複排除）\n②データ整合性の保証（主キー・外部キー制約、トランザクション）\n③データ共有の容易化（複数ユーザー・アプリが同時アクセス）\n④データ独立性（アプリとデータ構造の分離）\n⑤セキュリティ（アクセス制御、暗号化）",
      "importance": 4
    }
  ]
}
