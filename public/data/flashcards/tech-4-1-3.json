{
  "topicId": "tech-4-1-3",
  "title": "モデリング",
  "flashcards": [
    {
      "id": "tech-4-1-3-fc-1",
      "front": "DFD（データフロー図）の4つの構成要素は？各要素の記号は？",
      "back": "①データフロー（矢印）：データの流れを表現\n\n②プロセス（丸）：データの処理を表現（例: 注文処理、在庫確認）\n\n③データストア（平行線）：データの保存場所を表現（例: 注文DB、商品DB）\n\n④外部エンティティ（四角）：システムの外部にあるデータの発生源や送信先（例: 顧客、管理者）\n\n【DFDの流れの例】\n顧客 → (注文データ) → [注文処理] → (注文データ) → 《注文DB》\n\nDFDにより、データの流れが明確になり、システムの全体像を把握できる。",
      "importance": 5
    },
    {
      "id": "tech-4-1-3-fc-2",
      "front": "E-R図の3つの構成要素は？リレーションシップのカーディナリティの種類は？",
      "back": "【構成要素】\n①エンティティ（Entity、実体）：データベースに保存する対象（例: 顧客、商品、注文）\n長方形で表現\n\n②属性（Attribute）：エンティティの特性（例: 顧客の氏名、メールアドレス）\nエンティティの中に記述\n\n③リレーションシップ（Relationship、関連）：エンティティ間の関係\n線で接続\n\n【カーディナリティ】\n①1対1（1:1）：例: 社員 と 社員証（1人の社員に1つの社員証）\n②1対多（1:N）：例: 顧客 と 注文（1人の顧客が複数の注文）\n③多対多（M:N）：例: 学生 と 講義（1人の学生が複数の講義、1つの講義に複数の学生）\n\nE-R図により、データベースのテーブル構造を設計できる。",
      "importance": 5
    },
    {
      "id": "tech-4-1-3-fc-3",
      "front": "UML（統一モデリング言語）とは？基本情報技術者試験でよく出題される4つのUML図は？",
      "back": "UML（Unified Modeling Language）：オブジェクト指向のシステム設計で使用される標準的な図の記法。構造図（静的な構造を表現）と振る舞い図（動的な振る舞いを表現）の2種類があり、合計14種類の図が定義されている。\n\n【よく出題される4つのUML図】\n①ユースケース図（振る舞い図）：システムの機能とユーザーの関係を表現\n\n②クラス図（構造図）：クラスの構造と関係を表現\n\n③シーケンス図（振る舞い図）：オブジェクト間のメッセージのやり取りを時系列で表現\n\n④アクティビティ図（振る舞い図）：処理の流れ（フローチャート）を表現\n\nUMLにより、システムの設計を視覚的に理解できる。",
      "importance": 5
    },
    {
      "id": "tech-4-1-3-fc-4",
      "front": "ユースケース図の3つの構成要素は？利点は？",
      "back": "【構成要素】\n①アクター（Actor）：システムを利用するユーザーや外部システム\n棒人間で表現（例: 顧客、管理者）\n\n②ユースケース（Use Case）：システムの機能\n楕円で表現（例: 商品検索、注文、商品管理）\n\n③関連（Association）：アクターとユースケースの関係\n実線で表現\n\n【ユースケース図の記法】\n[顧客（棒人間）] ---- (商品検索)\n[顧客（棒人間）] ---- (注文)\n[管理者（棒人間）] ---- (商品管理)\n\n【利点】\n①システムの機能を一覧できる\n②顧客とのコミュニケーションがしやすい（機能を確認できる）\n③要件定義の段階で、必要な機能を洗い出せる\n\nユースケース図により、システムが「誰に」「何を」提供するかを明確にできる。",
      "importance": 4
    },
    {
      "id": "tech-4-1-3-fc-5",
      "front": "クラス図の構造は？クラスの記法は？",
      "back": "クラス図（Class Diagram）：オブジェクト指向設計で使用される図で、クラスの構造（属性、メソッド）と、クラス間の関係（継承、集約、関連）を表現。\n\n【クラスの記法】\n長方形を3つに分割し、上から順に記述：\n\n┌─────────────┐\n│ Customer    │ ←クラス名\n├─────────────┤\n│ - 顧客ID    │ ←属性（-はprivate、+はpublic）\n│ - 氏名      │\n│ - メールアドレス │\n├─────────────┤\n│ + 注文する() │ ←メソッド（+はpublic）\n│ + カートに追加する() │\n└─────────────┘\n\n【利点】\n①プログラムの設計を視覚的に理解できる\n②クラス間の関係が明確になる\n③設計のレビューがしやすい",
      "importance": 5
    },
    {
      "id": "tech-4-1-3-fc-6",
      "front": "クラス図における4つのクラス間の関係は？各関係の記法と意味は？",
      "back": "①継承（Inheritance）:\n記法: 実線の三角形（子→親）\n意味: 子クラスが親クラスの属性・メソッドを継承\n例: 自動車クラス ← 普通車クラス、トラッククラス\n\n②関連（Association）:\n記法: 実線の矢印\n意味: クラス間の関係\n例: 顧客クラス → 注文クラス（1人の顧客が複数の注文）\n\n③集約（Aggregation）:\n記法: 白抜きのひし形\n意味: 部品が全体に弱く依存（全体が削除されても部品は残る）\n例: 部署クラス ◇→ 社員クラス（部署が削除されても社員は残る）\n\n④コンポジション（Composition）:\n記法: 黒塗りのひし形\n意味: 部品が全体に強く依存（全体が削除されると部品も削除）\n例: 注文クラス ◆→ 注文明細クラス（注文が削除されると注文明細も削除）",
      "importance": 5
    },
    {
      "id": "tech-4-1-3-fc-7",
      "front": "シーケンス図の4つの構成要素は？流れは？",
      "back": "シーケンス図（Sequence Diagram）：オブジェクト間のメッセージのやり取りを時系列で表現する図。システムの動的な振る舞い（処理の流れ）を理解できる。\n\n【構成要素】\n①オブジェクト（四角）：処理に参加するオブジェクト（例: 顧客、注文画面、注文コントローラ）\n\n②ライフライン（縦の点線）：オブジェクトの生存期間\n\n③メッセージ（矢印）：オブジェクト間のメソッド呼び出し（例: createOrder(), checkStock()）\n\n④活性区間（細い長方形）：オブジェクトが処理を実行している期間\n\n【流れ】\n時系列で上から下へ、メッセージのやり取りを記述。\n\n例:\n顧客 → 注文画面: 注文ボタンをクリック\n注文画面 → 注文コントローラ: createOrder()\n注文コントローラ → 商品: checkStock()\n商品 → 注文コントローラ: 在庫OK（戻り値）",
      "importance": 4
    },
    {
      "id": "tech-4-1-3-fc-8",
      "front": "アクティビティ図の6つの構成要素は？",
      "back": "アクティビティ図（Activity Diagram）：処理の流れ（フローチャート）を表現する図。UMLの振る舞い図の1つで、ビジネスプロセスやアルゴリズムを視覚的に表現できる。\n\n【構成要素】\n①開始ノード：黒丸（●）\n処理の開始地点\n\n②アクティビティ：角丸四角\n処理を表現（例: 商品を検索、注文を確定）\n\n③判断ノード：ひし形（◇）\n条件分岐を表現（例: 在庫があるか？）\n\n④フォークノード：太い横線（━━━）\n並行処理の開始\n\n⑤ジョインノード：太い横線（━━━）\n並行処理の終了、合流\n\n⑥終了ノード：黒丸の周りに円（◉）\n処理の終了地点",
      "importance": 4
    },
    {
      "id": "tech-4-1-3-fc-9",
      "front": "アクティビティ図における並行処理（フォークノード、ジョインノード）の使い方は？具体例は？",
      "back": "【並行処理の記法】\nフォークノード（太い横線）：並行処理の開始\nジョインノード（太い横線）：並行処理の終了、合流\n\n【具体例：ECサイトの注文処理】\n[注文を確定]\n  |\n  v\n━━━━━━━━━━━━━━ (フォークノード、並行処理開始)\n  |                 |\n  v                 v\n[注文確認メールを送信]  [在庫を更新]\n  |                 |\n  v                 v\n━━━━━━━━━━━━━━ (ジョインノード、並行処理終了)\n  |\n  v\n[注文完了画面を表示]\n\nフォークノードで「注文確認メールを送信」と「在庫を更新」が同時に実行され、両方の処理が完了するとジョインノードで合流する。\n\n並行処理により、処理時間を短縮できる。",
      "importance": 3
    },
    {
      "id": "tech-4-1-3-fc-10",
      "front": "DFDとE-R図の違いは？各手法が適した用途は？",
      "back": "【DFD（データフロー図）】\n用途: データの流れを表現\n構成要素: データフロー、プロセス、データストア、外部エンティティ\n適した場面: システム内のデータの流れを明確にしたい（構造化分析）\n例: ECサイトで、顧客が注文し、注文データがDBに保存され、管理者が確認する流れ\n\n【E-R図（実体関連図）】\n用途: データベース設計\n構成要素: エンティティ、属性、リレーションシップ\n適した場面: データベースのテーブル構造を設計したい\n例: ECサイトのテーブル構造（顧客テーブル、商品テーブル、注文テーブル、注文明細テーブル）\n\nDFDは「データの流れ」、E-R図は「データの構造」を表現する。",
      "importance": 4
    },
    {
      "id": "tech-4-1-3-fc-11",
      "front": "UMLの構造図と振る舞い図の違いは？各分類に含まれる図は？",
      "back": "【構造図（静的な構造を表現）】\n意味: システムの構造を表現する図\n代表的な図:\n①クラス図：クラスの構造と関係\n②オブジェクト図：オブジェクトのインスタンス\n③コンポーネント図：ソフトウェアコンポーネントの構造\n④配置図：ハードウェアとソフトウェアの配置\n\n【振る舞い図（動的な振る舞いを表現）】\n意味: システムの動作を表現する図\n代表的な図:\n①ユースケース図：システムの機能とユーザーの関係\n②シーケンス図：オブジェクト間のメッセージのやり取り（時系列）\n③アクティビティ図：処理の流れ（フローチャート）\n④ステートマシン図：オブジェクトの状態遷移\n\nUMLは合計14種類の図で構成されている。",
      "importance": 3
    },
    {
      "id": "tech-4-1-3-fc-12",
      "front": "モデリング手法の使い分けは？プロジェクトの各段階で使用する図は？",
      "back": "【用途別の選択】\n①データの流れを明確にしたい → DFD\n②データベースを設計したい → E-R図\n③システムの機能を洗い出したい → ユースケース図\n④プログラムの設計を視覚化したい → クラス図\n⑤処理の流れ（時系列）を理解したい → シーケンス図\n⑥処理の流れ（フローチャート）を設計したい → アクティビティ図\n\n【プロジェクトの段階別】\n要件定義フェーズ:\n- ユースケース図（機能の洗い出し）\n- DFD（データの流れの確認）\n\n設計フェーズ:\n- E-R図（データベース設計）\n- クラス図（プログラムの構造設計）\n- シーケンス図（処理の流れ設計）\n- アクティビティ図（ビジネスプロセス設計）\n\n適切なモデリング手法を選択することで、効率的にシステムを設計できる。",
      "importance": 5
    }
  ]
}
