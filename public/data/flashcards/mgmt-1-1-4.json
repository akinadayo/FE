{
  "topicId": "mgmt-1-1-4",
  "title": "コスト管理",
  "flashcards": [
    {
      "id": "mgmt-1-1-4-fc-1",
      "front": "プロジェクトコスト管理の3つの主な活動は？各活動の目的は？",
      "back": "①コスト見積り:\nプロジェクトに必要な工数(人月・人日)とコストを予測。成果物:コスト見積書。\n\n②予算設定:\n承認された予算を各作業・フェーズに配分。成果物:コストベースライン(予算計画)。\n\n③コスト管理:\n実際のコストを追跡し、予算と比較。差異があれば是正措置を取る。成果物:コスト実績報告書、差異分析レポート。\n\nプロジェクトのコストは主に「人件費」(開発者の工数×単価)が大部分を占めるため、工数を正確に見積もることが重要。",
      "importance": 5
    },
    {
      "id": "mgmt-1-1-4-fc-2",
      "front": "3つの工数見積り手法(類推見積り、パラメトリック見積り、ボトムアップ見積り)の違いは？使い分けは？",
      "back": "①類推見積り(Analogous Estimating):\n過去の類似プロジェクトの実績を参考に見積もる。精度:低～中。使用場面:プロジェクト初期段階。\n例:過去の在庫管理システム(6人月)と似た受発注管理システムは9人月。\n\n②パラメトリック見積り(Parametric Estimating):\nプロジェクトの特性と過去の統計データの関係を数式で計算。精度:中～高。使用場面:標準化された開発プロセスがある場合。\n例:1画面2人日×50画面=100人日。FP法、LOC法、COCOMOが代表例。\n\n③ボトムアップ見積り(Bottom-Up Estimating):\nプロジェクトを細かいタスクに分解し、各タスクの工数を合計。精度:高。使用場面:要件定義完了後。\n例:ユーザー登録5人日+商品検索8人日+...=56人日。",
      "importance": 5
    },
    {
      "id": "mgmt-1-1-4-fc-3",
      "front": "ファンクションポイント法(FP法)とは？5種類の機能分類は？",
      "back": "システムの「機能の数と複雑さ」からソフトウェアの規模を測定し、開発工数を見積もる手法。プログラミング言語に依存しない。\n\n【5種類の機能分類】\n①外部入力(EI):ユーザーがデータを入力(例:商品登録画面)\n②外部出力(EO):データを加工して出力(例:売上レポート)\n③外部照会(EQ):データを加工せずに出力(例:商品詳細表示)\n④内部論理ファイル(ILF):システムが管理するデータ(例:商品マスタ)\n⑤外部インターフェースファイル(EIF):外部システムから参照するデータ(例:取引先マスタ)\n\n各機能を「単純・普通・複雑」で評価し、複雑さ係数を掛けて未調整FP(UFP)を計算。補正係数を適用して調整FP(AFP)を算出。最後に生産性を掛けて工数を計算。",
      "importance": 5
    },
    {
      "id": "mgmt-1-1-4-fc-4",
      "front": "ファンクションポイント法の利点と欠点は？どんな場面で使う？",
      "back": "【利点】\n①プログラミング言語に依存しない(Java、Python、C、どの言語でも同じFP値)\n②要件定義段階で見積もれる(プログラムコードを書く前)\n③ユーザーから見た機能で評価するため、理解しやすい\n\n【欠点】\n①計算が複雑(機能の分類、複雑さの評価に専門知識が必要)\n②評価者によって結果がばらつく(主観が入りやすい)\n③非機能要件(性能、セキュリティ)の評価が難しい\n\n【使用場面】\n要件定義段階で、プログラミング言語が決まっていない場合。複数のベンダーから見積もりを取る場合(共通の尺度)。",
      "importance": 5
    },
    {
      "id": "mgmt-1-1-4-fc-5",
      "front": "LOC法(Lines Of Code法)とは？利点と欠点は？",
      "back": "プログラムの「行数」からソフトウェアの規模を測定し、開発工数を見積もる手法。\n\n【計算例】\n過去:3,000行で6人月 → 生産性=500行/人月\n新規:4,500行の予想 → 工数=4,500÷500=9人月\n\n【利点】\n①理解しやすい(行数は誰でも数えられる)\n②過去のデータがあれば、簡単に計算できる\n\n【欠点】\n①プログラミング言語に依存する(言語ごとに生産性が異なる)\n②詳細設計後でないと行数が分からない(要件定義段階では使えない)\n③プログラマーの書き方によって行数が変わる(精度が低い)\n\n【使用場面】\n詳細設計完了後、プログラミング言語が決定している場合。",
      "importance": 4
    },
    {
      "id": "mgmt-1-1-4-fc-6",
      "front": "COCOMO(Constructive Cost Model)の計算式は？3つのプロジェクト種類と係数は？",
      "back": "【計算式】\n開発工数(人月) = a × (KLOC)^b\nKLOC = プログラムの行数 ÷ 1000\n\n【プロジェクトの種類と係数】\n①組込み型(Organic):a=2.4、b=1.05\n  小規模で経験豊富なチーム、要件が明確。例:社内の小規模業務システム。\n\n②半分離型(Semi-Detached):a=3.0、b=1.12\n  中規模、ある程度の経験。例:ECサイト、一般的な業務システム。\n\n③組込み型(Embedded):a=3.6、b=1.20\n  大規模で複雑、ハードウェアとの連携が必要。例:航空機の制御システム。\n\n【計算例:半分離型、50,000行】\nKLOC=50 → 工数=3.0×(50)^1.12≒222人月\n\nbが1より大きい → 規模が大きくなるほど、工数が非線形に増加(コミュニケーションコスト、統合作業が増えるため)。",
      "importance": 5
    },
    {
      "id": "mgmt-1-1-4-fc-7",
      "front": "EVM(Earned Value Management)の3つの基本指標(PV、AC、EV)とは？",
      "back": "①計画値(PV: Planned Value):\n現時点で完了しているべき作業のコスト(予算ベース)。\n例:第5週終了時点で50万円分の作業が完了しているべき。\n\n②実績値(AC: Actual Cost):\n現時点で実際に使ったコスト。\n例:第5週終了時点で実際に60万円使った。\n\n③出来高(EV: Earned Value):\n現時点で実際に完了した作業のコスト(予算ベース)。\n例:第5週終了時点で実際に完了した作業は40万円分(全体の40%)。\n\nEVMは、この3つの値を使って、プロジェクトの進捗とコストを総合的に評価する手法。",
      "importance": 5
    },
    {
      "id": "mgmt-1-1-4-fc-8",
      "front": "EVMの4つの評価指標(CV、SV、CPI、SPI)の計算式と意味は？",
      "back": "①コスト差異(CV: Cost Variance):\nCV = EV - AC\n正の値:予算内、負の値:コストオーバー。\n\n②スケジュール差異(SV: Schedule Variance):\nSV = EV - PV\n正の値:進捗が早い、負の値:進捗が遅れている。\n\n③コスト効率指数(CPI: Cost Performance Index):\nCPI = EV ÷ AC\n1より大:コスト効率が良い、1より小:コスト効率が悪い。\n\n④スケジュール効率指数(SPI: Schedule Performance Index):\nSPI = EV ÷ PV\n1より大:進捗が早い、1より小:進捗が遅れている。\n\n【例】PV=50万円、EV=40万円、AC=60万円の場合:\nCV=-20万円(コストオーバー)、SV=-10万円(進捗遅れ)\nCPI=0.67(コスト効率悪い)、SPI=0.8(進捗80%)",
      "importance": 5
    },
    {
      "id": "mgmt-1-1-4-fc-9",
      "front": "EVMの完成時総コスト見積り(EAC)と残作業コスト見積り(ETC)の計算式は？",
      "back": "①完成時総コスト見積り(EAC: Estimate At Completion):\nEAC = BAC ÷ CPI\nプロジェクト完了時の予想総コスト。現在のコスト効率が続くと仮定。\n\n②残作業コスト見積り(ETC: Estimate To Complete):\nETC = EAC - AC\n残りの作業に必要な予想コスト。\n\n③完成時コスト差異(VAC: Variance At Completion):\nVAC = BAC - EAC\n予算と完成時総コストの差。負の値なら予算オーバー。\n\n【計算例】BAC=100万円、AC=60万円、CPI=0.67の場合:\nEAC=100÷0.67≒149万円(最終コスト予測)\nETC=149-60=89万円(残り89万円必要)\nVAC=100-149=-49万円(49万円オーバー見込み)\n\nBAC(Budget At Completion)=プロジェクトの総予算。",
      "importance": 5
    },
    {
      "id": "mgmt-1-1-4-fc-10",
      "front": "EVMの4つのケース(順調、進捗良いがコストオーバー、コスト内だが進捗遅れ、最悪)の判定基準は？",
      "back": "【ケース1:順調】\nCV>0、SV>0、CPI>1、SPI>1\n → 予算内で、進捗が早い。\n\n【ケース2:進捗は良いがコストオーバー】\nCV<0、SV>0、CPI<1、SPI>1\n → 進捗は早いが、コストをかけすぎている。作業の効率化が必要。\n\n【ケース3:コストは予算内だが進捗が遅い】\nCV>0、SV<0、CPI>1、SPI<1\n → コストは予算内だが、進捗が遅れている。増員やスケジュール調整が必要。\n\n【ケース4:最悪(進捗もコストも悪い)】\nCV<0、SV<0、CPI<1、SPI<1\n → 進捗もコストも悪い。プロジェクトの根本的な見直しが必要(要件削減、納期延長、増員)。\n\nCVとSVの符号、CPIとSPIが1より大きいか小さいかで判定。",
      "importance": 4
    },
    {
      "id": "mgmt-1-1-4-fc-11",
      "front": "EVMを効果的に使うための5つのポイントは？",
      "back": "①定期的に測定する:\n毎週または毎月、PV、EV、ACを測定し、CVとSVを計算。早期に問題を発見できる。\n\n②出来高(EV)の測定を正確に:\nEVは「実際に完了した作業のコスト」なので、作業の完了度を正確に測定することが重要。\n\n③是正措置を迅速に:\nCVやSVが負の値になったら、すぐに是正措置を検討。放置すると問題が拡大。\n\n④ステークホルダーに報告:\nCPIやSPI、EACをステークホルダー(顧客、経営層)に報告し、プロジェクトの状況を共有。透明性が高まる。\n\n⑤過去のデータを蓄積:\nプロジェクト完了後、実際のCPIやSPIを記録。次回のプロジェクトで、より正確な見積りができる。",
      "importance": 4
    },
    {
      "id": "mgmt-1-1-4-fc-12",
      "front": "見積り手法(FP法、LOC法、COCOMO)の比較と選択基準は？",
      "back": "【FP法(ファンクションポイント法)】\n利点:プログラミング言語に依存しない、要件定義段階で見積もれる。\n欠点:計算が複雑、評価者によってばらつく。\n使用場面:要件定義段階、プログラミング言語が未定、複数ベンダー比較。\n\n【LOC法(Lines Of Code法)】\n利点:理解しやすい、簡単に計算できる。\n欠点:プログラミング言語に依存、詳細設計後でないと使えない、精度が低い。\n使用場面:詳細設計完了後、プログラミング言語が決定。\n\n【COCOMO】\n利点:プロジェクトの種類(規模、複雑さ)を考慮、規模と工数の非線形関係を反映。\n欠点:LOC法と同じく言語依存、係数の設定が難しい。\n使用場面:LOC法をより精緻にしたい場合。\n\n選択基準:プロジェクトの段階、利用可能な情報、組織の標準に応じて選択。",
      "importance": 4
    }
  ]
}
