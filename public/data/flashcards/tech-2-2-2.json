{
  "topicId": "tech-2-2-2",
  "title": "システムの性能",
  "flashcards": [
    {
      "id": "fc-tech-2-2-2-001",
      "front": "スループットとは何ですか？",
      "back": "システムが単位時間あたりに処理できる仕事量のことです。\n\n例：1秒あたり100リクエスト処理できる場合、スループットは100 req/sec\n\n高いほどシステムの処理能力が高いことを意味します。",
      "importance": 5
    },
    {
      "id": "fc-tech-2-2-2-002",
      "front": "レスポンスタイムとは何ですか？",
      "back": "ユーザーがシステムに要求を出してから、その結果を受け取るまでの時間です。\n\nレスポンスタイム = 処理時間 + 待ち時間 + 通信時間\n\n低いほどユーザー体験が良くなります。",
      "importance": 5
    },
    {
      "id": "fc-tech-2-2-2-003",
      "front": "ターンアラウンドタイム（TAT）とは？",
      "back": "バッチ処理において、ジョブの投入から完了までの全体時間のことです。\n\nTAT = 待ち時間 + 処理時間 + 出力時間\n\n主にバッチシステムで使用される性能指標です。",
      "importance": 5
    },
    {
      "id": "fc-tech-2-2-2-004",
      "front": "スループットとレスポンスタイムの関係は？",
      "back": "必ずしも一致しません。スループットが高くても、レスポンスタイムが悪い場合があります。\n\n例：大量処理を並列で行えばスループットは高いが、個々の処理が遅ければレスポンスタイムは長くなります。\n\n両方をバランスよく改善することが重要です。",
      "importance": 4
    },
    {
      "id": "fc-tech-2-2-2-005",
      "front": "レスポンスタイムとターンアラウンドタイムの違いは？",
      "back": "・レスポンスタイム：対話型システム（リアルタイム）で使用される応答時間\n・ターンアラウンドタイム：バッチシステム（非リアルタイム）で使用されるジョブ完了時間\n\nどちらも「要求から結果までの時間」ですが、適用されるシステムの種類が異なります。",
      "importance": 5
    },
    {
      "id": "fc-tech-2-2-2-006",
      "front": "TPSとは何の略ですか？",
      "back": "Transactions Per Second（1秒あたりのトランザクション数）の略です。\n\nデータベースシステムのスループットを表す単位として使われます。\n\n例：500 TPS = 1秒間に500件のトランザクションを処理できる",
      "importance": 4
    },
    {
      "id": "fc-tech-2-2-2-007",
      "front": "ベンチマークテストとは？",
      "back": "システムの性能を客観的に評価するため、標準的な負荷をかけて測定する手法です。\n\n代表的なベンチマーク：\n・TPC（データベース性能）\n・SPEC（CPU性能）\n\n異なるシステム間の性能比較に使用されます。",
      "importance": 3
    },
    {
      "id": "fc-tech-2-2-2-008",
      "front": "システムの性能を向上させる主な方法は？",
      "back": "1. スケールアップ：CPUやメモリを増強\n2. スケールアウト：サーバ台数を増やして負荷分散\n3. キャッシング：頻繁にアクセスするデータを高速メモリに保持\n4. インデックス作成：データベース検索を高速化\n5. 非同期処理：時間のかかる処理を後回しにする",
      "importance": 4
    },
    {
      "id": "fc-tech-2-2-2-009",
      "front": "ボトルネックとは何ですか？",
      "back": "システムの性能を制限している最も遅い部分のことです。\n\n例：\n・CPUが常に100%稼働 → CPU がボトルネック\n・ディスクI/Oの待ち時間が長い → ディスクがボトルネック\n\nボトルネックを特定して改善することが性能向上の鍵です。",
      "importance": 4
    },
    {
      "id": "fc-tech-2-2-2-010",
      "front": "キャッシングによる性能改善の仕組みは？",
      "back": "頻繁にアクセスするデータを高速なメモリ（キャッシュ）に保持することで、遅い記憶装置へのアクセスを減らします。\n\n効果：\n・アクセス時間の短縮\n・スループットの向上\n・データベースやディスクの負荷軽減",
      "importance": 4
    },
    {
      "id": "fc-tech-2-2-2-011",
      "front": "CPU使用率が100%の状態は良いですか？",
      "back": "いいえ、必ずしも良い状態ではありません。\n\n・100%が続く：過負荷状態、処理待ちが発生\n・適度な使用率（70～85%程度）：効率的に稼働\n・低すぎる：リソースが無駄になっている\n\n適度な余裕を持たせることが重要です。",
      "importance": 3
    },
    {
      "id": "fc-tech-2-2-2-012",
      "front": "負荷分散の目的は？",
      "back": "複数のサーバに処理を分散させることで、以下を実現します：\n\n1. スループットの向上：並列処理で全体の処理量増加\n2. レスポンスタイムの短縮：各サーバの負荷軽減\n3. 可用性の向上：一部のサーバが故障しても継続稼働\n\nロードバランサが各サーバへの振り分けを行います。",
      "importance": 4
    }
  ]
}
