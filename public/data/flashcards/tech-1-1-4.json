{
  "topicId": "tech-1-1-4",
  "title": "論理回路",
  "flashcards": [
    {
      "id": "fc-tech-1-1-4-001",
      "front": "AND回路（論理積回路）とは？",
      "back": "すべての入力が1のときのみ出力が1になる回路です。\n\n記号: D型（平らな入力側）\n用途: 条件判定、ビットマスク\n\n2入力の場合:\n0,0→0  0,1→0  1,0→0  1,1→1",
      "importance": 5
    },
    {
      "id": "fc-tech-1-1-4-002",
      "front": "OR回路（論理和回路）とは？",
      "back": "少なくとも1つの入力が1なら出力が1になる回路です。\n\n記号: 曲線の入力側\n用途: 複数条件の選択、信号統合\n\n2入力の場合:\n0,0→0  0,1→1  1,0→1  1,1→1",
      "importance": 5
    },
    {
      "id": "fc-tech-1-1-4-003",
      "front": "NOT回路（否定回路）とは？",
      "back": "入力を反転する回路です。別名「インバータ」。\n\n記号: 三角形の先に小さな○\n用途: 信号反転、補数生成\n\n動作:\n0→1\n1→0",
      "importance": 5
    },
    {
      "id": "fc-tech-1-1-4-004",
      "front": "NAND回路とは？",
      "back": "ANDの出力を反転した回路です。万能ゲートの1つ。\n\n記号: AND + 小さな○\n\n特徴:\n・NAND回路だけですべての論理演算を実現可能\n・回路設計で多用される\n\n1,1→0（他はすべて1）",
      "importance": 4
    },
    {
      "id": "fc-tech-1-1-4-005",
      "front": "NOR回路とは？",
      "back": "ORの出力を反転した回路です。万能ゲートの1つ。\n\n記号: OR + 小さな○\n\n特徴:\n・NOR回路だけですべての論理演算を実現可能\n・フリップフロップ回路の基本\n\n0,0→1（他はすべて0）",
      "importance": 4
    },
    {
      "id": "fc-tech-1-1-4-006",
      "front": "XOR回路（排他的論理和回路）とは？",
      "back": "入力が異なるときに出力が1になる回路です。\n\n記号: OR記号の二重線\n用途: パリティチェック、加算器\n\n動作:\n0,0→0  0,1→1  1,0→1  1,1→0",
      "importance": 5
    },
    {
      "id": "fc-tech-1-1-4-007",
      "front": "半加算器とは何ですか？",
      "back": "2つの1ビット数を加算する回路です。\n\n入力: A, B（加算する2ビット）\n出力: S（和）, C（桁上がり）\n\n構成:\nS = A XOR B（和）\nC = A AND B（桁上がり）\n\n例: 1+1 = 10（S=0, C=1）",
      "importance": 5
    },
    {
      "id": "fc-tech-1-1-4-008",
      "front": "全加算器とは何ですか？",
      "back": "3つの1ビット数（2数と前段の桁上がり）を加算する回路です。\n\n入力: A, B, Cin（前段の桁上がり）\n出力: S（和）, Cout（桁上がり）\n\n構成:\n・半加算器2個 + OR回路1個\n・複数ビット加算に使用",
      "importance": 5
    },
    {
      "id": "fc-tech-1-1-4-009",
      "front": "マスクパターンとは何ですか？",
      "back": "特定のビットだけを取り出したり操作したりするためのビットパターンです。\n\n使用例:\n・AND演算: 特定ビットの抽出\n  1101 AND 0011 = 0001（下位2ビット抽出）\n\n・OR演算: 特定ビットを1にする\n  1000 OR 0011 = 1011",
      "importance": 4
    },
    {
      "id": "fc-tech-1-1-4-010",
      "front": "組み合わせ論理回路とは？",
      "back": "出力が現在の入力だけで決まる回路です。\n\n特徴:\n・記憶機能なし\n・入力が同じなら出力は常に同じ\n・真理値表で完全に記述可能\n\n例: AND, OR, NOT, 加算器",
      "importance": 3
    },
    {
      "id": "fc-tech-1-1-4-011",
      "front": "ビット操作でAND演算を使う主な用途は？",
      "back": "特定のビットを0にする（マスク）、または抽出することです。\n\n例1（ビットマスク）:\n1011 AND 1101 = 1001\n\n例2（下位4ビット抽出）:\n10110111 AND 00001111 = 00000111",
      "importance": 4
    },
    {
      "id": "fc-tech-1-1-4-012",
      "front": "ビット操作でOR演算を使う主な用途は？",
      "back": "特定のビットを1にする（セット）ことです。\n\n例（下位4ビットを1にする）:\n10110000 OR 00001111 = 10111111\n\nフラグの設定などに使用されます。",
      "importance": 4
    },
    {
      "id": "fc-tech-1-1-4-013",
      "front": "ビット操作でXOR演算を使う主な用途は？",
      "back": "ビットの反転、パリティチェック、暗号化などです。\n\n用途:\n1. ビット反転: A XOR 1 = NOT A\n2. 同値判定: A XOR A = 0\n3. スワップ: XOR演算3回で変数交換\n4. パリティ計算",
      "importance": 4
    },
    {
      "id": "fc-tech-1-1-4-014",
      "front": "4ビット加算器を構成するには？",
      "back": "全加算器4個を桁上がりで接続します。\n\n構成:\n・最下位ビット: 半加算器または全加算器（Cin=0）\n・2～4ビット目: 全加算器\n・各段の桁上がりを次段に接続\n\nこれを「リップルキャリー加算器」と呼びます。",
      "importance": 3
    }
  ]
}
