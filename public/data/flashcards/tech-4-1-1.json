{
  "topicId": "tech-4-1-1",
  "title": "システム開発プロセス",
  "flashcards": [
    {
      "id": "tech-4-1-1-fc-1",
      "front": "システム開発プロセスの5つのフェーズは？各フェーズの成果物は？",
      "back": "①要件定義：ユーザーのニーズを収集し、システムに必要な機能と制約を明確化 → 成果物: 要件定義書\n\n②システム設計：要件を実現するための設計（外部設計、内部設計） → 成果物: 設計書\n\n③プログラミング：設計書に基づいてプログラムを作成 → 成果物: プログラムコード\n\n④テスト：プログラムが正しく動作するか検証 → 成果物: テスト仕様書、テスト結果報告書\n\n⑤移行と運用保守：本番環境へ移行し、運用開始後の保守 → 成果物: 運用マニュアル、保守計画書",
      "importance": 5
    },
    {
      "id": "tech-4-1-1-fc-2",
      "front": "機能要件と非機能要件の違いは？ECサイトの具体例は？",
      "back": "機能要件（Functional Requirements）：システムが実現すべき機能\n例: 商品検索機能、注文機能、決済機能、管理者機能\n\n非機能要件（Non-Functional Requirements）：システムの性能や制約\n例:\n  - 性能要件: 応答時間1秒以内、同時アクセス数1,000人\n  - 可用性要件: 稼働率99.9%\n  - セキュリティ要件: クレジットカード情報を暗号化\n  - 使いやすさ要件: スマートフォン対応\n\n→ 機能要件は「何ができるか」、非機能要件は「どの程度のレベルで動作するか」を定義",
      "importance": 5
    },
    {
      "id": "tech-4-1-1-fc-3",
      "front": "外部設計と内部設計の違いは？各設計の主な内容は？",
      "back": "外部設計（External Design）：ユーザーから見たシステムの仕様を設計（「何を作るか」）\n主な内容: 画面設計、画面遷移、入出力項目、データ形式\n例: トップページ、商品一覧ページ、カートページの画面設計\n\n内部設計（Internal Design）：システムの内部構造（プログラムの構造）を設計（「どうやって作るか」）\n主な内容: モジュール分割、データベース設計、処理フロー、アルゴリズム\n例: 商品管理モジュール、ユーザーテーブル、商品検索の処理フロー\n\n→ 外部設計はユーザーと協議、内部設計は開発者が技術的観点から設計",
      "importance": 5
    },
    {
      "id": "tech-4-1-1-fc-4",
      "front": "要件定義の重要性は？要件定義が不十分だとどうなる？",
      "back": "要件定義は、システム開発の最も重要なフェーズです。\n\n不十分な場合の問題：\n①必要な機能が抜けていた → 開発途中で追加が必要になり、大幅な手戻り（やり直し）\n②性能が要求を満たさない → システムテストで発覚し、設計から作り直し\n③ユーザーの期待と異なるシステムが完成 → 再開発が必要\n\n重要性：\n「何を作るか」を明確にすることで、後工程の手戻りを防ぐ\nユーザーと開発者が密にコミュニケーションを取り、要件を明確化することが重要",
      "importance": 4
    },
    {
      "id": "tech-4-1-1-fc-5",
      "front": "4つのテスト工程（単体、結合、システム、運用テスト）のテスト対象と実施者は？",
      "back": "①単体テスト（Unit Test）：\nテスト対象: 個々のモジュール（関数、クラス）\n実施者: 開発者（プログラマ）\n目的: 各モジュールが設計通りに動作するか確認\n\n②結合テスト（Integration Test）：\nテスト対象: 複数のモジュールを組み合わせたもの\n実施者: 開発者（テスト担当）\n目的: モジュール間のインターフェース（データの受け渡し）が正しいか確認\n\n③システムテスト（System Test）：\nテスト対象: システム全体\n実施者: テスト担当者\n目的: システム全体が要件定義を満たすか確認（機能、性能、セキュリティ）\n\n④運用テスト（Acceptance Test、受け入れテスト）：\nテスト対象: 本番環境に近い環境でのシステム全体\n実施者: ユーザー（発注者）\n目的: 実際の業務で使えるか確認",
      "importance": 5
    },
    {
      "id": "tech-4-1-1-fc-6",
      "front": "保守の4種類（是正、適応、完全化、予防保守）とは？各保守の具体例は？",
      "back": "①是正保守（Corrective Maintenance）：バグ修正\n例: 「商品検索で価格帯を指定すると、検索結果が0件になる」バグを修正\n\n②適応保守（Adaptive Maintenance）：環境変化（OSバージョンアップ）への対応\n例: クレジットカード決済のAPI仕様が変更 → 決済モジュールを修正\n\n③完全化保守（Perfective Maintenance）：性能改善、機能追加\n例: 「商品検索が遅い」 → データベースにインデックスを追加して高速化\n\n④予防保守（Preventive Maintenance）：将来のトラブルを防ぐための改善\n例: セキュリティパッチを適用して、脆弱性を修正",
      "importance": 4
    },
    {
      "id": "tech-4-1-1-fc-7",
      "front": "外部設計の具体的な内容は？ECサイトの例は？",
      "back": "外部設計では、ユーザーインターフェース（UI）、画面遷移、入出力項目、データ形式などを設計します。\n\nECサイトの例：\n①画面設計: トップページ、商品一覧ページ、商品詳細ページ、カートページ、注文確認ページ、注文完了ページ\n\n②画面遷移: トップページ → 商品一覧ページ → 商品詳細ページ → カートページ → 注文確認ページ → 注文完了ページ\n\n③入出力項目:\n  - 商品検索の入力: キーワード、カテゴリ、価格帯（最小値、最大値）\n  - 商品検索の出力: 商品リスト（商品ID、商品名、価格、在庫状況）\n\n④データ形式: 価格は整数、商品名は文字列（最大100文字）、郵便番号は7桁",
      "importance": 4
    },
    {
      "id": "tech-4-1-1-fc-8",
      "front": "内部設計の具体的な内容は？ECサイトの例は？",
      "back": "内部設計では、プログラムの構造（モジュール分割）、データベース設計、処理フロー、アルゴリズムなどを設計します。\n\nECサイトの例：\n①モジュール分割:\n  - ユーザー管理モジュール: ユーザー登録、ログイン、パスワード変更\n  - 商品管理モジュール: 商品の追加・編集・削除、商品検索\n  - 注文管理モジュール: 注文の登録、注文履歴の表示\n\n②データベース設計:\n  - ユーザーテーブル: ユーザーID、ユーザー名、メールアドレス、パスワード（ハッシュ化）\n  - 商品テーブル: 商品ID、商品名、価格、在庫数、カテゴリID\n\n③処理フロー（商品検索）:\n  ①ユーザーが検索条件を入力 → ②データベースから条件に合う商品を検索 → ③検索結果を表示",
      "importance": 4
    },
    {
      "id": "tech-4-1-1-fc-9",
      "front": "バグの修正コストは、発見が遅れるとどうなる？具体的な倍率は？",
      "back": "バグの修正コストは、発見が遅れるほど高くなります。\n\n単体テストでバグを発見：\n該当モジュールのみ修正すればよい → コスト: 低い\n\n結合テスト・システムテストでバグを発見：\n複数のモジュールに影響 → コスト: やや高い\n\n運用テスト（本番稼働後）でバグを発見：\n大規模な修正が必要 → コスト: 単体テストの100倍以上になることもある\n\n重要性：\nテストは、単体テスト→結合テスト→システムテスト→運用テストの順に実施し、各段階でバグを発見・修正することが重要",
      "importance": 4
    },
    {
      "id": "tech-4-1-1-fc-10",
      "front": "コーディング規約（Coding Standards）とは？守ることで得られる効果は？",
      "back": "コーディング規約とは、プログラムコードの記述ルールです。\n\n代表的なコーディング規約：\n①変数名・関数名の命名規則（キャメルケース、スネークケース）\n②インデント（スペース2個または4個）\n③コメントの記述（関数の先頭に説明を記述）\n④1行の文字数制限（80文字以内）\n\nコーディング規約を守ることで得られる効果：\n①可読性: 他の開発者がコードを読みやすくなる\n②保守性: バグ修正や機能追加がしやすくなる\n③品質: バグの混入を防ぐ",
      "importance": 3
    },
    {
      "id": "tech-4-1-1-fc-11",
      "front": "移行（Migration）の4つの作業内容は？具体例は？",
      "back": "移行とは、開発したシステムを本番環境に導入し、運用を開始することです。\n\n4つの作業内容：\n①データ移行: 既存システムのデータを新システムに移行\n例: 既存の顧客管理システムから、ユーザー情報を新ECサイトのデータベースに移行\n\n②環境構築: 本番サーバの設定\n例: Webサーバ、データベースサーバの設定、SSL証明書の設定\n\n③並行稼働: 旧システムと新システムを並行運用してデータを比較\n例: 1週間、旧システムと新ECサイトを並行運用し、注文データを比較\n\n④本番稼働: 新システムに完全移行\n例: 旧システムを停止し、新ECサイトのみで運用開始",
      "importance": 3
    },
    {
      "id": "tech-4-1-1-fc-12",
      "front": "運用保守のコストは、システム開発ライフサイクル全体のコストのどれくらいを占める？開発フェーズとの比較は？",
      "back": "運用保守のコスト: 60～80%\n開発フェーズのコスト: 20～40%\n\n→ 運用保守のコストの方が圧倒的に高い\n\n重要性：\n開発フェーズで品質を高め、運用保守のコストを削減することが重要\n運用保守を見越した設計（保守性の高いコード、ドキュメント整備）が求められる\n\n運用と保守の違い：\n①運用（Operation）: システムの日常的な運用（バックアップ、監視、障害対応）\n②保守（Maintenance）: システムの修正や機能追加（是正、適応、完全化、予防保守）",
      "importance": 4
    }
  ]
}
