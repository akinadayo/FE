{
  "topicId": "tech-3-3-5",
  "title": "データベース応用",
  "flashcards": [
    {
      "id": "tech-3-3-5-fc-1",
      "front": "分散データベースとは？目的（3つ）は？",
      "back": "複数のコンピュータ（ノード）にデータを分散配置し、論理的には1つのデータベースとして扱う仕組み。利用者はデータの配置場所を意識しない。\n\n目的：\n①可用性の向上（1つのノードが故障しても他のノードで継続）\n②性能の向上（複数ノードで処理を分散）\n③地理的な分散（各拠点にデータを配置し、ネットワーク遅延を削減）",
      "importance": 4
    },
    {
      "id": "tech-3-3-5-fc-2",
      "front": "分散データベースの透過性3種類とは？",
      "back": "①位置透過性：利用者はデータの物理的な配置場所を意識しない\n②分割透過性：データが複数のサーバーに分割されていることを意識しない\n③複製透過性：データが複製されていることを意識しない\n\nこれらにより、利用者は分散データベースを集中型データベースと同じように扱える",
      "importance": 3
    },
    {
      "id": "tech-3-3-5-fc-3",
      "front": "データウェアハウス（DWH）とは？4つの特徴は？",
      "back": "企業の様々な業務システムから収集した大量のデータを、分析目的で統合・蓄積したデータベース。OLAP（分析処理）用。\n\n4つの特徴：\n①時系列データ（過去数年分のデータを保持）\n②主題別（商品別、顧客別など）\n③統合（複数システムのデータを統一フォーマットで格納）\n④非更新（一度格納したデータは基本的に更新しない）",
      "importance": 5
    },
    {
      "id": "tech-3-3-5-fc-4",
      "front": "データマートとは？データウェアハウスとの違いは？",
      "back": "データマート：データウェアハウスの一部を、特定の部門や目的に特化して切り出した小規模なデータベース。\n\n違い：\nデータウェアハウス：全社（全部門）、大量（数TB〜数PB）、構築コスト高い\nデータマート：特定部門（営業部など）、中小量（数GB〜数TB）、構築コスト低い、分析が高速\n\n関係：データウェアハウス（全社）→ データマート（部門別）",
      "importance": 4
    },
    {
      "id": "tech-3-3-5-fc-5",
      "front": "OLTP と OLAP の違いは？（目的、処理内容、データ量、応答時間、具体例）",
      "back": "OLTP（オンライントランザクション処理）：日々の業務を処理\n処理内容：INSERT、UPDATE、DELETE（更新が多い）\nデータ量：少量（直近数ヶ月分）\n応答時間：即座（数秒以内）\n具体例：ATM、POSレジ、ネットショッピング\n\nOLAP（オンライン分析処理）：経営判断を支援\n処理内容：SELECT（集計・分析、更新は少ない）\nデータ量：大量（過去数年分）\n応答時間：やや遅い（数分〜数時間）\n具体例：売上分析、顧客分析、経営ダッシュボード",
      "importance": 5
    },
    {
      "id": "tech-3-3-5-fc-6",
      "front": "OLTPシステムとOLAP用データウェアハウスを分離する理由は？",
      "back": "OLTPシステムでOLAP処理（大量データの集計）を実行すると、大量データの集計処理が業務処理を遅延させる（ATMが使えなくなる）。\n\nそのため、OLTP用の業務データベース（最新データ）とOLAP用のデータウェアハウス（過去データ）を分離し、毎晩、OLTP → データウェアハウス へデータをコピーする。",
      "importance": 4
    },
    {
      "id": "tech-3-3-5-fc-7",
      "front": "データマイニングとは？4つの主な手法は？",
      "back": "大量のデータから、これまで知られていなかった有用なパターンや知識を発見する技術。データの山から「宝石（有用な知識）」を掘り出すイメージ。\n\n4つの主な手法：\n①分類（Classification）：データをカテゴリに分類（例：メールをスパム/非スパムに分類）\n②クラスタリング（Clustering）：類似データをグループ化（例：顧客を「高所得層」「中所得層」「低所得層」に分類）\n③相関分析（Association）：関連性の高い項目を発見（例：ビールとおむつを一緒に購入する）\n④回帰分析（Regression）：数値を予測（例：来月の売上を予測）",
      "importance": 5
    },
    {
      "id": "tech-3-3-5-fc-8",
      "front": "ビッグデータの3V（Volume, Variety, Velocity）とは？",
      "back": "①Volume（量）：データ量が膨大（TB、PB、EB単位）\n例：1台の自動運転車が1日で数TB\n\n②Variety（多様性）：構造化データ（表形式）だけでなく、非構造化データ（画像、動画、テキスト、SNS投稿など）も含む\n例：画像、3D位置データ、GPS\n\n③Velocity（速度）：データが高速に生成される（SNSの投稿、センサーデータなど）\n例：毎秒数GBのデータが生成",
      "importance": 5
    },
    {
      "id": "tech-3-3-5-fc-9",
      "front": "NoSQLとは？RDBMSとの違いは？",
      "back": "NoSQL（Not only SQL）：従来のRDBMSとは異なる設計思想のデータベース。\n\nRDBMSとの違い：\nRDBMS：表形式、ACIDを厳密に保証、垂直スケーラビリティ（サーバーのスペックを上げる）\n例：MySQL、PostgreSQL、Oracle\n\nNoSQL：柔軟なデータモデル（キーバリュー、ドキュメント、グラフなど）、一部の整合性を犠牲にして性能を優先（BASE）、水平スケーラビリティ（サーバーを追加）\n例：Redis、MongoDB、Cassandra、Neo4j",
      "importance": 5
    },
    {
      "id": "tech-3-3-5-fc-10",
      "front": "NoSQLの種類4つと具体例は？",
      "back": "①キーバリュー型（Key-Value Store）：キーに対応する値を保存\n例：Redis（SNSのタイムライン、セッション管理）\n\n②ドキュメント型（Document Store）：JSON形式のドキュメントを保存\n例：MongoDB（Webアプリのデータ保存）\n\n③カラム指向型（Column Store）：列単位でデータを保存\n例：Cassandra（IoTセンサーデータ、ログデータ）\n\n④グラフ型（Graph Database）：ノードとエッジでデータを保存\n例：Neo4j（SNSの友達関係、推薦システム）",
      "importance": 4
    },
    {
      "id": "tech-3-3-5-fc-11",
      "front": "RDBMS と NoSQL の使い分けは？",
      "back": "RDBMS（SQL）を使うべき場合：\n①トランザクションの厳密な整合性が必要（銀行、会計、在庫管理）\n②複雑な検索・集計（JOIN、GROUP BY など）\n③データ構造が定まっている\n\nNoSQLを使うべき場合：\n①大量データを高速に処理（SNS、IoT、ログ分析）\n②水平スケーラビリティが必要（サーバーを追加して性能向上）\n③柔軟なデータ構造（スキーマレス）が必要",
      "importance": 4
    },
    {
      "id": "tech-3-3-5-fc-12",
      "front": "集中型データベース と 分散データベース の長所・短所は？",
      "back": "集中型データベース：\n長所：管理が簡単、整合性が保ちやすい\n短所：単一障害点（サーバー故障で全停止）、性能限界がある\n\n分散データベース：\n長所：可用性が高い（1つのノードが故障しても継続）、性能向上（複数ノードで処理分散）、地理的分散（ネットワーク遅延削減）\n短所：管理が複雑、整合性維持が困難",
      "importance": 3
    }
  ]
}
