{
  "topicId": "tech-4-3-1",
  "title": "アルゴリズムの基礎",
  "flashcards": [
    {
      "id": "tech-4-3-1-fc-1",
      "front": "アルゴリズムとは何か？アルゴリズムが満たすべき5つの条件は？",
      "back": "アルゴリズムとは、問題を解決するための手順や計算方法を明確に定義したものです。\n\n5つの条件：\n①入力：0個以上の入力がある\n②出力：1個以上の出力がある\n③明確性：各手順が明確で曖昧さがない\n④有限性：有限の手順で終了する\n⑤有効性：各手順が実行可能である\n\n例：2つの数の最大値を求めるアルゴリズムは、入力（A、B）、出力（最大値）があり、各手順が明確で、有限の手順で終了し、実行可能。",
      "importance": 5
    },
    {
      "id": "tech-4-3-1-fc-2",
      "front": "フローチャートの5つの基本記号と、その意味は？",
      "back": "①楕円（○）：端子 - 処理の開始・終了\n②長方形（□）：処理 - 計算、代入などの処理\n③ひし形（◇）：判断 - 条件分岐（Yes/No）\n④平行四辺形（▱）：入出力 - データの入力・出力\n⑤矢印（→）：流れ線 - 処理の流れ\n\nフローチャートは、上から下、左から右に流れ、判断記号からは2本以上の流れ線が出る。これにより、アルゴリズムの処理の流れを視覚的に表現できる。",
      "importance": 5
    },
    {
      "id": "tech-4-3-1-fc-3",
      "front": "構造化プログラミングの3つの基本制御構造とは？各構造の特徴は？",
      "back": "①順次構造（Sequence）：\n処理を順番に実行する。上から順に実行される最も基本的な構造。\n\n②選択構造（Selection、分岐）：\n条件によって処理を分岐する。if-else文で実現。\n例：if (点数 >= 60) 合格 else 不合格\n\n③繰返し構造（Iteration、反復）：\n条件を満たす間、処理を繰り返す。while文やfor文で実現。\n例：while (カウンタ < 10) 処理\n\nすべてのプログラムは、これら3つの制御構造の組み合わせで表現できる。",
      "importance": 5
    },
    {
      "id": "tech-4-3-1-fc-4",
      "front": "擬似言語の基本的な記法は？（基本情報技術者試験）",
      "back": "①代入：変数 ← 値（例：A ← 10）\n\n②比較演算子：\n  =（等しい）、!=（等しくない）、>、<、>=、<=\n\n③論理演算子：\n  and（かつ）、or（または）、not（否定）\n\n④if文：\n  if (条件) 処理 else 処理 endif\n\n⑤while文：\n  while (条件) 処理 endwhile\n\n⑥for文：\n  for (変数 ← 初期値, 終了値, 増分) 処理 endfor\n\n例：for (i ← 1, 10, 1) 合計 ← 合計 + i endfor",
      "importance": 5
    },
    {
      "id": "tech-4-3-1-fc-5",
      "front": "while文（前判定）とfor文の違いと、それぞれに適した用途は？",
      "back": "【while文（前判定）】\n構文：while (条件) 処理 endwhile\n特徴：条件をチェックしてから処理を実行。繰り返し回数が不明な場合に使用。\n例：while (入力 != 0) 処理（0が入力されるまで繰り返す）\n\n【for文】\n構文：for (変数 ← 初期値, 終了値, 増分) 処理 endfor\n特徴：繰り返し回数が決まっている場合に使用。カウンタ変数の初期化、条件、増分を1行で記述できる。\n例：for (i ← 1, 10, 1) 処理（10回繰り返す）\n\nfor文の方が簡潔に書けるが、while文の方が柔軟性が高い。",
      "importance": 4
    },
    {
      "id": "tech-4-3-1-fc-6",
      "front": "合計計算アルゴリズムの手順は？変数の初期値と更新方法は？",
      "back": "【問題】1から10までの整数の合計を求める。\n\n【手順】\n①変数の初期化\n  合計 ← 0（初期値は必ず0）\n  カウンタ ← 1\n\n②繰り返し処理\n  while (カウンタ <= 10)\n    合計 ← 合計 + カウンタ（現在の値を加算）\n    カウンタ ← カウンタ + 1（カウンタを1増やす）\n  endwhile\n\n③出力\n  合計を出力（合計=55）\n\n重要ポイント：\n・合計の初期値は0（何も足していない状態）\n・各ループで「合計 ← 合計 + カウンタ」で累積\n・カウンタを1ずつ増やして、終了条件をチェック",
      "importance": 5
    },
    {
      "id": "tech-4-3-1-fc-7",
      "front": "最大値探索アルゴリズムの手順は？初期値の設定方法と比較のポイントは？",
      "back": "【問題】配列A[1]～A[5]から最大値を求める。\n\n【手順】\n①変数の初期化\n  最大値 ← A[1]（1番目の要素を仮の最大値とする）\n\n②繰り返し処理（2番目から比較）\n  for (i ← 2, 5, 1)\n    if (A[i] > 最大値)\n      最大値 ← A[i]（より大きい値が見つかったら更新）\n    endif\n  endfor\n\n③出力\n  最大値を出力\n\n重要ポイント：\n・初期値は1番目の要素（配列が空でない前提）\n・2番目以降と比較して、より大きい値があれば更新\n・最小値を求める場合は、if (A[i] < 最小値) に変更",
      "importance": 5
    },
    {
      "id": "tech-4-3-1-fc-8",
      "front": "平均値計算アルゴリズムの手順は？合計と個数の管理方法は？",
      "back": "【問題】配列A[1]～A[10]の10個の点数から平均点を求める。\n\n【手順】\n①変数の初期化\n  合計 ← 0\n  個数 ← 10\n  平均 ← 0\n\n②繰り返し処理（全ての点数を合計）\n  for (i ← 1, 10, 1)\n    合計 ← 合計 + A[i]\n  endfor\n\n③平均を計算\n  平均 ← 合計 / 個数\n\n④出力\n  平均を出力\n\n重要ポイント：\n・まず合計を求めてから、個数で割る\n・個数が固定の場合は定数、可変の場合はカウンタで管理",
      "importance": 4
    },
    {
      "id": "tech-4-3-1-fc-9",
      "front": "条件付きカウントアルゴリズム（条件を満たすデータを数える）の手順は？",
      "back": "【問題】配列A[1]～A[10]から60点以上の人数を数える。\n\n【手順】\n①変数の初期化\n  合格者数 ← 0（初期値は必ず0）\n\n②繰り返し処理\n  for (i ← 1, 10, 1)\n    if (A[i] >= 60)\n      合格者数 ← 合格者数 + 1（条件を満たす場合のみカウント）\n    endif\n  endfor\n\n③出力\n  合格者数を出力\n\n重要ポイント：\n・カウンタの初期値は0\n・if文で条件をチェックし、条件を満たす場合のみカウンタを増やす\n・条件は問題に応じて変更（例：>=、<、==）",
      "importance": 4
    },
    {
      "id": "tech-4-3-1-fc-10",
      "front": "データの入れ替え（スワップ）アルゴリズムの手順は？作業変数の役割は？",
      "back": "【問題】変数AとBの値を入れ替える。\n初期状態：A=10、B=20\n目標：A=20、B=10\n\n【間違った方法】\nA ← B  // A=20になる\nB ← A  // B=20になってしまう（Aはすでに20）\n→ Aの値（10）が失われる\n\n【正しい方法（作業変数を使う）】\ntemp ← A   // temp=10（Aの値を退避）\nA ← B      // A=20（BをAに代入）\nB ← temp   // B=10（退避した値をBに代入）\n\n重要ポイント：\n・作業変数（temp）を使って、一方の値を一時的に退避\n・3ステップで入れ替え完了\n・ソートアルゴリズムなどで頻繁に使用される基本操作",
      "importance": 4
    },
    {
      "id": "tech-4-3-1-fc-11",
      "front": "配列とは何か？配列を使う利点と、添字（インデックス）の役割は？",
      "back": "【配列（Array）】\n同じ型のデータを複数個、連続したメモリ領域に格納するデータ構造。\n\n【利点】\n①大量のデータを効率的に処理できる\n②添字で要素にアクセスできる（A[1]、A[2]、...）\n③繰り返し処理と組み合わせやすい（for文でA[i]）\n\n【添字（インデックス）】\n配列の要素の位置を示す番号。A[i]はi番目の要素を表す。\n\n【例】\n配列A = [12, 35, 8, 42, 19]\nA[1]=12、A[2]=35、A[3]=8、A[4]=42、A[5]=19\n\nfor (i ← 1, 5, 1) で全要素にアクセス可能。",
      "importance": 4
    },
    {
      "id": "tech-4-3-1-fc-12",
      "front": "アルゴリズムの変数の役割（カウンタ、累計、最大値・最小値、作業変数）とは？",
      "back": "①カウンタ変数：\n繰り返し回数を管理する変数。\n例：i、カウンタ\nfor (i ← 1, 10, 1) でiがカウンタ\n\n②累計変数：\n値を累積する変数。初期値は0。\n例：合計、カウント\n合計 ← 合計 + 値\n\n③最大値・最小値変数：\n現在の最大値・最小値を保持する変数。初期値は1番目のデータ。\n例：最大値 ← A[1]\nif (A[i] > 最大値) 最大値 ← A[i]\n\n④作業変数：\n一時的にデータを保持する変数。\n例：temp（データ入れ替えで使用）\ntemp ← A、A ← B、B ← temp\n\n変数の役割を明確にすることで、アルゴリズムを理解しやすくなる。",
      "importance": 3
    }
  ]
}
