{
  "topicId": "mgmt-1-1-3",
  "title": "スケジュール管理",
  "flashcards": [
    {
      "id": "mgmt-1-1-3-fc-1",
      "front": "アローダイアグラムの3つの構成要素は？各要素の表記方法は？",
      "back": "①作業（アクティビティ）: 矢印（→）で表現。矢印の上に作業名、下に所要時間を記述（例: →[A:5日]→）\n\n②結合点（イベント、ノード）: 丸（○）で表現。作業の開始点・終了点を示す。番号を付ける（例: ○1、○2）\n\n③ダミー作業: 点線矢印（- - →）で表現。所要時間0の仮想的な作業。作業の順序関係を正しく表現するために使用（例: 「作業DとEが両方完了してから作業Fを開始」という関係を表現する場合、DとEの終了点をダミー作業で結合点に集約）\n\nアローダイアグラムにより、プロジェクトの作業の順序関係と所要時間を図示でき、クリティカルパスを特定できる。",
      "importance": 5
    },
    {
      "id": "mgmt-1-1-3-fc-2",
      "front": "クリティカルパスとは？クリティカルパス上の作業の特徴は？",
      "back": "クリティカルパス（Critical Path）とは、プロジェクトの開始から終了までの経路（パス）のうち、所要時間が最も長い経路のこと。\n\nクリティカルパスの所要時間 = プロジェクト全体の所要時間（最短工期）\n\nクリティカルパス上の作業の特徴:\n①1日でも遅延すると、プロジェクト全体が遅延する\n②余裕時間（フロート）がゼロ（フロート=0）\n③最早結合点時刻 = 最遅結合点時刻\n\nプロジェクトマネージャは、クリティカルパス上の作業を重点的に管理し、リソース（人員、予算）を優先的に配分し、進捗を毎日確認する必要がある。\n\n例: パス1（A→B→D→F→G）=15日、パス2（A→C→E→F→G）=20日 → クリティカルパスはパス2（20日）",
      "importance": 5
    },
    {
      "id": "mgmt-1-1-3-fc-3",
      "front": "最早結合点時刻と最遅結合点時刻の定義は？計算方法は？",
      "back": "①最早結合点時刻（Earliest Event Time）:\nその結合点に到達できる最も早い時刻。開始からその結合点までの最長経路の所要時間。\n計算方法: 開始点から順に、前向き計算。複数のパスがある場合、最大値を選択。\n\n②最遅結合点時刻（Latest Event Time）:\nプロジェクト全体を遅延させずに、その結合点に到達できる最も遅い時刻。終了からの逆算。\n計算方法: 終了点から逆向きに計算。複数のパスがある場合、最小値を選択。\n\nクリティカルパスの判定:\n最早結合点時刻 = 最遅結合点時刻 の結合点を結ぶ作業がクリティカルパス。\n\n例: 結合点4の最早結合点時刻=15日、最遅結合点時刻=15日 → 結合点4を通る作業（A→C→E）がクリティカルパス",
      "importance": 5
    },
    {
      "id": "mgmt-1-1-3-fc-4",
      "front": "余裕時間（フロート、スラック）とは？計算式は？クリティカルパス上の作業の余裕時間は？",
      "back": "余裕時間（フロート、スラック）とは、作業を遅らせてもプロジェクト全体に影響を与えない時間のこと。\n\n計算式:\n余裕時間 = 最遅結合点時刻（終点） - 最早結合点時刻（始点） - 作業の所要時間\n\n例: 作業B（始点=結合点1、終点=結合点2）\n余裕時間 = 13（結合点2の最遅） - 5（結合点1の最早） - 3（作業Bの所要時間） = 5日\n→ 作業Bは最大5日遅らせてもプロジェクト全体に影響しない\n\nクリティカルパス上の作業:\n余裕時間 = 0日（1日でも遅れるとプロジェクト全体が遅延）\n\n余裕時間が大きい作業は、リソースを減らしたり、優先度を下げることができる。",
      "importance": 5
    },
    {
      "id": "mgmt-1-1-3-fc-5",
      "front": "プレシデンスダイアグラム法（PDM）の4種類の作業間関係は？各関係の説明と具体例は？",
      "back": "①FS（Finish to Start）:\n前の作業が終了してから、次の作業を開始（最も一般的）\n例: 設計が終了してから、プログラミングを開始\n\n②SS（Start to Start）:\n前の作業が開始したら、次の作業を開始\n例: 設計が開始したら、プログラミングを開始（一部の設計が完了したら実装開始）\n\n③FF（Finish to Finish）:\n前の作業が終了したら、次の作業を終了\n例: プログラミングが終了したら、テスト計画を終了\n\n④SF（Start to Finish）:\n前の作業が開始したら、次の作業を終了（まれ）\n例: 新システムが開始したら、旧システムを終了\n\nPDMは、アローダイアグラムと比べて、①ダミー作業が不要、②SS、FF、SFの関係を表現できる、という利点がある。",
      "importance": 5
    },
    {
      "id": "mgmt-1-1-3-fc-6",
      "front": "アローダイアグラムとPDMの違いは？各手法のメリット・デメリットは？",
      "back": "【アローダイアグラム（PERT図）】\nメリット:\n①クリティカルパスを視覚的に理解しやすい\n②歴史が古く、広く使われている\n\nデメリット:\n①ダミー作業が必要（作業の順序関係を表現するため）\n②作業間の関係がFS（Finish to Start）のみ\n\n【PDM（プレシデンスダイアグラム法）】\nメリット:\n①ダミー作業が不要\n②作業間の関係を柔軟に表現（FS、SS、FF、SF）\n③作業がノード（四角）で表現され、理解しやすい\n\nデメリット:\n①アローダイアグラムに慣れている人には分かりにくい場合がある\n\n実務では、両方を使い分ける（単純なプロジェクトはアローダイアグラム、複雑なプロジェクトはPDM）。",
      "importance": 4
    },
    {
      "id": "mgmt-1-1-3-fc-7",
      "front": "ガントチャートとは？構成要素は？メリットとデメリットは？",
      "back": "ガントチャート（Gantt Chart）とは、プロジェクトの作業を横棒グラフで表現し、作業の開始日、終了日、所要時間、進捗状況を視覚的に示すツール。\n\n構成要素:\n①縦軸: 作業名\n②横軸: 日付（または週、月）\n③横棒: 各作業（左端=開始日、右端=終了日、長さ=所要時間）\n④現在日: 縦線で表示\n⑤進捗状況: 色で表示（完了=緑、進行中=黄、未着手=グレー）\n\nメリット:\n①視覚的に分かりやすい\n②並行作業が分かる\n③進捗管理がしやすい\n④ステークホルダへの報告に適している\n\nデメリット:\n①作業の順序関係（依存関係）が分かりにくい\n②クリティカルパスが分からない\n\n実務では、アローダイアグラム・PDMとガントチャートを併用（計画時にアローダイアグラム、進捗管理時にガントチャート）。",
      "importance": 5
    },
    {
      "id": "mgmt-1-1-3-fc-8",
      "front": "クラッシング（Crashing）とは？具体的な方法は？メリット・デメリットは？",
      "back": "クラッシング（Crashing）とは、クリティカルパス上の作業にリソース（人員、予算）を追加投入して、作業の所要時間を短縮する手法。\n\n具体的な方法:\n①人員を増員（例: プログラマを2人から4人に増員）\n②残業や休日出勤を実施\n③外部委託を追加\n\nメリット:\n①確実にスケジュールを短縮できる\n②リスクが比較的低い\n\nデメリット:\n①コストが増加（人件費、残業代、外部委託費）\n②効果が逓減（人員を2倍にしても、作業時間が半分にならない場合がある。ブルックスの法則: 遅れているプロジェクトに人員を追加すると、さらに遅れる）\n③品質が低下するリスク（急いで作業するとバグが増える）\n\nクラッシングを適用する際は、コスト効率の良い作業から短縮する。",
      "importance": 5
    },
    {
      "id": "mgmt-1-1-3-fc-9",
      "front": "ファストトラッキング（Fast Tracking）とは？具体的な方法は？メリット・デメリットは？",
      "back": "ファストトラッキング（Fast Tracking）とは、本来は順次実行する作業（FS: Finish to Start）を、並行実行（SS: Start to Start、または一部重複）してスケジュールを短縮する手法。\n\n具体的な方法:\n設計の一部が完了したらプログラミングを開始（設計完了を待たずに実装開始）\n\nメリット:\n①コストが増加しない（人員追加なし）\n②大幅な短縮が可能\n\nデメリット:\n①リスクが増加（設計変更が発生すると、プログラミングのやり直しが発生）\n②手戻り（やり直し）コストが発生する可能性\n③コミュニケーションコストが増加（並行作業のため、設計チームとプログラミングチームの調整が必要）\n\n適用条件:\n①設計が安定している（変更が少ない）場合 → 有効\n②設計が不安定（要求が頻繁に変わる）場合 → リスクが高い",
      "importance": 5
    },
    {
      "id": "mgmt-1-1-3-fc-10",
      "front": "クラッシングとファストトラッキングの使い分け基準は？組み合わせ例は？",
      "back": "【使い分け基準】\n①予算に余裕がある → クラッシング（人員追加）\n②予算が限られている → ファストトラッキング（並行実行）\n③短縮幅が小さい（1～2日） → クラッシング（リスクが低い）\n④短縮幅が大きい（1週間以上） → ファストトラッキング（大幅短縮可能）\n⑤設計が安定 → ファストトラッキング（手戻りリスク低）\n⑥設計が不安定 → クラッシング（手戻りを避ける）\n\n【組み合わせ例】\nプロジェクトを3日短縮したい場合:\n①作業A（クリティカルパス）: クラッシングで1日短縮（プログラマ1人追加、コスト5万円）\n②作業BとC: ファストトラッキングで並行実行（2日短縮、コスト増加なし）\n合計: 3日短縮、コスト5万円\n\n両方を組み合わせることで、コストを抑えつつ大幅な短縮が可能。",
      "importance": 4
    },
    {
      "id": "mgmt-1-1-3-fc-11",
      "front": "EVM（Earned Value Management）の3つの指標は？SPI、CPIの計算式と意味は？",
      "back": "【EVMの3つの指標】\n①PV（Planned Value、計画値）: 計画時点で完了しているはずの作業量\n②EV（Earned Value、実績値）: 実際に完了した作業量\n③AC（Actual Cost、実コスト）: 実際に消費したコスト\n\n【SPI（Schedule Performance Index、スケジュール効率指数）】\n計算式: SPI = EV / PV\n意味:\n  SPI = 1.0: スケジュール通り\n  SPI < 1.0: スケジュール遅延（例: SPI=0.8 → 計画の80%のスピード、20%遅れ）\n  SPI > 1.0: スケジュール前倒し\n\n【CPI（Cost Performance Index、コスト効率指数）】\n計算式: CPI = EV / AC\n意味:\n  CPI = 1.0: コスト通り\n  CPI < 1.0: コスト超過（例: CPI=0.8 → 100万円のコスト超過）\n  CPI > 1.0: コスト削減\n\nSPI、CPIを毎週計算し、遅延やコスト超過を早期に検出する。",
      "importance": 4
    },
    {
      "id": "mgmt-1-1-3-fc-12",
      "front": "スケジュール管理の実践的な流れは？週次サイクルで実施する作業は？",
      "back": "【プロジェクト開始時（計画フェーズ）】\n①WBSで作業を洗い出す\n②各作業の所要時間を見積もる\n③アローダイアグラム・PDMを描き、クリティカルパスを特定\n④ガントチャートを作成\n⑤重点管理する作業を決定\n\n【毎週月曜日（進捗確認）】\n①先週の実績を確認\n②ガントチャートを更新\n③遅延の影響範囲を確認（クリティカルパスへの影響）\n④対策を検討（クラッシング、ファストトラッキング）\n⑤EVMで進捗率・SPI・CPIを計算\n⑥週次報告書を作成し、ステークホルダに報告\n\n【毎週金曜日（翌週の計画）】\n①翌週の作業を確認\n②リソースの配分を調整\n③リスクを洗い出し、対策を準備\n\n【毎日（デイリー進捗確認）】\n①朝会（10分）で進捗共有\n②クリティカルパス上の作業の進捗を確認\n③問題が発生したら即座に対応",
      "importance": 4
    }
  ]
}
