{
  "topicId": "tech-3-1-2",
  "title": "入出力設計",
  "flashcards": [
    {
      "id": "tech-3-1-2-fc-1",
      "front": "入出力設計の主な目的は？",
      "back": "①データの正確性を確保、②入力ミスを防止、③データの一意性を保証、④効率的なデータ管理を実現、⑤システムの信頼性を向上させる",
      "importance": 4
    },
    {
      "id": "tech-3-1-2-fc-2",
      "front": "順次コード、区分コード、桁別コードの違いは？",
      "back": "順次コード：連番（0001, 0002...）シンプルだが意味なし\n区分コード：範囲で分類（1xx=営業, 2xx=開発）\n桁別コード：各桁に意味（12-34-567=大分類-中分類-商品番号）",
      "importance": 5
    },
    {
      "id": "tech-3-1-2-fc-3",
      "front": "チェックディジットとは？計算方法は？",
      "back": "コード末尾の検証用数字。入力ミスを検出できる。\n計算：①各桁に重みを掛けて合計→②特定の数で割った余り→③余りから検証数字を算出。モジュラス10やモジュラス11方式がある。",
      "importance": 5
    },
    {
      "id": "tech-3-1-2-fc-4",
      "front": "モジュラス10（重み3,1）の計算例は？",
      "back": "ISBN：978-4-12345-678-?\n①9×1+7×3+8×1+...=126\n②126÷10=12余り6\n③10-6=4\n→チェックディジットは「4」",
      "importance": 4
    },
    {
      "id": "tech-3-1-2-fc-5",
      "front": "ニューメリックチェックとリミットチェックの違いは？",
      "back": "ニューメリックチェック：数字のみで構成されているか（電話番号03-1234-5678）\nリミットチェック：値が上限・下限の範囲内か（年齢0～150歳、点数0～100点）",
      "importance": 5
    },
    {
      "id": "tech-3-1-2-fc-6",
      "front": "主な入力チェックの種類を5つ挙げよ",
      "back": "①ニューメリックチェック（数字のみ）、②リミットチェック（範囲内）、③フォーマットチェック（形式）、④桁数チェック、⑤必須チェック。他に重複チェック、相関チェック、チェックディジット等がある。",
      "importance": 5
    },
    {
      "id": "tech-3-1-2-fc-7",
      "front": "相関チェックとは？具体例は？",
      "back": "複数項目の関係が正しいかを検証。\n例：開始日≦終了日、年齢と生年月日の整合性、小計と消費税の計算が一致するか等",
      "importance": 4
    },
    {
      "id": "tech-3-1-2-fc-8",
      "front": "入力チェックの実装タイミングは？",
      "back": "リアルタイムチェック（入力中・入力直後、すぐミスに気づける）と送信時チェック（フォーム送信時、サーバー側でも必ず検証）の両方を実施することが推奨される。",
      "importance": 4
    },
    {
      "id": "tech-3-1-2-fc-9",
      "front": "桁別コードの具体例を説明せよ",
      "back": "商品コード12-34-567：12=家電、34=テレビ、567=商品番号\n社員番号24-01-0123：24=2024年入社、01=営業部、0123=連番\n→各桁に意味を持たせ、コードから分類がわかる",
      "importance": 3
    },
    {
      "id": "tech-3-1-2-fc-10",
      "front": "チェックディジットで検出できるエラーは？",
      "back": "①単純な入力ミス（1234→1235）、②転置エラー（1234→1243、隣接2桁の入れ替え）、③ダブルエラー（1234→1134）。ただし複数桁のエラーや特定パターンは検出できない場合もある。",
      "importance": 3
    },
    {
      "id": "tech-3-1-2-fc-11",
      "front": "良いエラーメッセージの例と悪い例は？",
      "back": "悪い例：「入力エラーです」（何が間違っているか不明）\n良い例：「郵便番号は7桁の数字で入力してください（例：100-0001）」（具体的で修正方法がわかる）",
      "importance": 4
    },
    {
      "id": "tech-3-1-2-fc-12",
      "front": "入出力設計のベストプラクティスは？",
      "back": "①将来の拡張を考慮した桁数、②重要なコードにチェックディジット付加、③クライアント・サーバー両方で入力チェック、④具体的なエラーメッセージ、⑤デフォルト値の設定",
      "importance": 3
    }
  ]
}
