{
  "topicId": "tech-1-2-2",
  "title": "数値解析",
  "flashcards": [
    {
      "id": "fc-tech-1-2-2-001",
      "front": "桁あふれ誤差（オーバーフロー）とは？",
      "back": "演算結果が表現可能な範囲を超えてしまう誤差です。\n\n例:\n8ビット符号なし整数の最大値: 255\n255 + 1 = 256 → 表現不可能（オーバーフロー）\n\nアンダーフローは逆に最小値を下回る場合です。",
      "importance": 5
    },
    {
      "id": "fc-tech-1-2-2-002",
      "front": "情報落ちとは何ですか？",
      "back": "絶対値が大きく異なる数同士を加減算した際、小さい方の値が無視される誤差です。\n\n例（有効桁数3桁）:\n1.23 × 10⁵ + 4.56 × 10¹\n= 123000 + 45.6\n≒ 123000（45.6が無視される）",
      "importance": 5
    },
    {
      "id": "fc-tech-1-2-2-003",
      "front": "打切り誤差とは何ですか？",
      "back": "無限級数や反復計算を途中で打ち切ることで生じる誤差です。\n\n例:\nπ = 3.14159...\n→ 3.14 で打ち切る\n→ 誤差: 0.00159...\n\n計算時間と精度のトレードオフ。",
      "importance": 4
    },
    {
      "id": "fc-tech-1-2-2-004",
      "front": "桁落ちとは何ですか？",
      "back": "値が近い数同士の減算で有効桁数が減少する誤差です。\n\n例:\n1.2345 - 1.2340 = 0.0005\n→ 有効桁数が5桁から1桁に減少\n\n相対誤差が大きくなる原因。",
      "importance": 5
    },
    {
      "id": "fc-tech-1-2-2-005",
      "front": "丸め誤差とは何ですか？",
      "back": "数値を有限桁で表現する際、端数を丸めることで生じる誤差です。\n\n例:\n1/3 = 0.333333...\n→ 0.33 に丸める\n→ 誤差: 0.003333...\n\n浮動小数点演算で必ず発生します。",
      "importance": 5
    },
    {
      "id": "fc-tech-1-2-2-006",
      "front": "桁落ちを防ぐ方法は？",
      "back": "計算式を変形して減算を避けます。\n\n例: 二次方程式の解の公式\n通常: x = (-b + √(b²-4ac)) / 2a\n\nb²≫4acの場合、桁落ち発生\n→ 分子の有理化などで回避",
      "importance": 3
    },
    {
      "id": "fc-tech-1-2-2-007",
      "front": "情報落ちを防ぐ方法は？",
      "back": "絶対値の小さい数から順に加算します。\n\n悪い例: 10000 + 0.1 + 0.1 + 0.1\n良い例: 0.1 + 0.1 + 0.1 + 10000\n\n累積誤差を最小化できます。",
      "importance": 3
    },
    {
      "id": "fc-tech-1-2-2-008",
      "front": "絶対誤差とは何ですか？",
      "back": "真の値と近似値の差の絶対値です。\n\n計算式:\n絶対誤差 = |真の値 - 近似値|\n\n例:\n真の値: 100\n近似値: 98\n絶対誤差: |100 - 98| = 2",
      "importance": 4
    },
    {
      "id": "fc-tech-1-2-2-009",
      "front": "相対誤差とは何ですか？",
      "back": "絶対誤差を真の値で割った値です。誤差の割合を表します。\n\n計算式:\n相対誤差 = 絶対誤差 / |真の値|\n\n例:\n真の値: 100、近似値: 98\n相対誤差: 2/100 = 0.02（2%）",
      "importance": 4
    },
    {
      "id": "fc-tech-1-2-2-010",
      "front": "有効桁数とは何ですか？",
      "back": "信頼できる数値の桁数です。最初の0でない数字から数えます。\n\n例:\n0.00123 → 有効桁数3桁（1, 2, 3）\n1.230 → 有効桁数4桁（最後の0も有効）\n1200 → 曖昧（2桁または4桁）",
      "importance": 4
    },
    {
      "id": "fc-tech-1-2-2-011",
      "front": "固定小数点数の表現とは？",
      "back": "小数点の位置を固定して数値を表現する方法です。\n\n特徴:\n・整数部と小数部のビット数が固定\n・表現範囲が狭い\n・演算が高速\n・金額計算などに使用",
      "importance": 3
    },
    {
      "id": "fc-tech-1-2-2-012",
      "front": "浮動小数点数の表現とは？",
      "back": "仮数部と指数部に分けて数値を表現する方法です。\n\n形式: ±M × B^E\nM: 仮数部、B: 基数、E: 指数部\n\n例: 1.23 × 10⁵\n→ 広範囲の数値を表現可能",
      "importance": 5
    },
    {
      "id": "fc-tech-1-2-2-013",
      "front": "浮動小数点数の正規化とは？",
      "back": "仮数部の最上位桁を0以外にする操作です。\n\n例（10進数）:\n0.0123 × 10⁴ → 1.23 × 10²（正規化）\n\n利点:\n・一意な表現\n・有効桁数の最大化",
      "importance": 4
    },
    {
      "id": "fc-tech-1-2-2-014",
      "front": "IEEE754とは何ですか？",
      "back": "浮動小数点数の国際標準規格です。\n\n単精度（32ビット）:\n・符号部: 1ビット\n・指数部: 8ビット\n・仮数部: 23ビット\n\n倍精度（64ビット）も規定されています。",
      "importance": 4
    }
  ]
}
