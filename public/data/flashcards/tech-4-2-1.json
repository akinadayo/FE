{
  "topicId": "tech-4-2-1",
  "title": "モジュール設計",
  "flashcards": [
    {
      "id": "tech-4-2-1-fc-1",
      "front": "モジュール設計の目的5つは？",
      "back": "①複雑さの軽減（大きなプログラムを小さな部品に分割）\n②開発効率の向上（複数人で並行開発）\n③再利用性の向上（汎用モジュールを他プロジェクトで使い回し）\n④保守性の向上（該当モジュールだけ修正）\n⑤テストの容易化（モジュール単位でテスト）",
      "importance": 5
    },
    {
      "id": "tech-4-2-1-fc-2",
      "front": "良いモジュール設計の2つの基本原則は？",
      "back": "①高凝集度（Cohesion）：モジュール内の要素が密接に関連し、単一の明確な役割を持つ\n②低結合度（Coupling）：モジュール間の依存関係が少なく、独立性が高い\n→これにより変更の影響が局所化され、保守性が向上",
      "importance": 5
    },
    {
      "id": "tech-4-2-1-fc-3",
      "front": "3つのモジュール分割技法とその適用例は？",
      "back": "①STS分割（Source-Transform-Sink）：入力→処理→出力の流れで分割。データ処理システム、バッチ処理に適す\n②TR分割（Transaction）：トランザクション（処理単位）ごとに分割。オンラインシステム、Webアプリに適す\n③共通機能分割：日付処理、文字列処理、DBアクセス等を共通モジュール化",
      "importance": 5
    },
    {
      "id": "tech-4-2-1-fc-4",
      "front": "STS分割（Source-Transform-Sink）とは？",
      "back": "データの流れに着目し、3つのモジュールに分割\n①Source（入力）：データを取得\n②Transform（変換）：データを加工・処理\n③Sink（出力）：結果を出力\n例：給与計算→勤務データ読込→給与計算→給与明細PDF出力",
      "importance": 4
    },
    {
      "id": "tech-4-2-1-fc-5",
      "front": "結合度の種類を弱い順（望ましい順）に3つ挙げると？",
      "back": "①データ結合（最良◎）：引数のみでデータをやり取り\n②スタンプ結合（良○）：データ構造全体を渡す\n③制御結合（普通△）：制御情報（フラグ）を渡す\n※外部結合（グローバル変数）、共通結合、内容結合は避けるべき",
      "importance": 5
    },
    {
      "id": "tech-4-2-1-fc-6",
      "front": "凝集度の種類を強い順（望ましい順）に3つ挙げると？",
      "back": "①機能的凝集（最良◎）：単一の明確な機能を実行\n②情報的凝集（良○）：同じデータ構造を操作する複数の機能\n③連絡的凝集（良○）：データの流れで関連する複数の機能\n※論理的凝集、偶発的凝集は避けるべき",
      "importance": 5
    },
    {
      "id": "tech-4-2-1-fc-7",
      "front": "データ結合が最も望ましい理由は？",
      "back": "モジュール間のやり取りを引数（パラメータ）のみに限定し、必要最小限のデータだけを渡す。グローバル変数を使わないため、①変更箇所が明確、②モジュールが独立し再利用しやすい、③テストが容易、④並行処理でも安全",
      "importance": 4
    },
    {
      "id": "tech-4-2-1-fc-8",
      "front": "機能的凝集が最も望ましい理由は？",
      "back": "モジュールが単一の明確な機能だけを実行する。例：calculateTax(price)は税計算のみ。①役割が明確、②理解しやすい、③再利用しやすい、④変更の影響が局所化。単一責任の原則（Single Responsibility Principle）に従う",
      "importance": 4
    },
    {
      "id": "tech-4-2-1-fc-9",
      "front": "グローバル変数の多用が問題な理由は？",
      "back": "外部結合（結合度が強い）になり、①どこで変更されたか追跡困難、②複数モジュールが変更すると副作用のリスク大、③並行処理で競合状態が発生、④テストが困難。データ結合（引数と戻り値）に変更すべき",
      "importance": 4
    },
    {
      "id": "tech-4-2-1-fc-10",
      "front": "単一責任の原則（Single Responsibility Principle）とは？",
      "back": "1つのモジュールは1つの責任（機能）のみを持つべきで、変更する理由も1つだけであるべき。例：registerUser()はユーザー登録のみ。これにより独立性が高まり、保守性が向上",
      "importance": 4
    },
    {
      "id": "tech-4-2-1-fc-11",
      "front": "TR分割（Transaction分割）の具体例は？",
      "back": "ECサイトの例：①ユーザー登録モジュール（入力チェック、パスワード暗号化、DB登録）、②商品購入モジュール（在庫チェック、注文作成、決済処理）、③注文キャンセルモジュール（キャンセル可否チェック、在庫復元、返金）など、トランザクションごとに分割",
      "importance": 3
    },
    {
      "id": "tech-4-2-1-fc-12",
      "front": "モジュール設計の評価基準5つは？",
      "back": "①独立性：他モジュールへの依存が少なく単独でテスト可能か\n②理解しやすさ：役割が明確でコードを読めばすぐ理解できるか\n③変更しやすさ：該当モジュールだけ修正すれば良いか\n④再利用しやすさ：他プロジェクトでも使えるか\n⑤テストしやすさ：単体テストで動作確認できるか",
      "importance": 3
    }
  ]
}
