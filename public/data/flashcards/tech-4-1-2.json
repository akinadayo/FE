{
  "topicId": "tech-4-1-2",
  "title": "開発手法",
  "flashcards": [
    {
      "id": "tech-4-1-2-fc-1",
      "front": "ウォーターフォールモデルの利点と欠点は？",
      "back": "利点：\n①各フェーズの成果物が明確で、進捗管理がしやすい\n②各フェーズでレビューを実施し、品質を確保できる\n③大規模プロジェクトでも、計画的に進められる\n\n欠点：\n①開発途中で要件変更が発生すると、前のフェーズに戻る必要があり、コストが大きい（手戻り）\n②実際の動作を確認できるのがテストフェーズなので、顧客が「イメージと違った」と感じるリスクがある\n③開発期間が長く、市場の変化に対応しづらい",
      "importance": 5
    },
    {
      "id": "tech-4-1-2-fc-2",
      "front": "ウォーターフォールモデルが適したプロジェクトは？具体例は？",
      "back": "①要件が明確で、変更が少ないプロジェクト\n例: 銀行の勘定系システム、官公庁のシステム（預金、振込などの業務は長年変わらない）\n\n②品質重視で、バグが許されないプロジェクト\n例: 医療機器の制御システム（各フェーズでレビューを実施し、品質を確保）\n\n③大規模プロジェクトで、計画的に進める必要があるプロジェクト\n例: 基幹業務システム（18ヶ月の計画で、要件定義→設計→プログラミング→テスト→移行）\n\n反対に、要件が不明確で変更が多いプロジェクト（スタートアップの新サービス）には、アジャイル開発が適している。",
      "importance": 5
    },
    {
      "id": "tech-4-1-2-fc-3",
      "front": "プロトタイピングモデルとは？利点と欠点は？",
      "back": "開発の初期段階で、プロトタイプ（試作品）を作成し、顧客にデモを見せて、フィードバックを得ながら開発を進める手法。\n\n利点：\n①早期にフィードバックを得られる → 顧客の期待と開発の方向性のズレを防ぐ\n②UI/UX を顧客と一緒に作り上げられる → 顧客満足度が高い\n\n欠点：\n①プロトタイプ作成に時間がかかる\n②プロトタイプと本番システムの実装が異なる場合、作り直しが必要\n\n適したプロジェクト: 要件が不明確、UI/UX重視のプロジェクト（ECサイトのUI設計など）",
      "importance": 4
    },
    {
      "id": "tech-4-1-2-fc-4",
      "front": "スパイラルモデルとは？流れは？",
      "back": "ウォーターフォールモデルとプロトタイピングモデルを組み合わせた開発手法。リスク分析を重視し、開発を「計画→リスク分析→開発→評価」のサイクル（スパイラル）で繰り返す。\n\n流れ（サイクルを繰り返す）：\n①計画: 開発する機能を決定\n②リスク分析: リスク（センサーの誤差、通信エラー）を分析\n③開発: プロトタイプを作成\n④評価: 顧客にデモを見せ、フィードバックを得る\n\n適したプロジェクト: 大規模で複雑、リスクが高いプロジェクト（航空機の制御システムなど）",
      "importance": 4
    },
    {
      "id": "tech-4-1-2-fc-5",
      "front": "アジャイル開発とは？利点と欠点は？",
      "back": "短期間（1～4週間）のサイクル（イテレーション、スプリント）で、「計画→開発→テスト→リリース」を繰り返す開発手法。要件を小さな単位に分割し、優先度の高い機能から順番に開発。\n\n利点：\n①変更に柔軟に対応できる: 市場の反応を見ながら、優先度を変更できる\n②早期にリリースできる: 2週間ごとに動作するソフトウェアをリリース → ユーザーの反応を早く得られる\n③顧客満足度が高い: 顧客（ユーザー）のフィードバックを常に反映\n\n欠点：\n①計画的な進捗管理が難しい: 要件が変わるため、全体の完成時期が見えにくい\n②ドキュメントが少ない: 動作するソフトウェアを重視するため、設計書が不足しがち\n\n適したプロジェクト: 要件が不明確で変更が多い、スピード重視のプロジェクト（スタートアップの新サービスなど）",
      "importance": 5
    },
    {
      "id": "tech-4-1-2-fc-6",
      "front": "スクラムの3つの役割は？各役割の責任は？",
      "back": "①プロダクトオーナー（Product Owner）:\n顧客の代表。要件の優先順位を決定。プロダクトバックログ（全ての要件をリスト化）を管理。\n\n②スクラムマスター（Scrum Master）:\nチームの支援。障害の除去（例: サーバが遅い → サーバを増強）。スクラムのルールを守らせる。\n\n③開発チーム（Development Team）:\n実際の開発を担当。自己組織化（自分たちで計画・実行）。\n\nスクラムは、アジャイル開発の具体的な手法の1つで、チームの役割、イベント（会議）、成果物が明確に定義されている。",
      "importance": 5
    },
    {
      "id": "tech-4-1-2-fc-7",
      "front": "スクラムの4つのイベント（会議）は？各イベントの目的は？",
      "back": "①スプリント計画ミーティング（Sprint Planning）:\nプロダクトオーナーが優先度の高い機能を提示。開発チームが、2週間で実現可能な機能を選択。タスクに分解。（2時間）\n\n②デイリースクラム（Daily Scrum、朝会）:\n昨日やったこと、今日やること、困っていること（障害）を共有。短時間で情報共有、問題を早期に発見。（毎日15分）\n\n③スプリントレビュー（Sprint Review）:\n開発チームが、完成した機能をプロダクトオーナーにデモ。フィードバックを得る。（1時間）\n\n④スプリントレトロスペクティブ（Sprint Retrospective、振り返り）:\nチーム全員で、スプリントの進め方を振り返り、改善点を議論。（1時間）",
      "importance": 4
    },
    {
      "id": "tech-4-1-2-fc-8",
      "front": "XPの4つの代表的なプラクティスは？",
      "back": "①ペアプログラミング（Pair Programming）:\n2人のプログラマが1台のPCで一緒にコードを書く。ドライバー（実際にコードを入力）とナビゲーター（コードをレビュー）。役割を定期的に交代。\n\n②テスト駆動開発（TDD: Test-Driven Development）:\nコードを書く前に、テストコードを書く。テストを実行 → 失敗 → 最小限のコードを書いてテストを通す → リファクタリング。\n\n③継続的インテグレーション（CI: Continuous Integration）:\nチームメンバーが、1日に複数回、コードをリポジトリ（Git）にコミットし、自動的にビルド・テストを実行。\n\n④リファクタリング（Refactoring）:\n動作を変えずに、コードの構造を改善すること。\n\nXPは、アジャイル開発の具体的な手法の1つで、プログラミングの品質と効率を高めるためのプラクティスを定義。",
      "importance": 4
    },
    {
      "id": "tech-4-1-2-fc-9",
      "front": "テスト駆動開発（TDD）の手順は？利点は？",
      "back": "手順:\n①テストコードを書く（例: 商品検索関数のテスト）\n②テストを実行 → 失敗（まだ関数が実装されていないため）\n③最小限のコードを書いてテストを通す（例: 固定値を返す）\n④テストを実行 → 成功\n⑤リファクタリング（コードを改善、実際のデータベース検索を実装）\n\n利点:\n①テストが常に最新（コードを書くたびにテストを書く）\n②バグが減る（テストで早期に発見）\n③設計が改善される（テストしやすいコードを書くため、モジュール化が進む）\n\n「コードを書く前に、テストコードを書く」という開発手法。",
      "importance": 4
    },
    {
      "id": "tech-4-1-2-fc-10",
      "front": "ペアプログラミングの利点と欠点は？",
      "back": "2人のプログラマが1台のPCで一緒にコードを書く手法。ドライバー（実際にコードを入力）とナビゲーター（コードをレビューし、設計や問題点を指摘）。役割を定期的に交代（30分ごと）。\n\n利点:\n①コードの品質が向上（常にレビューされる）\n②知識の共有（2人でコードを書くため、属人化を防ぐ）\n③問題の早期発見（ナビゲーターがバグや設計の問題を指摘）\n\n欠点:\n①2人で1つの機能を開発 → 人件費が2倍（ただし、バグが減るため、長期的にはコスト削減になる場合もある）",
      "importance": 3
    },
    {
      "id": "tech-4-1-2-fc-11",
      "front": "DevOpsとは？CI/CDパイプラインの流れは？",
      "back": "DevOps: 開発（Development）と運用（Operations）を密に連携させ、ソフトウェアの開発・デプロイ・運用を高速化・自動化する手法。\n\nCI/CDパイプラインの流れ:\n①開発者が、新機能のコードを書き、Git にコミット\n②CI サーバが、自動的にビルド、単体テスト、コードの静的解析、結合テストを実行 → テスト失敗したら開発者にメール通知\n③テストが成功したら、自動的にステージング環境にデプロイ\n④ステージング環境で、システムテストを実行（自動）\n⑤システムテストが成功したら、本番環境にデプロイ（自動 or ワンクリック）\n⑥本番環境で、監視ツールがサーバの負荷、エラーログを監視 → エラーが発生したらアラート\n\n目的: ①リリースの高速化、②品質の向上、③運用の安定化",
      "importance": 4
    },
    {
      "id": "tech-4-1-2-fc-12",
      "front": "開発手法の選択基準は？各手法に適したプロジェクトは？",
      "back": "①要件が明確で変更が少ない、品質重視 → ウォーターフォールモデル\n例: 銀行の勘定系システム、官公庁のシステム\n\n②要件が不明確で変更が多い、スピード重視 → アジャイル開発（スクラム、XP）\n例: スタートアップの新サービス、SNSサービス\n\n③大規模で複雑、リスクが高い → スパイラルモデル\n例: 航空機の制御システム\n\n④頻繁にリリースしたい → DevOps（CI/CD）\n例: Webアプリケーション（Netflix は1日に100回以上デプロイ）\n\n実際のプロジェクトでは、複数の開発手法を組み合わせることもある（例: 基本はアジャイルだが、重要な機能はウォーターフォールで開発）。",
      "importance": 5
    }
  ]
}
