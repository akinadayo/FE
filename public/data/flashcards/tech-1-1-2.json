{
  "topicId": "tech-1-1-2",
  "title": "2進数の計算",
  "flashcards": [
    {
      "id": "fc-tech-1-1-2-001",
      "front": "2進数の足し算で桁上がりが発生するのはどんな場合ですか?",
      "back": "1 + 1 = 10のように、同じ桁で1同士を足すと桁上がりが発生します。\n\n例:\n  1011\n+  101\n------\n 10000",
      "importance": 5
    },
    {
      "id": "fc-tech-1-1-2-002",
      "front": "2の補数とは何ですか?",
      "back": "負の数を2進数で表現する方法です。正の数のビットを全て反転させて（1の補数）、さらに1を加えることで求めます。\n\n例: -5の2の補数（8ビット）\n5 = 00000101\n反転 = 11111010\n+1 = 11111011",
      "importance": 5
    },
    {
      "id": "fc-tech-1-1-2-003",
      "front": "2の補数で負の数を判別する方法は?",
      "back": "最上位ビット（符号ビット）が1なら負の数、0なら正の数です。\n\n例:\n10000001 → 負の数\n01111111 → 正の数",
      "importance": 4
    },
    {
      "id": "fc-tech-1-1-2-004",
      "front": "論理シフトと算術シフトの違いは?",
      "back": "論理シフト: 符号を考慮せず、空いたビットに0を入れる\n算術シフト: 符号ビットを保持する（右シフト時、符号ビットで埋める）\n\n論理右シフト: 10110011 → 01011001\n算術右シフト: 10110011 → 11011001（符号ビット保持）",
      "importance": 5
    },
    {
      "id": "fc-tech-1-1-2-005",
      "front": "左シフト1回は何倍になりますか?",
      "back": "2倍になります。\n\n例:\n0101（5）を左シフト → 1010（10）\n\n左シフトn回 = 2^n倍",
      "importance": 4
    },
    {
      "id": "fc-tech-1-1-2-006",
      "front": "右シフト1回は何分の1になりますか?",
      "back": "1/2（2分の1）になります。小数点以下は切り捨てられます。\n\n例:\n1010（10）を右シフト → 0101（5）\n\n右シフトn回 = 1/2^n",
      "importance": 4
    },
    {
      "id": "fc-tech-1-1-2-007",
      "front": "2進数の引き算はどのように行いますか?",
      "back": "2の補数を使って足し算に変換します。\n\n例: 5 - 3 = 5 + (-3)\n5 = 00000101\n-3の2の補数 = 11111101\n加算すると = 00000010（2）\n※桁あふれは無視",
      "importance": 5
    },
    {
      "id": "fc-tech-1-1-2-008",
      "front": "2進数のかけ算の基本原理は?",
      "back": "10進数と同様に、各桁をかけてシフトしながら足し合わせます。ただし、2進数では×0か×1しかないため、シフトと加算だけで計算できます。\n\n例: 101 × 11\n   101\n×   11\n------\n   101\n  101\n------\n  1111",
      "importance": 3
    },
    {
      "id": "fc-tech-1-1-2-009",
      "front": "オーバーフローとは何ですか?",
      "back": "演算結果が表現可能な範囲を超えてしまうことです。\n\n例（4ビット）:\n1111（最大値15）+ 0001 = 10000\n→ 5ビット必要だが4ビットしかないためオーバーフロー発生",
      "importance": 5
    },
    {
      "id": "fc-tech-1-1-2-010",
      "front": "2進数の1の補数とは?",
      "back": "全てのビットを反転させた値です。0→1、1→0に変換します。\n\n例:\n元の値: 10110011\n1の補数: 01001100\n\n※2の補数は「1の補数 + 1」",
      "importance": 4
    },
    {
      "id": "fc-tech-1-1-2-011",
      "front": "8ビットで表現できる数の範囲は?（符号付き）",
      "back": "符号付き: -128 ～ +127（合計256通り）\n\n最上位ビットが符号ビット:\n01111111 = +127\n10000000 = -128",
      "importance": 4
    },
    {
      "id": "fc-tech-1-1-2-012",
      "front": "ローテート（循環シフト）とは?",
      "back": "シフトでビット列から押し出されたビットを、反対側に戻す操作です。\n\n左ローテート: 10110011 → 01100111（最上位ビットが最下位へ）\n右ローテート: 10110011 → 11011001（最下位ビットが最上位へ）",
      "importance": 3
    }
  ]
}
