{
  "topicId": "tech-4-1-4",
  "title": "テスト技法",
  "flashcards": [
    {
      "id": "tech-4-1-4-fc-1",
      "front": "ホワイトボックステストとブラックボックステストの違いは？各テストで使用する技法は？",
      "back": "ホワイトボックステスト:\n①プログラムの内部構造（ソースコード）を理解した上でテスト\n②コードの全ての経路が実行されるかを検証\n③主なテスト技法: 命令網羅（C0）、判定条件網羅（C1）、条件網羅（C2）\n④主に単体テストで使用、開発者が実施\n\nブラックボックステスト:\n①プログラムの内部構造を知らずに、仕様書に基づいてテスト\n②入力と出力が正しいかを検証\n③主なテスト技法: 同値分割法、境界値分析、デシジョンテーブル\n④主に結合テスト、システムテストで使用、テスト担当者やユーザーが実施",
      "importance": 5
    },
    {
      "id": "tech-4-1-4-fc-2",
      "front": "命令網羅（C0）、判定条件網羅（C1）、条件網羅（C2）のカバレッジの定義と強度の関係は？",
      "back": "①命令網羅（C0、ステートメントカバレッジ）:\n全ての命令（文）を最低1回実行。カバレッジの強度は最も弱い。\n\n②判定条件網羅（C1、ブランチカバレッジ、分岐網羅）:\n全ての判定（if文、while文など）で真と偽の両方を実行。カバレッジの強度は中程度。\n\n③条件網羅（C2、コンディションカバレッジ）:\n全ての条件（AとB、AまたはB）で真と偽の両方を実行。カバレッジの強度は最も強い。\n\nカバレッジの強度: 条件網羅 > 判定条件網羅 > 命令網羅\n条件網羅を満たせば、判定条件網羅と命令網羅も満たす。",
      "importance": 5
    },
    {
      "id": "tech-4-1-4-fc-3",
      "front": "判定条件網羅（C1）を100%満たすために必要なテストケース数は？（if (A && B) の場合）",
      "back": "if (A && B) の判定条件網羅を100%満たすには、最低2つのテストケースが必要。\n\n判定は「A && B」全体で、真と偽の2つの結果がある。\n\nテストケース1: A=真、B=真 → 判定は真（if文の中を実行）\nテストケース2: A=偽、B=偽 → 判定は偽（if文の中をスキップ）\n\nこれで判定の真と偽の両方を実行できるため、判定条件網羅100%を達成。\n\n注意: 条件網羅（C2）を100%満たすには、A と B の両方で真と偽を実行する必要があるため、4つのテストケース（A=真B=真、A=真B=偽、A=偽B=真、A=偽B=偽）が必要。",
      "importance": 4
    },
    {
      "id": "tech-4-1-4-fc-4",
      "front": "同値分割法とは？具体例（年齢による料金計算）でテストケースを説明せよ。",
      "back": "同値分割法: 入力値を同じ結果になるグループ（同値クラス）に分割し、各グループから代表値を1つ選んでテストする技法。\n\n具体例（映画館の入場料金）:\n仕様: 0～5歳は無料、6～17歳は1,000円、18～64歳は1,800円、65歳以上は1,200円、負の数・126歳以上はエラー\n\n同値クラス:\n①0～5歳（代表値: 3歳） → 無料\n②6～17歳（代表値: 12歳） → 1,000円\n③18～64歳（代表値: 30歳） → 1,800円\n④65歳以上（代表値: 70歳） → 1,200円\n⑤負の数（代表値: -5） → エラー\n⑥126歳以上（代表値: 150） → エラー\n\nテストケース数: 6ケース（全ての年齢をテストする代わりに、6つの代表値のみをテスト）",
      "importance": 5
    },
    {
      "id": "tech-4-1-4-fc-5",
      "front": "境界値分析とは？同値分割法との違いと、テストする値は？",
      "back": "境界値分析: 同値クラスの境界値（最小値、最大値、境界の前後の値）を重点的にテストする技法。\n\n同値分割法との違い:\n- 同値分割法: 各グループから代表値（通常は中央の値）を1つ選ぶ\n- 境界値分析: 境界値とその前後の値を選ぶ（境界値、境界値-1、境界値+1）\n\n理由: 経験上、バグは境界値付近で発生しやすい（不等号の間違い、オフバイワンエラーなど）\n\n例（0～5歳は無料、6～17歳は1,000円）:\n境界値: 0、5、6、17\nテストする値: -1、0、5、6、17、18（境界値とその前後）\n\n実際のプロジェクトでは、同値分割法と境界値分析を併用するのが一般的。",
      "importance": 5
    },
    {
      "id": "tech-4-1-4-fc-6",
      "front": "デシジョンテーブルとは？どのような場合に使用するか？",
      "back": "デシジョンテーブル（決定表）: 複数の条件の組み合わせを表形式で整理し、全ての組み合わせに対する動作（アクション）を定義する技法。\n\n構成要素:\n①条件（Condition）: 判定する条件（例: 会員？、5,000円以上？、速達配送？）\n②アクション（Action）: 条件の組み合わせに対する動作（例: 送料無料、送料500円）\n③ルール（Rule）: 条件とアクションの組み合わせ（例: 会員かつ5,000円以上 → 送料無料）\n\n使用場面: 複数の条件がある場合（例: 会員・非会員、配送方法、価格帯）\n\n利点: 複雑な条件分岐を整理でき、全ての組み合わせを網羅的にテストできる。漏れや矛盾を防げる。",
      "importance": 4
    },
    {
      "id": "tech-4-1-4-fc-7",
      "front": "単体テストと結合テストの違いは？スタブとドライバの役割は？",
      "back": "単体テスト:\n①テスト対象: 個々のモジュール（関数、クラス）\n②実施者: 開発者\n③主なテスト技法: ホワイトボックステスト（命令網羅、判定条件網羅）\n④目的: 各モジュールが設計通りに動作するか確認\n\n結合テスト:\n①テスト対象: 複数のモジュールを組み合わせたもの\n②実施者: 開発者・テスト担当者\n③主なテスト技法: ブラックボックステスト（同値分割、境界値分析）\n④目的: モジュール間のインターフェース（データの受け渡し）が正しいか確認\n\nスタブ: テスト対象のモジュールが呼び出す下位モジュールの代わり（固定値を返す疑似モジュール）\nドライバ: テスト対象のモジュールを呼び出す上位モジュールの代わり（テストデータを渡す疑似モジュール）",
      "importance": 5
    },
    {
      "id": "tech-4-1-4-fc-8",
      "front": "トップダウンテストとボトムアップテストの違いは？各テストで使用するのはスタブかドライバか？",
      "back": "トップダウンテスト:\n①上位モジュール（UI）から下位モジュールへ順番に結合\n②スタブを使用（下位モジュールの代わりに固定値を返す）\n③利点: 早期に画面を確認できる\n④欠点: スタブの作成が必要\n\nボトムアップテスト:\n①下位モジュール（データベースアクセス）から上位モジュールへ順番に結合\n②ドライバを使用（上位モジュールの代わりにテストデータを渡す）\n③利点: 基盤部分の品質を早期に確保できる\n④欠点: ドライバの作成が必要\n\nサンドイッチテスト: トップダウンテストとボトムアップテストを組み合わせる（実際のプロジェクトでよく使われる）",
      "importance": 4
    },
    {
      "id": "tech-4-1-4-fc-9",
      "front": "システムテストと受入テストの違いは？各テストで実施する内容は？",
      "back": "システムテスト:\n①テスト対象: システム全体\n②実施者: テスト担当者\n③目的: システム全体が要件定義を満たすか確認\n④実施内容:\n  - 機能テスト: 全ての機能が正しく動作するか確認\n  - 性能テスト: 応答時間、スループットが要件を満たすか確認\n  - セキュリティテスト: 脆弱性がないか確認\n  - 使いやすさテスト: ユーザーが使いやすいか確認\n\n受入テスト（運用テスト）:\n①テスト対象: 本番環境に近い環境でのシステム全体\n②実施者: ユーザー（発注者）\n③目的: 実際の業務で使えるか確認\n④実施内容: 実際の業務フロー（実際の業務データを使用）を実行\n⑤合格すれば: システムが「受け入れ」られ、本番稼働に進む",
      "importance": 5
    },
    {
      "id": "tech-4-1-4-fc-10",
      "front": "回帰テスト（リグレッションテスト）とは？なぜ重要か？",
      "back": "回帰テスト（Regression Test）: プログラムを修正（バグ修正、機能追加）した後、修正によって既存の機能に悪影響がないか（デグレードが発生していないか）を確認するテスト。\n\n手順:\n①修正した機能のテスト（バグが修正されたことを確認）\n②既存機能のテスト（過去のテストケースを再実行）\n③全てのテストケースが成功 → 修正による副作用がないことを確認\n\nなぜ重要か:\nプログラムの一部を修正すると、予期せず別の部分に影響が出ることがある（デグレード、退行）。回帰テストにより、修正による副作用を発見できる。\n\n自動化: 回帰テストは、毎回同じテストケースを実行するため、テスト自動化ツール（Selenium、JUnit）で自動化することが推奨される。",
      "importance": 5
    },
    {
      "id": "tech-4-1-4-fc-11",
      "front": "負荷テストとストレステストの違いは？各テストの目的は？",
      "back": "負荷テスト（Load Test）:\n①目的: 同時アクセス数を増やし、システムが要件を満たすか確認\n②例: 1,000人同時アクセスで応答時間が1秒以内か確認\n③想定範囲内の負荷でテスト\n④結果: 要件を満たさない場合、性能改善（サーバ増強、コード最適化）が必要\n\nストレステスト（Stress Test）:\n①目的: システムの限界を超える負荷をかけ、どこまで耐えられるかを確認\n②例: 10,000人同時アクセスでもシステムがダウンしないか確認\n③想定範囲を超える負荷でテスト\n④結果: システムの限界を把握し、障害発生時の挙動（エラーメッセージ、自動復旧）を確認\n\n両方ともシステムテストで実施。負荷テストツール（JMeter、Gatling）を使用。",
      "importance": 4
    },
    {
      "id": "tech-4-1-4-fc-12",
      "front": "テストレベルごとのカバレッジ目標の例と、バグ修正コストの関係は？",
      "back": "カバレッジ目標の例:\n①安全性が重要なシステム（医療機器、航空機）: 条件網羅80%以上\n②ビジネスアプリケーション（ECサイト、業務システム）: 判定条件網羅70～80%\n③プロトタイプやPoC: 命令網羅50%以上\n\nバグ修正コストの関係:\n一般的に、バグの修正コストは、発見が遅れるほど高くなる。\n\n①単体テストでバグ発見: 修正コスト = 1\n②結合テストでバグ発見: 修正コスト = 10～20倍\n③システムテストでバグ発見: 修正コスト = 50～100倍\n④受入テスト・本番稼働後: 修正コスト = 100倍以上（大規模な修正、信頼性の低下）\n\nテストは、単体テスト→結合テスト→システムテスト→受入テストの順に実施し、各段階でバグを発見・修正することが重要。",
      "importance": 4
    }
  ]
}
