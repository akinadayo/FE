{
  "topicId": "tech-3-3-2",
  "title": "データベース設計",
  "flashcards": [
    {
      "id": "tech-3-3-2-fc-1",
      "front": "正規化の目的4つは？",
      "back": "①データの重複排除：同じデータを複数箇所に保存しない\n②更新異常の防止：データ更新時の不整合を防ぐ\n③挿入異常の防止：新規データ登録時の問題を防ぐ\n④削除異常の防止：データ削除時の意図しない情報損失を防ぐ",
      "importance": 5
    },
    {
      "id": "tech-3-3-2-fc-2",
      "front": "更新異常、挿入異常、削除異常の具体例は？",
      "back": "更新異常：佐藤の学科を3行のうち1行だけ「AI」に変更→学科が「情報」と「AI」に分裂\n挿入異常：新しい学科「AI学科」を登録したいが、学生がいないと登録できない\n削除異常：田中の受講を全て削除→田中の学生情報（学生ID、学生名、学科）も消える",
      "importance": 4
    },
    {
      "id": "tech-3-3-2-fc-3",
      "front": "関数従属（A→B）とは？具体例は？",
      "back": "ある列Aの値が決まると、別の列Bの値が一意に決まる関係\n記法：A → B（「AがBを関数的に決定する」）\n例：①社員ID → 氏名（社員ID=101なら「佐藤太郎」と一意に決まる）\n②（学生ID, 科目ID） → 成績（学生101が数学を受講した成績は80点と一意に決まる）",
      "importance": 5
    },
    {
      "id": "tech-3-3-2-fc-4",
      "front": "第1正規形（1NF）の定義3つは？",
      "back": "①反復グループがない：列の繰り返し（受講科目1, 2, 3など）が存在しない\n②各セルが分割不可能な値（原子値）：1つのセルに複数の値を格納しない（カンマ区切り禁止）\n③主キーが定義されている：各行を一意に識別できる列（または列の組み合わせ）が存在する",
      "importance": 5
    },
    {
      "id": "tech-3-3-2-fc-5",
      "front": "部分関数従属とは？具体例は？",
      "back": "主キーの一部だけで他の列が決まる関係\n例：主キーが（学生ID, 受講科目）の場合、学生ID → 学生名（学生IDだけで学生名が決まる）は部分関数従属\n問題：学生名が重複し、更新異常が発生",
      "importance": 5
    },
    {
      "id": "tech-3-3-2-fc-6",
      "front": "第2正規形（2NF）の定義と変換方法は？",
      "back": "定義：第1正規形であり、かつ部分関数従属を持たない\n変換方法：①主キーの一部に従属する列を別表に分離、②元の表には主キー全体に従属する列のみ残す\n例：学生ID → 学生名を別表（学生表）に分離",
      "importance": 5
    },
    {
      "id": "tech-3-3-2-fc-7",
      "front": "推移的関数従属とは？具体例は？",
      "back": "A → B かつ B → C のとき、A → C が成り立つ関係\n例：社員ID → 部署ID かつ 部署ID → 部署名 のとき、社員ID → 部署名 が推移的関数従属\n問題：部署名が重複し、更新異常が発生（営業部が2回出現、電話番号変更時に2行更新が必要）",
      "importance": 5
    },
    {
      "id": "tech-3-3-2-fc-8",
      "front": "第3正規形（3NF）の定義と変換方法は？",
      "back": "定義：第2正規形であり、かつ推移的関数従属を持たない（主キー以外の列が他の非キー列を決定しない）\n変換方法：①非キー列に従属する列を別表に分離、②元の表には主キーに直接従属する列のみ残す\n例：部署ID → 部署名を別表（部署表）に分離",
      "importance": 5
    },
    {
      "id": "tech-3-3-2-fc-9",
      "front": "第1正規形、第2正規形、第3正規形の違いは？",
      "back": "第1正規形（1NF）：反復グループがなく、原子値のみ、主キーあり（受講科目1,2,3 → 受講科目の1列に統一）\n第2正規形（2NF）：1NF + 部分関数従属を持たない（学生ID → 学生名を別表に分離）\n第3正規形（3NF）：2NF + 推移的関数従属を持たない（部署ID → 部署名を別表に分離）",
      "importance": 5
    },
    {
      "id": "tech-3-3-2-fc-10",
      "front": "E-R図（実体関連図）の基本要素4つは？",
      "back": "①実体（Entity）：データベースで管理する対象（例：学生、科目）。表記：四角形\n②属性（Attribute）：実体の性質（例：学生ID、氏名）。表記：楕円形\n③関連（Relationship）：実体間の関係（例：「受講する」）。表記：ひし形\n④カーディナリティ（多重度）：関連の対応関係（1対1、1対多、多対多）",
      "importance": 4
    },
    {
      "id": "tech-3-3-2-fc-11",
      "front": "カーディナリティ3種類（1対1、1対多、多対多）の具体例と表への変換は？",
      "back": "1対1：社員 ─ 社員証（1人に1枚）→ どちらか一方の表に外部キーを追加\n1対多：部署 ─ 社員（1部署に複数社員）→ 多側（社員表）に外部キー（部署ID）を追加\n多対多：学生 ─ 科目（複数ずつ対応）→ 中間表（受講表）を作成し、両側への外部キーを持つ",
      "importance": 4
    },
    {
      "id": "tech-3-3-2-fc-12",
      "front": "データベース設計の流れ5段階は？",
      "back": "①要件定義：どんなデータを管理するか決める\n②概念設計：E-R図を描き、実体と関連を整理\n③論理設計：E-R図を関係モデル（表）に変換し、正規化（1NF → 2NF → 3NF）を実施\n④物理設計：インデックス、ストレージ、パフォーマンスを考慮\n⑤実装：DDL（CREATE TABLE）でデータベースを構築",
      "importance": 3
    }
  ]
}
