{
  "topicId": "tech-2-3-1",
  "title": "オペレーティングシステム（OS）",
  "flashcards": [
    {
      "id": "tech-2-3-1-001",
      "front": "OSの主な役割を4つ挙げてください。",
      "back": "1) リソース管理：CPU、メモリ、ディスクなどのハードウェア資源を効率的に管理・配分、2) プロセス管理：複数のプログラムを並行実行、3) ファイル管理：ファイルやディレクトリの管理、4) 入出力管理：周辺機器とのデータのやり取りを制御。OSはハードウェアとアプリケーションの仲介役として、ユーザーやプログラムがハードウェアを意識せずに使えるようにします。",
      "importance": "high"
    },
    {
      "id": "tech-2-3-1-002",
      "front": "基本ソフトウェアと応用ソフトウェアの違いを説明してください。",
      "back": "基本ソフトウェア（システムソフトウェア）は、コンピュータを動作させるための基本的なソフトウェアで、OS、デバイスドライバ、ユーティリティなどが含まれます。応用ソフトウェア（アプリケーションソフトウェア）は、特定の業務や目的のために作られたソフトウェアで、ワープロ、表計算、Webブラウザ、業務システムなどです。基本ソフトウェア上で応用ソフトウェアが動作します。",
      "importance": "high"
    },
    {
      "id": "tech-2-3-1-003",
      "front": "ミドルウェアとは何ですか？",
      "back": "OSと応用ソフトウェアの中間に位置し、アプリケーション開発を支援するソフトウェアです。代表的なミドルウェアには、1) データベース管理システム（DBMS）、2) Webサーバ、3) アプリケーションサーバ、4) メッセージキュー、などがあります。共通的な機能を提供することで、アプリケーション開発の効率化と品質向上を実現します。",
      "importance": "high"
    },
    {
      "id": "tech-2-3-1-004",
      "front": "API（Application Program Interface）とは何ですか？",
      "back": "OSやミドルウェアが提供する機能をアプリケーションプログラムから利用するためのインタフェース（約束事）です。APIを使用することで、ファイル操作、ネットワーク通信、画面表示などの共通機能を簡単に利用できます。プログラマーは低レベルの処理を意識せずに開発でき、異なるプラットフォーム間での互換性も向上します。",
      "importance": "high"
    },
    {
      "id": "tech-2-3-1-005",
      "front": "GUIとCUIの違いを説明してください。",
      "back": "GUI（Graphical User Interface）は、アイコン、ウィンドウ、マウスなどを使用した視覚的な操作環境です。直感的で初心者にも使いやすいです。CUI（Character User Interface）は、キーボードからコマンドを入力して操作する文字ベースの環境です。効率的で自動化しやすく、上級者向けです。WindowsやmacOSはGUI、LinuxのシェルはCUIの代表例です。",
      "importance": "high"
    },
    {
      "id": "tech-2-3-1-006",
      "front": "代表的なOSを3つ挙げ、特徴を説明してください。",
      "back": "1) Windows：Microsoft社のOS。GUIが使いやすく、個人・企業で広く使用。豊富なアプリケーションが利用可能。2) macOS：Apple社のOS。Mac専用。デザイン性が高く、クリエイティブ分野で人気。3) Linux：オープンソースのOS。無料で自由にカスタマイズ可能。サーバやスーパーコンピュータで広く採用。安定性とセキュリティに優れる。",
      "importance": "medium"
    },
    {
      "id": "tech-2-3-1-007",
      "front": "UNIXの特徴を説明してください。",
      "back": "1969年に開発されたマルチユーザー・マルチタスクOSです。特徴は、1) マルチユーザー：複数ユーザーが同時利用可能、2) 移植性：C言語で記述され異なるハードウェアに移植しやすい、3) 階層型ファイルシステム、4) 強力なコマンド群とシェル、5) 高い安定性。LinuxはUNIXの設計思想を受け継いでいます。サーバやワークステーションで広く使用されています。",
      "importance": "medium"
    },
    {
      "id": "tech-2-3-1-008",
      "front": "マルチタスクとは何ですか？",
      "back": "1つのCPUで複数のタスク（プログラム）を同時並行的に実行する機能です。実際には、OSが短時間でタスクを切り替えて実行することで、あたかも同時に動いているように見せます（タイムシェアリング）。ユーザーは複数のアプリケーションを同時に使用でき、生産性が向上します。現代のOSはすべてマルチタスク機能を持っています。",
      "importance": "medium"
    },
    {
      "id": "tech-2-3-1-009",
      "front": "マルチユーザーシステムとは何ですか？",
      "back": "複数のユーザーが同時に1台のコンピュータを使用できるシステムです。各ユーザーは独立した作業環境を持ち、他のユーザーの影響を受けません。OSはユーザー認証、アクセス制御、リソース配分などを管理します。UNIXやLinuxは元々マルチユーザー設計で、サーバシステムでは必須の機能です。セキュリティと効率的なリソース利用が実現できます。",
      "importance": "medium"
    },
    {
      "id": "tech-2-3-1-010",
      "front": "デバイスドライバとは何ですか？",
      "back": "特定のハードウェア（デバイス）をOSから制御するためのソフトウェアです。プリンタ、ディスプレイ、ネットワークカードなど、各デバイスには専用のドライバが必要です。ドライバがハードウェアの詳細を隠蔽することで、アプリケーションは統一的なAPIでデバイスを利用できます。新しいデバイスを接続する際は、適切なドライバのインストールが必要です。",
      "importance": "medium"
    },
    {
      "id": "tech-2-3-1-011",
      "front": "カーネルとは何ですか？",
      "back": "OSの中核部分で、ハードウェアを直接制御し、基本的な機能を提供します。主な役割は、1) プロセス管理、2) メモリ管理、3) デバイス管理、4) ファイルシステム管理、などです。カーネルモード（特権モード）で動作し、すべてのハードウェアにアクセスできます。アプリケーションはユーザーモードで動作し、カーネルを通じてハードウェアを利用します。",
      "importance": "medium"
    },
    {
      "id": "tech-2-3-1-012",
      "front": "シェルとは何ですか？",
      "back": "ユーザーとOSカーネルの仲介をするプログラムです。ユーザーからのコマンド入力を受け付け、カーネルに処理を依頼し、結果を表示します。UNIXやLinuxでは、bash、zsh、cshなど複数のシェルが利用可能です。シェルスクリプトを作成することで、複数のコマンドを自動実行でき、作業の効率化が図れます。",
      "importance": "low"
    },
    {
      "id": "tech-2-3-1-013",
      "front": "リアルタイムOSの特徴は何ですか？",
      "back": "決められた時間内に確実に処理を完了することが保証されるOSです。特徴は、1) 応答時間の予測可能性、2) 優先度ベースのタスクスケジューリング、3) 割り込み処理の高速化、4) デッドライン管理。産業機器、自動車、医療機器、ロボットなど、時間制約が厳しいシステムで使用されます。汎用OSとは設計思想が異なり、確実性を最優先します。",
      "importance": "low"
    },
    {
      "id": "tech-2-3-1-014",
      "front": "組込みOSとは何ですか？",
      "back": "家電製品、スマートフォン、自動車、産業機器などに組み込まれて使用される専用のOSです。特徴は、1) 小型・軽量、2) 低消費電力、3) リアルタイム性、4) 特定用途に最適化。代表例として、Android（スマートフォン）、iOS（iPhone）、TRON（家電・自動車）などがあります。汎用OSと異なり、限られたリソースで効率的に動作するよう設計されています。",
      "importance": "low"
    }
  ]
}